using System;
using System.Globalization;
using System.IO;
using System.Text;

namespace DynamicAssemblyInfo
{
	/// <summary>
	/// DynamicAssemblyInfo generates the Version.Assembly.cs file for a Dapple build.
	/// Expected input is the following:
	/// - the path to version.txt (uses this for the major, minor, and build numbers)
	/// - output filename (this is the Version.Assembly.cs file that the other Dapple
	/// projects use)
	/// 
	/// The revision number is calculated as the number of days that have passed since DappleEpoch.
	/// 
	/// The project is set to have its post-build "Run Always", which ensures that automated builds
	/// always generate an up-to-date Version.Assembly.cs. However, this will also cause VS to
	/// rebuild the entire solution each time. It is recommended that users change the post-build
	/// event to "On Successful Build".
	/// </summary>
	class Program
	{
		static readonly DateTime DappleEpoch = new DateTime(2008, 9, 1);

		public static int Main(String[] args)
		{
			// --- Check input ---

			if (args.Length != 2)
			{
				Console.Error.WriteLine("Invalid number of parameters. Expected path to version.txt and output filename.");
				return -1;
			}


			// --- Read in Dapple's major, minor and build numbers from version.txt ---

			Version oMajorMinorBuild = new Version(File.ReadAllText(args[0]));


			// --- Calculate the Dapple version number by the number of days that have passed since DappleEpoch.
			// --- This will overflow in approx. 27.4 years.  That should be long enough.

			DateTime oNow = DateTime.Now;
			int iRevision = (oNow - DappleEpoch).Days;
			if (iRevision > 9999)
			{
				Console.Error.WriteLine("DynamicAssemblyInfo cannot complete the operation: too many days have passed since the epoch. Update DynamicAssemblyInfo's epoch to be newer.");
				return -2;
			}
			Version oVersion = new Version(oMajorMinorBuild.Major, oMajorMinorBuild.Minor, oMajorMinorBuild.Build, (oNow - DappleEpoch).Days);


			// --- Generate output file ---

			StringBuilder output = new StringBuilder();
			output.AppendLine("// -----------------------------------------------------------------------------");
			output.AppendLine("// This file has been generated by DynamicAssemblyInfo.exe");
			output.AppendLine("// -----------------------------------------------------------------------------");
			output.AppendLine();
			output.AppendLine("using System.Reflection;");
			output.AppendLine("using System.Runtime.InteropServices;");
			output.AppendLine();
			output.AppendLine("[assembly: AssemblyCompanyAttribute(\"Geosoft Inc.\")]");
			output.AppendLine("[assembly: AssemblyProductAttribute(\"Dapple\")]");
			output.AppendLine("[assembly: AssemblyCopyrightAttribute(\"Copyright © " + oNow.Year.ToString(CultureInfo.InvariantCulture) + "\")]");
			output.AppendLine("[assembly: AssemblyTrademarkAttribute(\"\")]");
			output.AppendLine("[assembly: AssemblyVersionAttribute(\"" + oVersion.ToString(4) + "\")]");
			output.AppendLine("[assembly: AssemblyFileVersion(\"" + oVersion.ToString(4) + "\")]");
			output.AppendLine("[assembly: AssemblyDelaySignAttribute(false)]");
			output.AppendLine("[assembly: AssemblyKeyNameAttribute(\"\")]");
			output.AppendLine("[assembly: ComVisible(false)]");

			File.WriteAllText(args[1], output.ToString());

			return 0;
		}
	}
}
