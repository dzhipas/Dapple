//
// OperationType.cs
//
// This file was generated by XMLSpy 2006r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace capabilities_1_3_0.wms
{
	public class OperationType : Altova.Xml.Node
	{
		#region Forward constructors

		public OperationType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public OperationType(XmlNode node) : base(node) { SetCollectionParents(); }
		public OperationType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public OperationType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "Format" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "Format", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "DCPType" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "DCPType", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new DCPTypeType(DOMNode).AdjustPrefix();
			}
		}



		#region Format accessor methods
		public static int GetFormatMinCount()
		{
			return 1;
		}

		public static int FormatMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetFormatMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int FormatMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetFormatCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Format");
		}

		public int FormatCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Format");
			}
		}

		public bool HasFormat()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "Format");
		}

		public SchemaString NewFormat()
		{
			return new SchemaString();
		}

		public SchemaString GetFormatAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Format", index)));
		}

		public XmlNode GetStartingFormatCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "Format" );
		}

		public XmlNode GetAdvancedFormatCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "Format", curNode );
		}

		public SchemaString GetFormatValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetFormat()
		{
			return GetFormatAt(0);
		}

		public SchemaString Format
		{
			get
			{
				return GetFormatAt(0);
			}
		}

		public void RemoveFormatAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Format", index);
		}

		public void RemoveFormat()
		{
			while (HasFormat())
				RemoveFormatAt(0);
		}

		public void AddFormat(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "Format", newValue.ToString());
		}

		public void InsertFormatAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Format", index, newValue.ToString());
		}

		public void ReplaceFormatAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Format", index, newValue.ToString());
		}
		#endregion // Format accessor methods

		#region Format collection
        public FormatCollection	MyFormats = new FormatCollection( );

        public class FormatCollection: IEnumerable
        {
            OperationType parent;
            public OperationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public FormatEnumerator GetEnumerator() 
			{
				return new FormatEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class FormatEnumerator: IEnumerator 
        {
			int nIndex;
			OperationType parent;
			public FormatEnumerator(OperationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.FormatCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetFormatAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Format collection

		#region DCPType accessor methods
		public static int GetDCPTypeMinCount()
		{
			return 1;
		}

		public static int DCPTypeMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetDCPTypeMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int DCPTypeMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetDCPTypeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "DCPType");
		}

		public int DCPTypeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "DCPType");
			}
		}

		public bool HasDCPType()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "DCPType");
		}

		public DCPTypeType NewDCPType()
		{
			return new DCPTypeType(domNode.OwnerDocument.CreateElement("DCPType", "http://www.opengis.net/wms"));
		}

		public DCPTypeType GetDCPTypeAt(int index)
		{
			return new DCPTypeType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "DCPType", index));
		}

		public XmlNode GetStartingDCPTypeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "DCPType" );
		}

		public XmlNode GetAdvancedDCPTypeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "DCPType", curNode );
		}

		public DCPTypeType GetDCPTypeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new DCPTypeType( curNode );
		}


		public DCPTypeType GetDCPType()
		{
			return GetDCPTypeAt(0);
		}

		public DCPTypeType DCPType
		{
			get
			{
				return GetDCPTypeAt(0);
			}
		}

		public void RemoveDCPTypeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "DCPType", index);
		}

		public void RemoveDCPType()
		{
			while (HasDCPType())
				RemoveDCPTypeAt(0);
		}

		public void AddDCPType(DCPTypeType newValue)
		{
			AppendDomElement("http://www.opengis.net/wms", "DCPType", newValue);
		}

		public void InsertDCPTypeAt(DCPTypeType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "DCPType", index, newValue);
		}

		public void ReplaceDCPTypeAt(DCPTypeType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "DCPType", index, newValue);
		}
		#endregion // DCPType accessor methods

		#region DCPType collection
        public DCPTypeCollection	MyDCPTypes = new DCPTypeCollection( );

        public class DCPTypeCollection: IEnumerable
        {
            OperationType parent;
            public OperationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public DCPTypeEnumerator GetEnumerator() 
			{
				return new DCPTypeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class DCPTypeEnumerator: IEnumerator 
        {
			int nIndex;
			OperationType parent;
			public DCPTypeEnumerator(OperationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.DCPTypeCount );
			}
			public DCPTypeType  Current 
			{
				get 
				{
					return(parent.GetDCPTypeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // DCPType collection

        private void SetCollectionParents()
        {
            MyFormats.Parent = this; 
            MyDCPTypes.Parent = this; 
	}
}
}
