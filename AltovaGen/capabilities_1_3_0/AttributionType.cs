//
// AttributionType.cs
//
// This file was generated by XMLSpy 2006r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace capabilities_1_3_0.wms
{
	public class AttributionType : Altova.Xml.Node
	{
		#region Forward constructors

		public AttributionType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public AttributionType(XmlNode node) : base(node) { SetCollectionParents(); }
		public AttributionType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public AttributionType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "Title" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "Title", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "OnlineResource" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "OnlineResource", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new OnlineResourceType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "LogoURL" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "LogoURL", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new LogoURLType(DOMNode).AdjustPrefix();
			}
		}



		#region Title accessor methods
		public static int GetTitleMinCount()
		{
			return 0;
		}

		public static int TitleMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetTitleMaxCount()
		{
			return 1;
		}

		public static int TitleMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTitleCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Title");
		}

		public int TitleCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Title");
			}
		}

		public bool HasTitle()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "Title");
		}

		public SchemaString NewTitle()
		{
			return new SchemaString();
		}

		public SchemaString GetTitleAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Title", index)));
		}

		public XmlNode GetStartingTitleCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "Title" );
		}

		public XmlNode GetAdvancedTitleCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "Title", curNode );
		}

		public SchemaString GetTitleValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetTitle()
		{
			return GetTitleAt(0);
		}

		public SchemaString Title
		{
			get
			{
				return GetTitleAt(0);
			}
		}

		public void RemoveTitleAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Title", index);
		}

		public void RemoveTitle()
		{
			while (HasTitle())
				RemoveTitleAt(0);
		}

		public void AddTitle(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "Title", newValue.ToString());
		}

		public void InsertTitleAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Title", index, newValue.ToString());
		}

		public void ReplaceTitleAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Title", index, newValue.ToString());
		}
		#endregion // Title accessor methods

		#region Title collection
        public TitleCollection	MyTitles = new TitleCollection( );

        public class TitleCollection: IEnumerable
        {
            AttributionType parent;
            public AttributionType Parent
			{
				set
				{
					parent = value;
				}
			}
			public TitleEnumerator GetEnumerator() 
			{
				return new TitleEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class TitleEnumerator: IEnumerator 
        {
			int nIndex;
			AttributionType parent;
			public TitleEnumerator(AttributionType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.TitleCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetTitleAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Title collection

		#region OnlineResource accessor methods
		public static int GetOnlineResourceMinCount()
		{
			return 0;
		}

		public static int OnlineResourceMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetOnlineResourceMaxCount()
		{
			return 1;
		}

		public static int OnlineResourceMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetOnlineResourceCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "OnlineResource");
		}

		public int OnlineResourceCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "OnlineResource");
			}
		}

		public bool HasOnlineResource()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "OnlineResource");
		}

		public OnlineResourceType NewOnlineResource()
		{
			return new OnlineResourceType(domNode.OwnerDocument.CreateElement("OnlineResource", "http://www.opengis.net/wms"));
		}

		public OnlineResourceType GetOnlineResourceAt(int index)
		{
			return new OnlineResourceType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "OnlineResource", index));
		}

		public XmlNode GetStartingOnlineResourceCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "OnlineResource" );
		}

		public XmlNode GetAdvancedOnlineResourceCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "OnlineResource", curNode );
		}

		public OnlineResourceType GetOnlineResourceValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new OnlineResourceType( curNode );
		}


		public OnlineResourceType GetOnlineResource()
		{
			return GetOnlineResourceAt(0);
		}

		public OnlineResourceType OnlineResource
		{
			get
			{
				return GetOnlineResourceAt(0);
			}
		}

		public void RemoveOnlineResourceAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "OnlineResource", index);
		}

		public void RemoveOnlineResource()
		{
			while (HasOnlineResource())
				RemoveOnlineResourceAt(0);
		}

		public void AddOnlineResource(OnlineResourceType newValue)
		{
			AppendDomElement("http://www.opengis.net/wms", "OnlineResource", newValue);
		}

		public void InsertOnlineResourceAt(OnlineResourceType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "OnlineResource", index, newValue);
		}

		public void ReplaceOnlineResourceAt(OnlineResourceType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "OnlineResource", index, newValue);
		}
		#endregion // OnlineResource accessor methods

		#region OnlineResource collection
        public OnlineResourceCollection	MyOnlineResources = new OnlineResourceCollection( );

        public class OnlineResourceCollection: IEnumerable
        {
            AttributionType parent;
            public AttributionType Parent
			{
				set
				{
					parent = value;
				}
			}
			public OnlineResourceEnumerator GetEnumerator() 
			{
				return new OnlineResourceEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class OnlineResourceEnumerator: IEnumerator 
        {
			int nIndex;
			AttributionType parent;
			public OnlineResourceEnumerator(AttributionType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.OnlineResourceCount );
			}
			public OnlineResourceType  Current 
			{
				get 
				{
					return(parent.GetOnlineResourceAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // OnlineResource collection

		#region LogoURL accessor methods
		public static int GetLogoURLMinCount()
		{
			return 0;
		}

		public static int LogoURLMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetLogoURLMaxCount()
		{
			return 1;
		}

		public static int LogoURLMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLogoURLCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "LogoURL");
		}

		public int LogoURLCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "LogoURL");
			}
		}

		public bool HasLogoURL()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "LogoURL");
		}

		public LogoURLType NewLogoURL()
		{
			return new LogoURLType(domNode.OwnerDocument.CreateElement("LogoURL", "http://www.opengis.net/wms"));
		}

		public LogoURLType GetLogoURLAt(int index)
		{
			return new LogoURLType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "LogoURL", index));
		}

		public XmlNode GetStartingLogoURLCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "LogoURL" );
		}

		public XmlNode GetAdvancedLogoURLCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "LogoURL", curNode );
		}

		public LogoURLType GetLogoURLValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new LogoURLType( curNode );
		}


		public LogoURLType GetLogoURL()
		{
			return GetLogoURLAt(0);
		}

		public LogoURLType LogoURL
		{
			get
			{
				return GetLogoURLAt(0);
			}
		}

		public void RemoveLogoURLAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "LogoURL", index);
		}

		public void RemoveLogoURL()
		{
			while (HasLogoURL())
				RemoveLogoURLAt(0);
		}

		public void AddLogoURL(LogoURLType newValue)
		{
			AppendDomElement("http://www.opengis.net/wms", "LogoURL", newValue);
		}

		public void InsertLogoURLAt(LogoURLType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "LogoURL", index, newValue);
		}

		public void ReplaceLogoURLAt(LogoURLType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "LogoURL", index, newValue);
		}
		#endregion // LogoURL accessor methods

		#region LogoURL collection
        public LogoURLCollection	MyLogoURLs = new LogoURLCollection( );

        public class LogoURLCollection: IEnumerable
        {
            AttributionType parent;
            public AttributionType Parent
			{
				set
				{
					parent = value;
				}
			}
			public LogoURLEnumerator GetEnumerator() 
			{
				return new LogoURLEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class LogoURLEnumerator: IEnumerator 
        {
			int nIndex;
			AttributionType parent;
			public LogoURLEnumerator(AttributionType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.LogoURLCount );
			}
			public LogoURLType  Current 
			{
				get 
				{
					return(parent.GetLogoURLAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // LogoURL collection

        private void SetCollectionParents()
        {
            MyTitles.Parent = this; 
            MyOnlineResources.Parent = this; 
            MyLogoURLs.Parent = this; 
	}
}
}
