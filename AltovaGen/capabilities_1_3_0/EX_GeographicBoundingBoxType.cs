//
// EX_GeographicBoundingBoxType.cs
//
// This file was generated by XMLSpy 2007r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace capabilities_1_3_0.wms
{
	public class EX_GeographicBoundingBoxType : Altova.Xml.Node
	{
		#region Documentation
	/*
		public static string GetAnnoDocumentation() { return ""; }
	 */ 
		#endregion

		#region Forward constructors

		public EX_GeographicBoundingBoxType() : base() { SetCollectionParents(); }

		public EX_GeographicBoundingBoxType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public EX_GeographicBoundingBoxType(XmlNode node) : base(node) { SetCollectionParents(); }
		public EX_GeographicBoundingBoxType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public EX_GeographicBoundingBoxType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "westBoundLongitude" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "westBoundLongitude", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "eastBoundLongitude" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "eastBoundLongitude", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "southBoundLatitude" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "southBoundLatitude", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "northBoundLatitude" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "northBoundLatitude", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "wms:EX_GeographicBoundingBox");
		}


		#region westBoundLongitude Documentation
/*
		public static string GetwestBoundLongitudeAnnoDocumentation()
		{
			return "";		
		}
 */ 
		public static string GetwestBoundLongitudeDefault()
		{
			return "";		
		}
		#endregion

		#region westBoundLongitude accessor methods
		public static int GetwestBoundLongitudeMinCount()
		{
			return 1;
		}

		public static int westBoundLongitudeMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetwestBoundLongitudeMaxCount()
		{
			return 1;
		}

		public static int westBoundLongitudeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetwestBoundLongitudeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "westBoundLongitude");
		}

		public int westBoundLongitudeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "westBoundLongitude");
			}
		}

		public bool HaswestBoundLongitude()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "westBoundLongitude");
		}

		public longitudeType NewwestBoundLongitude()
		{
			return new longitudeType();
		}

		public longitudeType GetwestBoundLongitudeAt(int index)
		{
			return new longitudeType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "westBoundLongitude", index)));
		}

		public XmlNode GetStartingwestBoundLongitudeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "westBoundLongitude" );
		}

		public XmlNode GetAdvancedwestBoundLongitudeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "westBoundLongitude", curNode );
		}

		public longitudeType GetwestBoundLongitudeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new longitudeType( curNode.InnerText );
		}


		public longitudeType GetwestBoundLongitude()
		{
			return GetwestBoundLongitudeAt(0);
		}

		public longitudeType westBoundLongitude
		{
			get
			{
				return GetwestBoundLongitudeAt(0);
			}
		}

		public void RemovewestBoundLongitudeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "westBoundLongitude", index);
		}

		public void RemovewestBoundLongitude()
		{
			RemovewestBoundLongitudeAt(0);
		}

		public XmlNode AddwestBoundLongitude(longitudeType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "westBoundLongitude", newValue.ToString());
			return null;
		}

		public void InsertwestBoundLongitudeAt(longitudeType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "westBoundLongitude", index, newValue.ToString());
		}

		public void ReplacewestBoundLongitudeAt(longitudeType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "westBoundLongitude", index, newValue.ToString());
		}
		#endregion // westBoundLongitude accessor methods

		#region westBoundLongitude collection
        public westBoundLongitudeCollection	MywestBoundLongitudes = new westBoundLongitudeCollection( );

        public class westBoundLongitudeCollection: IEnumerable
        {
            EX_GeographicBoundingBoxType parent;
            public EX_GeographicBoundingBoxType Parent
			{
				set
				{
					parent = value;
				}
			}
			public westBoundLongitudeEnumerator GetEnumerator() 
			{
				return new westBoundLongitudeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class westBoundLongitudeEnumerator: IEnumerator 
        {
			int nIndex;
			EX_GeographicBoundingBoxType parent;
			public westBoundLongitudeEnumerator(EX_GeographicBoundingBoxType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.westBoundLongitudeCount );
			}
			public longitudeType  Current 
			{
				get 
				{
					return(parent.GetwestBoundLongitudeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // westBoundLongitude collection

		#region eastBoundLongitude Documentation
/*
		public static string GeteastBoundLongitudeAnnoDocumentation()
		{
			return "";		
		}
 */ 
		public static string GeteastBoundLongitudeDefault()
		{
			return "";		
		}
		#endregion

		#region eastBoundLongitude accessor methods
		public static int GeteastBoundLongitudeMinCount()
		{
			return 1;
		}

		public static int eastBoundLongitudeMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GeteastBoundLongitudeMaxCount()
		{
			return 1;
		}

		public static int eastBoundLongitudeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GeteastBoundLongitudeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "eastBoundLongitude");
		}

		public int eastBoundLongitudeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "eastBoundLongitude");
			}
		}

		public bool HaseastBoundLongitude()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "eastBoundLongitude");
		}

		public longitudeType NeweastBoundLongitude()
		{
			return new longitudeType();
		}

		public longitudeType GeteastBoundLongitudeAt(int index)
		{
			return new longitudeType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "eastBoundLongitude", index)));
		}

		public XmlNode GetStartingeastBoundLongitudeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "eastBoundLongitude" );
		}

		public XmlNode GetAdvancedeastBoundLongitudeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "eastBoundLongitude", curNode );
		}

		public longitudeType GeteastBoundLongitudeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new longitudeType( curNode.InnerText );
		}


		public longitudeType GeteastBoundLongitude()
		{
			return GeteastBoundLongitudeAt(0);
		}

		public longitudeType eastBoundLongitude
		{
			get
			{
				return GeteastBoundLongitudeAt(0);
			}
		}

		public void RemoveeastBoundLongitudeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "eastBoundLongitude", index);
		}

		public void RemoveeastBoundLongitude()
		{
			RemoveeastBoundLongitudeAt(0);
		}

		public XmlNode AddeastBoundLongitude(longitudeType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "eastBoundLongitude", newValue.ToString());
			return null;
		}

		public void InserteastBoundLongitudeAt(longitudeType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "eastBoundLongitude", index, newValue.ToString());
		}

		public void ReplaceeastBoundLongitudeAt(longitudeType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "eastBoundLongitude", index, newValue.ToString());
		}
		#endregion // eastBoundLongitude accessor methods

		#region eastBoundLongitude collection
        public eastBoundLongitudeCollection	MyeastBoundLongitudes = new eastBoundLongitudeCollection( );

        public class eastBoundLongitudeCollection: IEnumerable
        {
            EX_GeographicBoundingBoxType parent;
            public EX_GeographicBoundingBoxType Parent
			{
				set
				{
					parent = value;
				}
			}
			public eastBoundLongitudeEnumerator GetEnumerator() 
			{
				return new eastBoundLongitudeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class eastBoundLongitudeEnumerator: IEnumerator 
        {
			int nIndex;
			EX_GeographicBoundingBoxType parent;
			public eastBoundLongitudeEnumerator(EX_GeographicBoundingBoxType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.eastBoundLongitudeCount );
			}
			public longitudeType  Current 
			{
				get 
				{
					return(parent.GeteastBoundLongitudeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // eastBoundLongitude collection

		#region southBoundLatitude Documentation
/*
		public static string GetsouthBoundLatitudeAnnoDocumentation()
		{
			return "";		
		}
 */ 
		public static string GetsouthBoundLatitudeDefault()
		{
			return "";		
		}
		#endregion

		#region southBoundLatitude accessor methods
		public static int GetsouthBoundLatitudeMinCount()
		{
			return 1;
		}

		public static int southBoundLatitudeMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetsouthBoundLatitudeMaxCount()
		{
			return 1;
		}

		public static int southBoundLatitudeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetsouthBoundLatitudeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "southBoundLatitude");
		}

		public int southBoundLatitudeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "southBoundLatitude");
			}
		}

		public bool HassouthBoundLatitude()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "southBoundLatitude");
		}

		public latitudeType NewsouthBoundLatitude()
		{
			return new latitudeType();
		}

		public latitudeType GetsouthBoundLatitudeAt(int index)
		{
			return new latitudeType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "southBoundLatitude", index)));
		}

		public XmlNode GetStartingsouthBoundLatitudeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "southBoundLatitude" );
		}

		public XmlNode GetAdvancedsouthBoundLatitudeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "southBoundLatitude", curNode );
		}

		public latitudeType GetsouthBoundLatitudeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new latitudeType( curNode.InnerText );
		}


		public latitudeType GetsouthBoundLatitude()
		{
			return GetsouthBoundLatitudeAt(0);
		}

		public latitudeType southBoundLatitude
		{
			get
			{
				return GetsouthBoundLatitudeAt(0);
			}
		}

		public void RemovesouthBoundLatitudeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "southBoundLatitude", index);
		}

		public void RemovesouthBoundLatitude()
		{
			RemovesouthBoundLatitudeAt(0);
		}

		public XmlNode AddsouthBoundLatitude(latitudeType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "southBoundLatitude", newValue.ToString());
			return null;
		}

		public void InsertsouthBoundLatitudeAt(latitudeType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "southBoundLatitude", index, newValue.ToString());
		}

		public void ReplacesouthBoundLatitudeAt(latitudeType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "southBoundLatitude", index, newValue.ToString());
		}
		#endregion // southBoundLatitude accessor methods

		#region southBoundLatitude collection
        public southBoundLatitudeCollection	MysouthBoundLatitudes = new southBoundLatitudeCollection( );

        public class southBoundLatitudeCollection: IEnumerable
        {
            EX_GeographicBoundingBoxType parent;
            public EX_GeographicBoundingBoxType Parent
			{
				set
				{
					parent = value;
				}
			}
			public southBoundLatitudeEnumerator GetEnumerator() 
			{
				return new southBoundLatitudeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class southBoundLatitudeEnumerator: IEnumerator 
        {
			int nIndex;
			EX_GeographicBoundingBoxType parent;
			public southBoundLatitudeEnumerator(EX_GeographicBoundingBoxType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.southBoundLatitudeCount );
			}
			public latitudeType  Current 
			{
				get 
				{
					return(parent.GetsouthBoundLatitudeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // southBoundLatitude collection

		#region northBoundLatitude Documentation
/*
		public static string GetnorthBoundLatitudeAnnoDocumentation()
		{
			return "";		
		}
 */ 
		public static string GetnorthBoundLatitudeDefault()
		{
			return "";		
		}
		#endregion

		#region northBoundLatitude accessor methods
		public static int GetnorthBoundLatitudeMinCount()
		{
			return 1;
		}

		public static int northBoundLatitudeMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetnorthBoundLatitudeMaxCount()
		{
			return 1;
		}

		public static int northBoundLatitudeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnorthBoundLatitudeCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "northBoundLatitude");
		}

		public int northBoundLatitudeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "northBoundLatitude");
			}
		}

		public bool HasnorthBoundLatitude()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "northBoundLatitude");
		}

		public latitudeType NewnorthBoundLatitude()
		{
			return new latitudeType();
		}

		public latitudeType GetnorthBoundLatitudeAt(int index)
		{
			return new latitudeType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "northBoundLatitude", index)));
		}

		public XmlNode GetStartingnorthBoundLatitudeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "northBoundLatitude" );
		}

		public XmlNode GetAdvancednorthBoundLatitudeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "northBoundLatitude", curNode );
		}

		public latitudeType GetnorthBoundLatitudeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new latitudeType( curNode.InnerText );
		}


		public latitudeType GetnorthBoundLatitude()
		{
			return GetnorthBoundLatitudeAt(0);
		}

		public latitudeType northBoundLatitude
		{
			get
			{
				return GetnorthBoundLatitudeAt(0);
			}
		}

		public void RemovenorthBoundLatitudeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "northBoundLatitude", index);
		}

		public void RemovenorthBoundLatitude()
		{
			RemovenorthBoundLatitudeAt(0);
		}

		public XmlNode AddnorthBoundLatitude(latitudeType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "northBoundLatitude", newValue.ToString());
			return null;
		}

		public void InsertnorthBoundLatitudeAt(latitudeType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "northBoundLatitude", index, newValue.ToString());
		}

		public void ReplacenorthBoundLatitudeAt(latitudeType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "northBoundLatitude", index, newValue.ToString());
		}
		#endregion // northBoundLatitude accessor methods

		#region northBoundLatitude collection
        public northBoundLatitudeCollection	MynorthBoundLatitudes = new northBoundLatitudeCollection( );

        public class northBoundLatitudeCollection: IEnumerable
        {
            EX_GeographicBoundingBoxType parent;
            public EX_GeographicBoundingBoxType Parent
			{
				set
				{
					parent = value;
				}
			}
			public northBoundLatitudeEnumerator GetEnumerator() 
			{
				return new northBoundLatitudeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class northBoundLatitudeEnumerator: IEnumerator 
        {
			int nIndex;
			EX_GeographicBoundingBoxType parent;
			public northBoundLatitudeEnumerator(EX_GeographicBoundingBoxType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.northBoundLatitudeCount );
			}
			public latitudeType  Current 
			{
				get 
				{
					return(parent.GetnorthBoundLatitudeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // northBoundLatitude collection

        private void SetCollectionParents()
        {
            MywestBoundLongitudes.Parent = this; 
            MyeastBoundLongitudes.Parent = this; 
            MysouthBoundLatitudes.Parent = this; 
            MynorthBoundLatitudes.Parent = this; 
	}
}
}
