//
// ContactInformationType.cs
//
// This file was generated by XMLSpy 2006r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace capabilities_1_3_0.wms
{
	public class ContactInformationType : Altova.Xml.Node
	{
		#region Forward constructors

		public ContactInformationType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public ContactInformationType(XmlNode node) : base(node) { SetCollectionParents(); }
		public ContactInformationType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public ContactInformationType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "ContactPersonPrimary" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "ContactPersonPrimary", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new ContactPersonPrimaryType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "ContactPosition" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "ContactPosition", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "ContactAddress" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "ContactAddress", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new ContactAddressType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "ContactVoiceTelephone" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "ContactVoiceTelephone", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "ContactFacsimileTelephone" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "ContactFacsimileTelephone", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "ContactElectronicMailAddress" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "ContactElectronicMailAddress", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}
		}



		#region ContactPersonPrimary accessor methods
		public static int GetContactPersonPrimaryMinCount()
		{
			return 0;
		}

		public static int ContactPersonPrimaryMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetContactPersonPrimaryMaxCount()
		{
			return 1;
		}

		public static int ContactPersonPrimaryMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetContactPersonPrimaryCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "ContactPersonPrimary");
		}

		public int ContactPersonPrimaryCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "ContactPersonPrimary");
			}
		}

		public bool HasContactPersonPrimary()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "ContactPersonPrimary");
		}

		public ContactPersonPrimaryType NewContactPersonPrimary()
		{
			return new ContactPersonPrimaryType(domNode.OwnerDocument.CreateElement("ContactPersonPrimary", "http://www.opengis.net/wms"));
		}

		public ContactPersonPrimaryType GetContactPersonPrimaryAt(int index)
		{
			return new ContactPersonPrimaryType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactPersonPrimary", index));
		}

		public XmlNode GetStartingContactPersonPrimaryCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "ContactPersonPrimary" );
		}

		public XmlNode GetAdvancedContactPersonPrimaryCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "ContactPersonPrimary", curNode );
		}

		public ContactPersonPrimaryType GetContactPersonPrimaryValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ContactPersonPrimaryType( curNode );
		}


		public ContactPersonPrimaryType GetContactPersonPrimary()
		{
			return GetContactPersonPrimaryAt(0);
		}

		public ContactPersonPrimaryType ContactPersonPrimary
		{
			get
			{
				return GetContactPersonPrimaryAt(0);
			}
		}

		public void RemoveContactPersonPrimaryAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactPersonPrimary", index);
		}

		public void RemoveContactPersonPrimary()
		{
			while (HasContactPersonPrimary())
				RemoveContactPersonPrimaryAt(0);
		}

		public void AddContactPersonPrimary(ContactPersonPrimaryType newValue)
		{
			AppendDomElement("http://www.opengis.net/wms", "ContactPersonPrimary", newValue);
		}

		public void InsertContactPersonPrimaryAt(ContactPersonPrimaryType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "ContactPersonPrimary", index, newValue);
		}

		public void ReplaceContactPersonPrimaryAt(ContactPersonPrimaryType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "ContactPersonPrimary", index, newValue);
		}
		#endregion // ContactPersonPrimary accessor methods

		#region ContactPersonPrimary collection
        public ContactPersonPrimaryCollection	MyContactPersonPrimarys = new ContactPersonPrimaryCollection( );

        public class ContactPersonPrimaryCollection: IEnumerable
        {
            ContactInformationType parent;
            public ContactInformationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ContactPersonPrimaryEnumerator GetEnumerator() 
			{
				return new ContactPersonPrimaryEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ContactPersonPrimaryEnumerator: IEnumerator 
        {
			int nIndex;
			ContactInformationType parent;
			public ContactPersonPrimaryEnumerator(ContactInformationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ContactPersonPrimaryCount );
			}
			public ContactPersonPrimaryType  Current 
			{
				get 
				{
					return(parent.GetContactPersonPrimaryAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ContactPersonPrimary collection

		#region ContactPosition accessor methods
		public static int GetContactPositionMinCount()
		{
			return 0;
		}

		public static int ContactPositionMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetContactPositionMaxCount()
		{
			return 1;
		}

		public static int ContactPositionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetContactPositionCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "ContactPosition");
		}

		public int ContactPositionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "ContactPosition");
			}
		}

		public bool HasContactPosition()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "ContactPosition");
		}

		public SchemaString NewContactPosition()
		{
			return new SchemaString();
		}

		public SchemaString GetContactPositionAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactPosition", index)));
		}

		public XmlNode GetStartingContactPositionCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "ContactPosition" );
		}

		public XmlNode GetAdvancedContactPositionCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "ContactPosition", curNode );
		}

		public SchemaString GetContactPositionValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetContactPosition()
		{
			return GetContactPositionAt(0);
		}

		public SchemaString ContactPosition
		{
			get
			{
				return GetContactPositionAt(0);
			}
		}

		public void RemoveContactPositionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactPosition", index);
		}

		public void RemoveContactPosition()
		{
			while (HasContactPosition())
				RemoveContactPositionAt(0);
		}

		public void AddContactPosition(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "ContactPosition", newValue.ToString());
		}

		public void InsertContactPositionAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactPosition", index, newValue.ToString());
		}

		public void ReplaceContactPositionAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactPosition", index, newValue.ToString());
		}
		#endregion // ContactPosition accessor methods

		#region ContactPosition collection
        public ContactPositionCollection	MyContactPositions = new ContactPositionCollection( );

        public class ContactPositionCollection: IEnumerable
        {
            ContactInformationType parent;
            public ContactInformationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ContactPositionEnumerator GetEnumerator() 
			{
				return new ContactPositionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ContactPositionEnumerator: IEnumerator 
        {
			int nIndex;
			ContactInformationType parent;
			public ContactPositionEnumerator(ContactInformationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ContactPositionCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetContactPositionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ContactPosition collection

		#region ContactAddress accessor methods
		public static int GetContactAddressMinCount()
		{
			return 0;
		}

		public static int ContactAddressMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetContactAddressMaxCount()
		{
			return 1;
		}

		public static int ContactAddressMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetContactAddressCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "ContactAddress");
		}

		public int ContactAddressCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "ContactAddress");
			}
		}

		public bool HasContactAddress()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "ContactAddress");
		}

		public ContactAddressType NewContactAddress()
		{
			return new ContactAddressType(domNode.OwnerDocument.CreateElement("ContactAddress", "http://www.opengis.net/wms"));
		}

		public ContactAddressType GetContactAddressAt(int index)
		{
			return new ContactAddressType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactAddress", index));
		}

		public XmlNode GetStartingContactAddressCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "ContactAddress" );
		}

		public XmlNode GetAdvancedContactAddressCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "ContactAddress", curNode );
		}

		public ContactAddressType GetContactAddressValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ContactAddressType( curNode );
		}


		public ContactAddressType GetContactAddress()
		{
			return GetContactAddressAt(0);
		}

		public ContactAddressType ContactAddress
		{
			get
			{
				return GetContactAddressAt(0);
			}
		}

		public void RemoveContactAddressAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactAddress", index);
		}

		public void RemoveContactAddress()
		{
			while (HasContactAddress())
				RemoveContactAddressAt(0);
		}

		public void AddContactAddress(ContactAddressType newValue)
		{
			AppendDomElement("http://www.opengis.net/wms", "ContactAddress", newValue);
		}

		public void InsertContactAddressAt(ContactAddressType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "ContactAddress", index, newValue);
		}

		public void ReplaceContactAddressAt(ContactAddressType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "ContactAddress", index, newValue);
		}
		#endregion // ContactAddress accessor methods

		#region ContactAddress collection
        public ContactAddressCollection	MyContactAddresss = new ContactAddressCollection( );

        public class ContactAddressCollection: IEnumerable
        {
            ContactInformationType parent;
            public ContactInformationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ContactAddressEnumerator GetEnumerator() 
			{
				return new ContactAddressEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ContactAddressEnumerator: IEnumerator 
        {
			int nIndex;
			ContactInformationType parent;
			public ContactAddressEnumerator(ContactInformationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ContactAddressCount );
			}
			public ContactAddressType  Current 
			{
				get 
				{
					return(parent.GetContactAddressAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ContactAddress collection

		#region ContactVoiceTelephone accessor methods
		public static int GetContactVoiceTelephoneMinCount()
		{
			return 0;
		}

		public static int ContactVoiceTelephoneMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetContactVoiceTelephoneMaxCount()
		{
			return 1;
		}

		public static int ContactVoiceTelephoneMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetContactVoiceTelephoneCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "ContactVoiceTelephone");
		}

		public int ContactVoiceTelephoneCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "ContactVoiceTelephone");
			}
		}

		public bool HasContactVoiceTelephone()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "ContactVoiceTelephone");
		}

		public SchemaString NewContactVoiceTelephone()
		{
			return new SchemaString();
		}

		public SchemaString GetContactVoiceTelephoneAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactVoiceTelephone", index)));
		}

		public XmlNode GetStartingContactVoiceTelephoneCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "ContactVoiceTelephone" );
		}

		public XmlNode GetAdvancedContactVoiceTelephoneCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "ContactVoiceTelephone", curNode );
		}

		public SchemaString GetContactVoiceTelephoneValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetContactVoiceTelephone()
		{
			return GetContactVoiceTelephoneAt(0);
		}

		public SchemaString ContactVoiceTelephone
		{
			get
			{
				return GetContactVoiceTelephoneAt(0);
			}
		}

		public void RemoveContactVoiceTelephoneAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactVoiceTelephone", index);
		}

		public void RemoveContactVoiceTelephone()
		{
			while (HasContactVoiceTelephone())
				RemoveContactVoiceTelephoneAt(0);
		}

		public void AddContactVoiceTelephone(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "ContactVoiceTelephone", newValue.ToString());
		}

		public void InsertContactVoiceTelephoneAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactVoiceTelephone", index, newValue.ToString());
		}

		public void ReplaceContactVoiceTelephoneAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactVoiceTelephone", index, newValue.ToString());
		}
		#endregion // ContactVoiceTelephone accessor methods

		#region ContactVoiceTelephone collection
        public ContactVoiceTelephoneCollection	MyContactVoiceTelephones = new ContactVoiceTelephoneCollection( );

        public class ContactVoiceTelephoneCollection: IEnumerable
        {
            ContactInformationType parent;
            public ContactInformationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ContactVoiceTelephoneEnumerator GetEnumerator() 
			{
				return new ContactVoiceTelephoneEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ContactVoiceTelephoneEnumerator: IEnumerator 
        {
			int nIndex;
			ContactInformationType parent;
			public ContactVoiceTelephoneEnumerator(ContactInformationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ContactVoiceTelephoneCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetContactVoiceTelephoneAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ContactVoiceTelephone collection

		#region ContactFacsimileTelephone accessor methods
		public static int GetContactFacsimileTelephoneMinCount()
		{
			return 0;
		}

		public static int ContactFacsimileTelephoneMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetContactFacsimileTelephoneMaxCount()
		{
			return 1;
		}

		public static int ContactFacsimileTelephoneMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetContactFacsimileTelephoneCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "ContactFacsimileTelephone");
		}

		public int ContactFacsimileTelephoneCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "ContactFacsimileTelephone");
			}
		}

		public bool HasContactFacsimileTelephone()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "ContactFacsimileTelephone");
		}

		public SchemaString NewContactFacsimileTelephone()
		{
			return new SchemaString();
		}

		public SchemaString GetContactFacsimileTelephoneAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactFacsimileTelephone", index)));
		}

		public XmlNode GetStartingContactFacsimileTelephoneCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "ContactFacsimileTelephone" );
		}

		public XmlNode GetAdvancedContactFacsimileTelephoneCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "ContactFacsimileTelephone", curNode );
		}

		public SchemaString GetContactFacsimileTelephoneValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetContactFacsimileTelephone()
		{
			return GetContactFacsimileTelephoneAt(0);
		}

		public SchemaString ContactFacsimileTelephone
		{
			get
			{
				return GetContactFacsimileTelephoneAt(0);
			}
		}

		public void RemoveContactFacsimileTelephoneAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactFacsimileTelephone", index);
		}

		public void RemoveContactFacsimileTelephone()
		{
			while (HasContactFacsimileTelephone())
				RemoveContactFacsimileTelephoneAt(0);
		}

		public void AddContactFacsimileTelephone(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "ContactFacsimileTelephone", newValue.ToString());
		}

		public void InsertContactFacsimileTelephoneAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactFacsimileTelephone", index, newValue.ToString());
		}

		public void ReplaceContactFacsimileTelephoneAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactFacsimileTelephone", index, newValue.ToString());
		}
		#endregion // ContactFacsimileTelephone accessor methods

		#region ContactFacsimileTelephone collection
        public ContactFacsimileTelephoneCollection	MyContactFacsimileTelephones = new ContactFacsimileTelephoneCollection( );

        public class ContactFacsimileTelephoneCollection: IEnumerable
        {
            ContactInformationType parent;
            public ContactInformationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ContactFacsimileTelephoneEnumerator GetEnumerator() 
			{
				return new ContactFacsimileTelephoneEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ContactFacsimileTelephoneEnumerator: IEnumerator 
        {
			int nIndex;
			ContactInformationType parent;
			public ContactFacsimileTelephoneEnumerator(ContactInformationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ContactFacsimileTelephoneCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetContactFacsimileTelephoneAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ContactFacsimileTelephone collection

		#region ContactElectronicMailAddress accessor methods
		public static int GetContactElectronicMailAddressMinCount()
		{
			return 0;
		}

		public static int ContactElectronicMailAddressMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetContactElectronicMailAddressMaxCount()
		{
			return 1;
		}

		public static int ContactElectronicMailAddressMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetContactElectronicMailAddressCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "ContactElectronicMailAddress");
		}

		public int ContactElectronicMailAddressCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "ContactElectronicMailAddress");
			}
		}

		public bool HasContactElectronicMailAddress()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "ContactElectronicMailAddress");
		}

		public SchemaString NewContactElectronicMailAddress()
		{
			return new SchemaString();
		}

		public SchemaString GetContactElectronicMailAddressAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactElectronicMailAddress", index)));
		}

		public XmlNode GetStartingContactElectronicMailAddressCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "ContactElectronicMailAddress" );
		}

		public XmlNode GetAdvancedContactElectronicMailAddressCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "ContactElectronicMailAddress", curNode );
		}

		public SchemaString GetContactElectronicMailAddressValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetContactElectronicMailAddress()
		{
			return GetContactElectronicMailAddressAt(0);
		}

		public SchemaString ContactElectronicMailAddress
		{
			get
			{
				return GetContactElectronicMailAddressAt(0);
			}
		}

		public void RemoveContactElectronicMailAddressAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactElectronicMailAddress", index);
		}

		public void RemoveContactElectronicMailAddress()
		{
			while (HasContactElectronicMailAddress())
				RemoveContactElectronicMailAddressAt(0);
		}

		public void AddContactElectronicMailAddress(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "ContactElectronicMailAddress", newValue.ToString());
		}

		public void InsertContactElectronicMailAddressAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactElectronicMailAddress", index, newValue.ToString());
		}

		public void ReplaceContactElectronicMailAddressAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactElectronicMailAddress", index, newValue.ToString());
		}
		#endregion // ContactElectronicMailAddress accessor methods

		#region ContactElectronicMailAddress collection
        public ContactElectronicMailAddressCollection	MyContactElectronicMailAddresss = new ContactElectronicMailAddressCollection( );

        public class ContactElectronicMailAddressCollection: IEnumerable
        {
            ContactInformationType parent;
            public ContactInformationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ContactElectronicMailAddressEnumerator GetEnumerator() 
			{
				return new ContactElectronicMailAddressEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ContactElectronicMailAddressEnumerator: IEnumerator 
        {
			int nIndex;
			ContactInformationType parent;
			public ContactElectronicMailAddressEnumerator(ContactInformationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ContactElectronicMailAddressCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetContactElectronicMailAddressAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ContactElectronicMailAddress collection

        private void SetCollectionParents()
        {
            MyContactPersonPrimarys.Parent = this; 
            MyContactPositions.Parent = this; 
            MyContactAddresss.Parent = this; 
            MyContactVoiceTelephones.Parent = this; 
            MyContactFacsimileTelephones.Parent = this; 
            MyContactElectronicMailAddresss.Parent = this; 
	}
}
}
