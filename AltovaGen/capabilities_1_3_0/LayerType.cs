//
// LayerType.cs
//
// This file was generated by XMLSpy 2007r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace capabilities_1_3_0.wms
{
	public class LayerType : Altova.Xml.Node
	{
		#region Documentation
	/*
		public static string GetAnnoDocumentation() { return ""; }
	 */ 
		#endregion

		#region Forward constructors

		public LayerType() : base() { SetCollectionParents(); }

		public LayerType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public LayerType(XmlNode node) : base(node) { SetCollectionParents(); }
		public LayerType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public LayerType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "queryable" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "queryable", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "cascaded" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "cascaded", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "opaque" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "opaque", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "noSubsets" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "noSubsets", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "fixedWidth" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "fixedWidth", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "fixedHeight" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "fixedHeight", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "Name" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "Name", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "Title" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "Title", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "Abstract" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "Abstract", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "KeywordList" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "KeywordList", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new KeywordListType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "CRS" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "CRS", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "EX_GeographicBoundingBox" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "EX_GeographicBoundingBox", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new EX_GeographicBoundingBoxType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "BoundingBox" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "BoundingBox", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new BoundingBoxType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "Dimension" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "Dimension", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new DimensionType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "Attribution" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "Attribution", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new AttributionType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "AuthorityURL" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "AuthorityURL", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new AuthorityURLType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "Identifier" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "Identifier", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new IdentifierType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "MetadataURL" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "MetadataURL", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new MetadataURLType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "DataURL" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "DataURL", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new DataURLType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "FeatureListURL" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "FeatureListURL", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new FeatureListURLType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "Style" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "Style", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new StyleType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "MinScaleDenominator" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "MinScaleDenominator", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "MaxScaleDenominator" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "MaxScaleDenominator", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "Layer" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "Layer", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new LayerType(DOMNode).AdjustPrefix();
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "wms:Layer");
		}


		#region queryable Documentation
/*
		public static string GetqueryableAnnoDocumentation()
		{
			return "";		
		}
 */ 
		public static string GetqueryableDefault()
		{
			return "0";		
		}
		#endregion

		#region queryable accessor methods
		public static int GetqueryableMinCount()
		{
			return 0;
		}

		public static int queryableMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetqueryableMaxCount()
		{
			return 1;
		}

		public static int queryableMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetqueryableCount()
		{
			return DomChildCount(NodeType.Attribute, "", "queryable");
		}

		public int queryableCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "queryable");
			}
		}

		public bool Hasqueryable()
		{
			return HasDomChild(NodeType.Attribute, "", "queryable");
		}

		public SchemaBoolean Newqueryable()
		{
			return new SchemaBoolean();
		}

		public SchemaBoolean GetqueryableAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "queryable", index)));
		}

		public XmlNode GetStartingqueryableCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "queryable" );
		}

		public XmlNode GetAdvancedqueryableCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "queryable", curNode );
		}

		public SchemaBoolean GetqueryableValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaBoolean( curNode.Value );
		}


		public SchemaBoolean Getqueryable()
		{
			return GetqueryableAt(0);
		}

		public SchemaBoolean queryable
		{
			get
			{
				return GetqueryableAt(0);
			}
		}

		public void RemovequeryableAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "queryable", index);
		}

		public void Removequeryable()
		{
			RemovequeryableAt(0);
		}

		public XmlNode Addqueryable(SchemaBoolean newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "queryable", newValue.ToString());
			return null;
		}

		public void InsertqueryableAt(SchemaBoolean newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "queryable", index, newValue.ToString());
		}

		public void ReplacequeryableAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "queryable", index, newValue.ToString());
		}
		#endregion // queryable accessor methods

		#region queryable collection
        public queryableCollection	Myqueryables = new queryableCollection( );

        public class queryableCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public queryableEnumerator GetEnumerator() 
			{
				return new queryableEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class queryableEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public queryableEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.queryableCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetqueryableAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // queryable collection

		#region cascaded Documentation
/*
		public static string GetcascadedAnnoDocumentation()
		{
			return "";		
		}
 */ 
		public static string GetcascadedDefault()
		{
			return "";		
		}
		#endregion

		#region cascaded accessor methods
		public static int GetcascadedMinCount()
		{
			return 0;
		}

		public static int cascadedMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetcascadedMaxCount()
		{
			return 1;
		}

		public static int cascadedMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetcascadedCount()
		{
			return DomChildCount(NodeType.Attribute, "", "cascaded");
		}

		public int cascadedCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "cascaded");
			}
		}

		public bool Hascascaded()
		{
			return HasDomChild(NodeType.Attribute, "", "cascaded");
		}

		public SchemaLong Newcascaded()
		{
			return new SchemaLong();
		}

		public SchemaLong GetcascadedAt(int index)
		{
			return new SchemaLong(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "cascaded", index)));
		}

		public XmlNode GetStartingcascadedCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "cascaded" );
		}

		public XmlNode GetAdvancedcascadedCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "cascaded", curNode );
		}

		public SchemaLong GetcascadedValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaLong( curNode.Value );
		}


		public SchemaLong Getcascaded()
		{
			return GetcascadedAt(0);
		}

		public SchemaLong cascaded
		{
			get
			{
				return GetcascadedAt(0);
			}
		}

		public void RemovecascadedAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "cascaded", index);
		}

		public void Removecascaded()
		{
			RemovecascadedAt(0);
		}

		public XmlNode Addcascaded(SchemaLong newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "cascaded", newValue.ToString());
			return null;
		}

		public void InsertcascadedAt(SchemaLong newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "cascaded", index, newValue.ToString());
		}

		public void ReplacecascadedAt(SchemaLong newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "cascaded", index, newValue.ToString());
		}
		#endregion // cascaded accessor methods

		#region cascaded collection
        public cascadedCollection	Mycascadeds = new cascadedCollection( );

        public class cascadedCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public cascadedEnumerator GetEnumerator() 
			{
				return new cascadedEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class cascadedEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public cascadedEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.cascadedCount );
			}
			public SchemaLong  Current 
			{
				get 
				{
					return(parent.GetcascadedAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // cascaded collection

		#region opaque Documentation
/*
		public static string GetopaqueAnnoDocumentation()
		{
			return "";		
		}
 */ 
		public static string GetopaqueDefault()
		{
			return "0";		
		}
		#endregion

		#region opaque accessor methods
		public static int GetopaqueMinCount()
		{
			return 0;
		}

		public static int opaqueMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetopaqueMaxCount()
		{
			return 1;
		}

		public static int opaqueMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetopaqueCount()
		{
			return DomChildCount(NodeType.Attribute, "", "opaque");
		}

		public int opaqueCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "opaque");
			}
		}

		public bool Hasopaque()
		{
			return HasDomChild(NodeType.Attribute, "", "opaque");
		}

		public SchemaBoolean Newopaque()
		{
			return new SchemaBoolean();
		}

		public SchemaBoolean GetopaqueAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "opaque", index)));
		}

		public XmlNode GetStartingopaqueCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "opaque" );
		}

		public XmlNode GetAdvancedopaqueCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "opaque", curNode );
		}

		public SchemaBoolean GetopaqueValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaBoolean( curNode.Value );
		}


		public SchemaBoolean Getopaque()
		{
			return GetopaqueAt(0);
		}

		public SchemaBoolean opaque
		{
			get
			{
				return GetopaqueAt(0);
			}
		}

		public void RemoveopaqueAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "opaque", index);
		}

		public void Removeopaque()
		{
			RemoveopaqueAt(0);
		}

		public XmlNode Addopaque(SchemaBoolean newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "opaque", newValue.ToString());
			return null;
		}

		public void InsertopaqueAt(SchemaBoolean newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "opaque", index, newValue.ToString());
		}

		public void ReplaceopaqueAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "opaque", index, newValue.ToString());
		}
		#endregion // opaque accessor methods

		#region opaque collection
        public opaqueCollection	Myopaques = new opaqueCollection( );

        public class opaqueCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public opaqueEnumerator GetEnumerator() 
			{
				return new opaqueEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class opaqueEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public opaqueEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.opaqueCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetopaqueAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // opaque collection

		#region noSubsets Documentation
/*
		public static string GetnoSubsetsAnnoDocumentation()
		{
			return "";		
		}
 */ 
		public static string GetnoSubsetsDefault()
		{
			return "0";		
		}
		#endregion

		#region noSubsets accessor methods
		public static int GetnoSubsetsMinCount()
		{
			return 0;
		}

		public static int noSubsetsMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetnoSubsetsMaxCount()
		{
			return 1;
		}

		public static int noSubsetsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnoSubsetsCount()
		{
			return DomChildCount(NodeType.Attribute, "", "noSubsets");
		}

		public int noSubsetsCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "noSubsets");
			}
		}

		public bool HasnoSubsets()
		{
			return HasDomChild(NodeType.Attribute, "", "noSubsets");
		}

		public SchemaBoolean NewnoSubsets()
		{
			return new SchemaBoolean();
		}

		public SchemaBoolean GetnoSubsetsAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "noSubsets", index)));
		}

		public XmlNode GetStartingnoSubsetsCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "noSubsets" );
		}

		public XmlNode GetAdvancednoSubsetsCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "noSubsets", curNode );
		}

		public SchemaBoolean GetnoSubsetsValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaBoolean( curNode.Value );
		}


		public SchemaBoolean GetnoSubsets()
		{
			return GetnoSubsetsAt(0);
		}

		public SchemaBoolean noSubsets
		{
			get
			{
				return GetnoSubsetsAt(0);
			}
		}

		public void RemovenoSubsetsAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "noSubsets", index);
		}

		public void RemovenoSubsets()
		{
			RemovenoSubsetsAt(0);
		}

		public XmlNode AddnoSubsets(SchemaBoolean newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "noSubsets", newValue.ToString());
			return null;
		}

		public void InsertnoSubsetsAt(SchemaBoolean newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "noSubsets", index, newValue.ToString());
		}

		public void ReplacenoSubsetsAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "noSubsets", index, newValue.ToString());
		}
		#endregion // noSubsets accessor methods

		#region noSubsets collection
        public noSubsetsCollection	MynoSubsetss = new noSubsetsCollection( );

        public class noSubsetsCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public noSubsetsEnumerator GetEnumerator() 
			{
				return new noSubsetsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class noSubsetsEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public noSubsetsEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.noSubsetsCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetnoSubsetsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // noSubsets collection

		#region fixedWidth Documentation
/*
		public static string GetfixedWidthAnnoDocumentation()
		{
			return "";		
		}
 */ 
		public static string GetfixedWidthDefault()
		{
			return "";		
		}
		#endregion

		#region fixedWidth accessor methods
		public static int GetfixedWidthMinCount()
		{
			return 0;
		}

		public static int fixedWidthMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetfixedWidthMaxCount()
		{
			return 1;
		}

		public static int fixedWidthMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetfixedWidthCount()
		{
			return DomChildCount(NodeType.Attribute, "", "fixedWidth");
		}

		public int fixedWidthCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "fixedWidth");
			}
		}

		public bool HasfixedWidth()
		{
			return HasDomChild(NodeType.Attribute, "", "fixedWidth");
		}

		public SchemaLong NewfixedWidth()
		{
			return new SchemaLong();
		}

		public SchemaLong GetfixedWidthAt(int index)
		{
			return new SchemaLong(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "fixedWidth", index)));
		}

		public XmlNode GetStartingfixedWidthCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "fixedWidth" );
		}

		public XmlNode GetAdvancedfixedWidthCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "fixedWidth", curNode );
		}

		public SchemaLong GetfixedWidthValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaLong( curNode.Value );
		}


		public SchemaLong GetfixedWidth()
		{
			return GetfixedWidthAt(0);
		}

		public SchemaLong fixedWidth
		{
			get
			{
				return GetfixedWidthAt(0);
			}
		}

		public void RemovefixedWidthAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "fixedWidth", index);
		}

		public void RemovefixedWidth()
		{
			RemovefixedWidthAt(0);
		}

		public XmlNode AddfixedWidth(SchemaLong newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "fixedWidth", newValue.ToString());
			return null;
		}

		public void InsertfixedWidthAt(SchemaLong newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "fixedWidth", index, newValue.ToString());
		}

		public void ReplacefixedWidthAt(SchemaLong newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "fixedWidth", index, newValue.ToString());
		}
		#endregion // fixedWidth accessor methods

		#region fixedWidth collection
        public fixedWidthCollection	MyfixedWidths = new fixedWidthCollection( );

        public class fixedWidthCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public fixedWidthEnumerator GetEnumerator() 
			{
				return new fixedWidthEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class fixedWidthEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public fixedWidthEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.fixedWidthCount );
			}
			public SchemaLong  Current 
			{
				get 
				{
					return(parent.GetfixedWidthAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // fixedWidth collection

		#region fixedHeight Documentation
/*
		public static string GetfixedHeightAnnoDocumentation()
		{
			return "";		
		}
 */ 
		public static string GetfixedHeightDefault()
		{
			return "";		
		}
		#endregion

		#region fixedHeight accessor methods
		public static int GetfixedHeightMinCount()
		{
			return 0;
		}

		public static int fixedHeightMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetfixedHeightMaxCount()
		{
			return 1;
		}

		public static int fixedHeightMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetfixedHeightCount()
		{
			return DomChildCount(NodeType.Attribute, "", "fixedHeight");
		}

		public int fixedHeightCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "fixedHeight");
			}
		}

		public bool HasfixedHeight()
		{
			return HasDomChild(NodeType.Attribute, "", "fixedHeight");
		}

		public SchemaLong NewfixedHeight()
		{
			return new SchemaLong();
		}

		public SchemaLong GetfixedHeightAt(int index)
		{
			return new SchemaLong(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "fixedHeight", index)));
		}

		public XmlNode GetStartingfixedHeightCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "fixedHeight" );
		}

		public XmlNode GetAdvancedfixedHeightCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "fixedHeight", curNode );
		}

		public SchemaLong GetfixedHeightValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaLong( curNode.Value );
		}


		public SchemaLong GetfixedHeight()
		{
			return GetfixedHeightAt(0);
		}

		public SchemaLong fixedHeight
		{
			get
			{
				return GetfixedHeightAt(0);
			}
		}

		public void RemovefixedHeightAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "fixedHeight", index);
		}

		public void RemovefixedHeight()
		{
			RemovefixedHeightAt(0);
		}

		public XmlNode AddfixedHeight(SchemaLong newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "fixedHeight", newValue.ToString());
			return null;
		}

		public void InsertfixedHeightAt(SchemaLong newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "fixedHeight", index, newValue.ToString());
		}

		public void ReplacefixedHeightAt(SchemaLong newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "fixedHeight", index, newValue.ToString());
		}
		#endregion // fixedHeight accessor methods

		#region fixedHeight collection
        public fixedHeightCollection	MyfixedHeights = new fixedHeightCollection( );

        public class fixedHeightCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public fixedHeightEnumerator GetEnumerator() 
			{
				return new fixedHeightEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class fixedHeightEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public fixedHeightEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.fixedHeightCount );
			}
			public SchemaLong  Current 
			{
				get 
				{
					return(parent.GetfixedHeightAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // fixedHeight collection

		#region Name Documentation
/*
		public static string GetNameAnnoDocumentation()
		{
			return "
        The Name is typically for machine-to-machine communication.
      ";		
		}
 */ 
		public static string GetNameDefault()
		{
			return "";		
		}
		#endregion

		#region Name accessor methods
		public static int GetNameMinCount()
		{
			return 0;
		}

		public static int NameMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetNameMaxCount()
		{
			return 1;
		}

		public static int NameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Name");
		}

		public int NameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Name");
			}
		}

		public bool HasName()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "Name");
		}

		public SchemaString NewName()
		{
			return new SchemaString();
		}

		public SchemaString GetNameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Name", index)));
		}

		public XmlNode GetStartingNameCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "Name" );
		}

		public XmlNode GetAdvancedNameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "Name", curNode );
		}

		public SchemaString GetNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetName()
		{
			return GetNameAt(0);
		}

		public SchemaString Name
		{
			get
			{
				return GetNameAt(0);
			}
		}

		public void RemoveNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Name", index);
		}

		public void RemoveName()
		{
			RemoveNameAt(0);
		}

		public XmlNode AddName(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "Name", newValue.ToString());
			return null;
		}

		public void InsertNameAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Name", index, newValue.ToString());
		}

		public void ReplaceNameAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Name", index, newValue.ToString());
		}
		#endregion // Name accessor methods

		#region Name collection
        public NameCollection	MyNames = new NameCollection( );

        public class NameCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public NameEnumerator GetEnumerator() 
			{
				return new NameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NameEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public NameEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NameCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Name collection

		#region Title Documentation
/*
		public static string GetTitleAnnoDocumentation()
		{
			return "
        The Title is for informative display to a human.
      ";		
		}
 */ 
		public static string GetTitleDefault()
		{
			return "";		
		}
		#endregion

		#region Title accessor methods
		public static int GetTitleMinCount()
		{
			return 1;
		}

		public static int TitleMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetTitleMaxCount()
		{
			return 1;
		}

		public static int TitleMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTitleCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Title");
		}

		public int TitleCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Title");
			}
		}

		public bool HasTitle()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "Title");
		}

		public SchemaString NewTitle()
		{
			return new SchemaString();
		}

		public SchemaString GetTitleAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Title", index)));
		}

		public XmlNode GetStartingTitleCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "Title" );
		}

		public XmlNode GetAdvancedTitleCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "Title", curNode );
		}

		public SchemaString GetTitleValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetTitle()
		{
			return GetTitleAt(0);
		}

		public SchemaString Title
		{
			get
			{
				return GetTitleAt(0);
			}
		}

		public void RemoveTitleAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Title", index);
		}

		public void RemoveTitle()
		{
			RemoveTitleAt(0);
		}

		public XmlNode AddTitle(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "Title", newValue.ToString());
			return null;
		}

		public void InsertTitleAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Title", index, newValue.ToString());
		}

		public void ReplaceTitleAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Title", index, newValue.ToString());
		}
		#endregion // Title accessor methods

		#region Title collection
        public TitleCollection	MyTitles = new TitleCollection( );

        public class TitleCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public TitleEnumerator GetEnumerator() 
			{
				return new TitleEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class TitleEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public TitleEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.TitleCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetTitleAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Title collection

		#region Abstract2 Documentation
/*
		public static string GetAbstract2AnnoDocumentation()
		{
			return "
        The abstract is a longer narrative description of an object.
      ";		
		}
 */ 
		public static string GetAbstract2Default()
		{
			return "";		
		}
		#endregion

		#region Abstract2 accessor methods
		public static int GetAbstract2MinCount()
		{
			return 0;
		}

		public static int Abstract2MinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetAbstract2MaxCount()
		{
			return 1;
		}

		public static int Abstract2MaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetAbstract2Count()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Abstract");
		}

		public int Abstract2Count
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Abstract");
			}
		}

		public bool HasAbstract2()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "Abstract");
		}

		public SchemaString NewAbstract2()
		{
			return new SchemaString();
		}

		public SchemaString GetAbstract2At(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Abstract", index)));
		}

		public XmlNode GetStartingAbstract2Cursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "Abstract" );
		}

		public XmlNode GetAdvancedAbstract2Cursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "Abstract", curNode );
		}

		public SchemaString GetAbstract2ValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetAbstract2()
		{
			return GetAbstract2At(0);
		}

		public SchemaString Abstract2
		{
			get
			{
				return GetAbstract2At(0);
			}
		}

		public void RemoveAbstract2At(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Abstract", index);
		}

		public void RemoveAbstract2()
		{
			RemoveAbstract2At(0);
		}

		public XmlNode AddAbstract2(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "Abstract", newValue.ToString());
			return null;
		}

		public void InsertAbstract2At(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Abstract", index, newValue.ToString());
		}

		public void ReplaceAbstract2At(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Abstract", index, newValue.ToString());
		}
		#endregion // Abstract2 accessor methods

		#region Abstract2 collection
        public Abstract2Collection	MyAbstract2s = new Abstract2Collection( );

        public class Abstract2Collection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public Abstract2Enumerator GetEnumerator() 
			{
				return new Abstract2Enumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class Abstract2Enumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public Abstract2Enumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.Abstract2Count );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetAbstract2At(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Abstract2 collection

		#region KeywordList Documentation
/*
		public static string GetKeywordListAnnoDocumentation()
		{
			return "
        List of keywords or keyword phrases to help catalog searching.
      ";		
		}
 */ 
		public static string GetKeywordListDefault()
		{
			return "";		
		}
		#endregion

		#region KeywordList accessor methods
		public static int GetKeywordListMinCount()
		{
			return 0;
		}

		public static int KeywordListMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetKeywordListMaxCount()
		{
			return 1;
		}

		public static int KeywordListMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetKeywordListCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "KeywordList");
		}

		public int KeywordListCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "KeywordList");
			}
		}

		public bool HasKeywordList()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "KeywordList");
		}

		public KeywordListType NewKeywordList()
		{
			return new KeywordListType(domNode.OwnerDocument.CreateElement("KeywordList", "http://www.opengis.net/wms"));
		}

		public KeywordListType GetKeywordListAt(int index)
		{
			return new KeywordListType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "KeywordList", index));
		}

		public XmlNode GetStartingKeywordListCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "KeywordList" );
		}

		public XmlNode GetAdvancedKeywordListCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "KeywordList", curNode );
		}

		public KeywordListType GetKeywordListValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new KeywordListType( curNode );
		}


		public KeywordListType GetKeywordList()
		{
			return GetKeywordListAt(0);
		}

		public KeywordListType KeywordList
		{
			get
			{
				return GetKeywordListAt(0);
			}
		}

		public void RemoveKeywordListAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "KeywordList", index);
		}

		public void RemoveKeywordList()
		{
			RemoveKeywordListAt(0);
		}

		public XmlNode AddKeywordList(KeywordListType newValue)
		{
			return AppendDomElement("http://www.opengis.net/wms", "KeywordList", newValue);
		}

		public void InsertKeywordListAt(KeywordListType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "KeywordList", index, newValue);
		}

		public void ReplaceKeywordListAt(KeywordListType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "KeywordList", index, newValue);
		}
		#endregion // KeywordList accessor methods

		#region KeywordList collection
        public KeywordListCollection	MyKeywordLists = new KeywordListCollection( );

        public class KeywordListCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public KeywordListEnumerator GetEnumerator() 
			{
				return new KeywordListEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class KeywordListEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public KeywordListEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.KeywordListCount );
			}
			public KeywordListType  Current 
			{
				get 
				{
					return(parent.GetKeywordListAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // KeywordList collection

		#region CRS Documentation
/*
		public static string GetCRSAnnoDocumentation()
		{
			return "
        Identifier for a single Coordinate Reference System (CRS).
      ";		
		}
 */ 
		public static string GetCRSDefault()
		{
			return "";		
		}
		#endregion

		#region CRS accessor methods
		public static int GetCRSMinCount()
		{
			return 0;
		}

		public static int CRSMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetCRSMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int CRSMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetCRSCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "CRS");
		}

		public int CRSCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "CRS");
			}
		}

		public bool HasCRS()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "CRS");
		}

		public SchemaString NewCRS()
		{
			return new SchemaString();
		}

		public SchemaString GetCRSAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "CRS", index)));
		}

		public XmlNode GetStartingCRSCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "CRS" );
		}

		public XmlNode GetAdvancedCRSCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "CRS", curNode );
		}

		public SchemaString GetCRSValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetCRS()
		{
			return GetCRSAt(0);
		}

		public SchemaString CRS
		{
			get
			{
				return GetCRSAt(0);
			}
		}

		public void RemoveCRSAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "CRS", index);
		}

		public void RemoveCRS()
		{
			while (HasCRS())
				RemoveCRSAt(0);
		}

		public XmlNode AddCRS(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "CRS", newValue.ToString());
			return null;
		}

		public void InsertCRSAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "CRS", index, newValue.ToString());
		}

		public void ReplaceCRSAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "CRS", index, newValue.ToString());
		}
		#endregion // CRS accessor methods

		#region CRS collection
        public CRSCollection	MyCRSs = new CRSCollection( );

        public class CRSCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CRSEnumerator GetEnumerator() 
			{
				return new CRSEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CRSEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public CRSEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CRSCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetCRSAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CRS collection

		#region EX_GeographicBoundingBox Documentation
/*
		public static string GetEX_GeographicBoundingBoxAnnoDocumentation()
		{
			return "
        The EX_GeographicBoundingBox attributes indicate the limits of the enclosing
        rectangle in longitude and latitude decimal degrees.
      ";		
		}
 */ 
		public static string GetEX_GeographicBoundingBoxDefault()
		{
			return "";		
		}
		#endregion

		#region EX_GeographicBoundingBox accessor methods
		public static int GetEX_GeographicBoundingBoxMinCount()
		{
			return 0;
		}

		public static int EX_GeographicBoundingBoxMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetEX_GeographicBoundingBoxMaxCount()
		{
			return 1;
		}

		public static int EX_GeographicBoundingBoxMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetEX_GeographicBoundingBoxCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "EX_GeographicBoundingBox");
		}

		public int EX_GeographicBoundingBoxCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "EX_GeographicBoundingBox");
			}
		}

		public bool HasEX_GeographicBoundingBox()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "EX_GeographicBoundingBox");
		}

		public EX_GeographicBoundingBoxType NewEX_GeographicBoundingBox()
		{
			return new EX_GeographicBoundingBoxType(domNode.OwnerDocument.CreateElement("EX_GeographicBoundingBox", "http://www.opengis.net/wms"));
		}

		public EX_GeographicBoundingBoxType GetEX_GeographicBoundingBoxAt(int index)
		{
			return new EX_GeographicBoundingBoxType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "EX_GeographicBoundingBox", index));
		}

		public XmlNode GetStartingEX_GeographicBoundingBoxCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "EX_GeographicBoundingBox" );
		}

		public XmlNode GetAdvancedEX_GeographicBoundingBoxCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "EX_GeographicBoundingBox", curNode );
		}

		public EX_GeographicBoundingBoxType GetEX_GeographicBoundingBoxValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new EX_GeographicBoundingBoxType( curNode );
		}


		public EX_GeographicBoundingBoxType GetEX_GeographicBoundingBox()
		{
			return GetEX_GeographicBoundingBoxAt(0);
		}

		public EX_GeographicBoundingBoxType EX_GeographicBoundingBox
		{
			get
			{
				return GetEX_GeographicBoundingBoxAt(0);
			}
		}

		public void RemoveEX_GeographicBoundingBoxAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "EX_GeographicBoundingBox", index);
		}

		public void RemoveEX_GeographicBoundingBox()
		{
			RemoveEX_GeographicBoundingBoxAt(0);
		}

		public XmlNode AddEX_GeographicBoundingBox(EX_GeographicBoundingBoxType newValue)
		{
			return AppendDomElement("http://www.opengis.net/wms", "EX_GeographicBoundingBox", newValue);
		}

		public void InsertEX_GeographicBoundingBoxAt(EX_GeographicBoundingBoxType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "EX_GeographicBoundingBox", index, newValue);
		}

		public void ReplaceEX_GeographicBoundingBoxAt(EX_GeographicBoundingBoxType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "EX_GeographicBoundingBox", index, newValue);
		}
		#endregion // EX_GeographicBoundingBox accessor methods

		#region EX_GeographicBoundingBox collection
        public EX_GeographicBoundingBoxCollection	MyEX_GeographicBoundingBoxs = new EX_GeographicBoundingBoxCollection( );

        public class EX_GeographicBoundingBoxCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public EX_GeographicBoundingBoxEnumerator GetEnumerator() 
			{
				return new EX_GeographicBoundingBoxEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class EX_GeographicBoundingBoxEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public EX_GeographicBoundingBoxEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.EX_GeographicBoundingBoxCount );
			}
			public EX_GeographicBoundingBoxType  Current 
			{
				get 
				{
					return(parent.GetEX_GeographicBoundingBoxAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // EX_GeographicBoundingBox collection

		#region BoundingBox Documentation
/*
		public static string GetBoundingBoxAnnoDocumentation()
		{
			return "
        The BoundingBox attributes indicate the limits of the bounding box
        in units of the specified coordinate reference system.
      ";		
		}
 */ 
		public static string GetBoundingBoxDefault()
		{
			return "";		
		}
		#endregion

		#region BoundingBox accessor methods
		public static int GetBoundingBoxMinCount()
		{
			return 0;
		}

		public static int BoundingBoxMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetBoundingBoxMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int BoundingBoxMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetBoundingBoxCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "BoundingBox");
		}

		public int BoundingBoxCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "BoundingBox");
			}
		}

		public bool HasBoundingBox()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "BoundingBox");
		}

		public BoundingBoxType NewBoundingBox()
		{
			return new BoundingBoxType(domNode.OwnerDocument.CreateElement("BoundingBox", "http://www.opengis.net/wms"));
		}

		public BoundingBoxType GetBoundingBoxAt(int index)
		{
			return new BoundingBoxType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "BoundingBox", index));
		}

		public XmlNode GetStartingBoundingBoxCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "BoundingBox" );
		}

		public XmlNode GetAdvancedBoundingBoxCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "BoundingBox", curNode );
		}

		public BoundingBoxType GetBoundingBoxValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new BoundingBoxType( curNode );
		}


		public BoundingBoxType GetBoundingBox()
		{
			return GetBoundingBoxAt(0);
		}

		public BoundingBoxType BoundingBox
		{
			get
			{
				return GetBoundingBoxAt(0);
			}
		}

		public void RemoveBoundingBoxAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "BoundingBox", index);
		}

		public void RemoveBoundingBox()
		{
			while (HasBoundingBox())
				RemoveBoundingBoxAt(0);
		}

		public XmlNode AddBoundingBox(BoundingBoxType newValue)
		{
			return AppendDomElement("http://www.opengis.net/wms", "BoundingBox", newValue);
		}

		public void InsertBoundingBoxAt(BoundingBoxType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "BoundingBox", index, newValue);
		}

		public void ReplaceBoundingBoxAt(BoundingBoxType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "BoundingBox", index, newValue);
		}
		#endregion // BoundingBox accessor methods

		#region BoundingBox collection
        public BoundingBoxCollection	MyBoundingBoxs = new BoundingBoxCollection( );

        public class BoundingBoxCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public BoundingBoxEnumerator GetEnumerator() 
			{
				return new BoundingBoxEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class BoundingBoxEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public BoundingBoxEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.BoundingBoxCount );
			}
			public BoundingBoxType  Current 
			{
				get 
				{
					return(parent.GetBoundingBoxAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // BoundingBox collection

		#region Dimension Documentation
/*
		public static string GetDimensionAnnoDocumentation()
		{
			return "
        The Dimension element declares the existence of a dimension and indicates what
        values along a dimension are valid.
      ";		
		}
 */ 
		public static string GetDimensionDefault()
		{
			return "";		
		}
		#endregion

		#region Dimension accessor methods
		public static int GetDimensionMinCount()
		{
			return 0;
		}

		public static int DimensionMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetDimensionMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int DimensionMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetDimensionCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Dimension");
		}

		public int DimensionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Dimension");
			}
		}

		public bool HasDimension()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "Dimension");
		}

		public DimensionType NewDimension()
		{
			return new DimensionType(domNode.OwnerDocument.CreateElement("Dimension", "http://www.opengis.net/wms"));
		}

		public DimensionType GetDimensionAt(int index)
		{
			return new DimensionType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Dimension", index));
		}

		public XmlNode GetStartingDimensionCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "Dimension" );
		}

		public XmlNode GetAdvancedDimensionCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "Dimension", curNode );
		}

		public DimensionType GetDimensionValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new DimensionType( curNode );
		}


		public DimensionType GetDimension()
		{
			return GetDimensionAt(0);
		}

		public DimensionType Dimension
		{
			get
			{
				return GetDimensionAt(0);
			}
		}

		public void RemoveDimensionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Dimension", index);
		}

		public void RemoveDimension()
		{
			while (HasDimension())
				RemoveDimensionAt(0);
		}

		public XmlNode AddDimension(DimensionType newValue)
		{
			return AppendDomElement("http://www.opengis.net/wms", "Dimension", newValue);
		}

		public void InsertDimensionAt(DimensionType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "Dimension", index, newValue);
		}

		public void ReplaceDimensionAt(DimensionType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "Dimension", index, newValue);
		}
		#endregion // Dimension accessor methods

		#region Dimension collection
        public DimensionCollection	MyDimensions = new DimensionCollection( );

        public class DimensionCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public DimensionEnumerator GetEnumerator() 
			{
				return new DimensionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class DimensionEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public DimensionEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.DimensionCount );
			}
			public DimensionType  Current 
			{
				get 
				{
					return(parent.GetDimensionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Dimension collection

		#region Attribution Documentation
/*
		public static string GetAttributionAnnoDocumentation()
		{
			return "
        Attribution indicates the provider of a Layer or collection of Layers.
        The provider's URL, descriptive title string, and/or logo image URL
        may be supplied.  Client applications may choose to display one or
        more of these items.  A format element indicates the MIME type of
        the logo image located at LogoURL.  The logo image's width and height
        assist client applications in laying out space to display the logo.
      ";		
		}
 */ 
		public static string GetAttributionDefault()
		{
			return "";		
		}
		#endregion

		#region Attribution accessor methods
		public static int GetAttributionMinCount()
		{
			return 0;
		}

		public static int AttributionMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetAttributionMaxCount()
		{
			return 1;
		}

		public static int AttributionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetAttributionCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Attribution");
		}

		public int AttributionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Attribution");
			}
		}

		public bool HasAttribution()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "Attribution");
		}

		public AttributionType NewAttribution()
		{
			return new AttributionType(domNode.OwnerDocument.CreateElement("Attribution", "http://www.opengis.net/wms"));
		}

		public AttributionType GetAttributionAt(int index)
		{
			return new AttributionType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Attribution", index));
		}

		public XmlNode GetStartingAttributionCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "Attribution" );
		}

		public XmlNode GetAdvancedAttributionCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "Attribution", curNode );
		}

		public AttributionType GetAttributionValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new AttributionType( curNode );
		}


		public AttributionType GetAttribution()
		{
			return GetAttributionAt(0);
		}

		public AttributionType Attribution
		{
			get
			{
				return GetAttributionAt(0);
			}
		}

		public void RemoveAttributionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Attribution", index);
		}

		public void RemoveAttribution()
		{
			RemoveAttributionAt(0);
		}

		public XmlNode AddAttribution(AttributionType newValue)
		{
			return AppendDomElement("http://www.opengis.net/wms", "Attribution", newValue);
		}

		public void InsertAttributionAt(AttributionType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "Attribution", index, newValue);
		}

		public void ReplaceAttributionAt(AttributionType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "Attribution", index, newValue);
		}
		#endregion // Attribution accessor methods

		#region Attribution collection
        public AttributionCollection	MyAttributions = new AttributionCollection( );

        public class AttributionCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public AttributionEnumerator GetEnumerator() 
			{
				return new AttributionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class AttributionEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public AttributionEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.AttributionCount );
			}
			public AttributionType  Current 
			{
				get 
				{
					return(parent.GetAttributionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Attribution collection

		#region AuthorityURL Documentation
/*
		public static string GetAuthorityURLAnnoDocumentation()
		{
			return "
        A Map Server may use zero or more Identifier elements to list ID
        numbers or labels defined by a particular Authority.  For example,
        the Global Change Master Directory (gcmd.gsfc.nasa.gov) defines a
        DIF_ID label for every dataset.  The authority name and explanatory
        URL are defined in a separate AuthorityURL element, which may be
        defined once and inherited by subsidiary layers.  Identifiers
        themselves are not inherited.
      ";		
		}
 */ 
		public static string GetAuthorityURLDefault()
		{
			return "";		
		}
		#endregion

		#region AuthorityURL accessor methods
		public static int GetAuthorityURLMinCount()
		{
			return 0;
		}

		public static int AuthorityURLMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetAuthorityURLMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int AuthorityURLMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetAuthorityURLCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "AuthorityURL");
		}

		public int AuthorityURLCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "AuthorityURL");
			}
		}

		public bool HasAuthorityURL()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "AuthorityURL");
		}

		public AuthorityURLType NewAuthorityURL()
		{
			return new AuthorityURLType(domNode.OwnerDocument.CreateElement("AuthorityURL", "http://www.opengis.net/wms"));
		}

		public AuthorityURLType GetAuthorityURLAt(int index)
		{
			return new AuthorityURLType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "AuthorityURL", index));
		}

		public XmlNode GetStartingAuthorityURLCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "AuthorityURL" );
		}

		public XmlNode GetAdvancedAuthorityURLCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "AuthorityURL", curNode );
		}

		public AuthorityURLType GetAuthorityURLValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new AuthorityURLType( curNode );
		}


		public AuthorityURLType GetAuthorityURL()
		{
			return GetAuthorityURLAt(0);
		}

		public AuthorityURLType AuthorityURL
		{
			get
			{
				return GetAuthorityURLAt(0);
			}
		}

		public void RemoveAuthorityURLAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "AuthorityURL", index);
		}

		public void RemoveAuthorityURL()
		{
			while (HasAuthorityURL())
				RemoveAuthorityURLAt(0);
		}

		public XmlNode AddAuthorityURL(AuthorityURLType newValue)
		{
			return AppendDomElement("http://www.opengis.net/wms", "AuthorityURL", newValue);
		}

		public void InsertAuthorityURLAt(AuthorityURLType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "AuthorityURL", index, newValue);
		}

		public void ReplaceAuthorityURLAt(AuthorityURLType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "AuthorityURL", index, newValue);
		}
		#endregion // AuthorityURL accessor methods

		#region AuthorityURL collection
        public AuthorityURLCollection	MyAuthorityURLs = new AuthorityURLCollection( );

        public class AuthorityURLCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public AuthorityURLEnumerator GetEnumerator() 
			{
				return new AuthorityURLEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class AuthorityURLEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public AuthorityURLEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.AuthorityURLCount );
			}
			public AuthorityURLType  Current 
			{
				get 
				{
					return(parent.GetAuthorityURLAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // AuthorityURL collection

		#region Identifier Documentation
/*
		public static string GetIdentifierAnnoDocumentation()
		{
			return "";		
		}
 */ 
		public static string GetIdentifierDefault()
		{
			return "";		
		}
		#endregion

		#region Identifier accessor methods
		public static int GetIdentifierMinCount()
		{
			return 0;
		}

		public static int IdentifierMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetIdentifierMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int IdentifierMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetIdentifierCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Identifier");
		}

		public int IdentifierCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Identifier");
			}
		}

		public bool HasIdentifier()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "Identifier");
		}

		public IdentifierType NewIdentifier()
		{
			return new IdentifierType(domNode.OwnerDocument.CreateElement("Identifier", "http://www.opengis.net/wms"));
		}

		public IdentifierType GetIdentifierAt(int index)
		{
			return new IdentifierType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Identifier", index));
		}

		public XmlNode GetStartingIdentifierCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "Identifier" );
		}

		public XmlNode GetAdvancedIdentifierCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "Identifier", curNode );
		}

		public IdentifierType GetIdentifierValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new IdentifierType( curNode );
		}


		public IdentifierType GetIdentifier()
		{
			return GetIdentifierAt(0);
		}

		public IdentifierType Identifier
		{
			get
			{
				return GetIdentifierAt(0);
			}
		}

		public void RemoveIdentifierAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Identifier", index);
		}

		public void RemoveIdentifier()
		{
			while (HasIdentifier())
				RemoveIdentifierAt(0);
		}

		public XmlNode AddIdentifier(IdentifierType newValue)
		{
			return AppendDomElement("http://www.opengis.net/wms", "Identifier", newValue);
		}

		public void InsertIdentifierAt(IdentifierType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "Identifier", index, newValue);
		}

		public void ReplaceIdentifierAt(IdentifierType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "Identifier", index, newValue);
		}
		#endregion // Identifier accessor methods

		#region Identifier collection
        public IdentifierCollection	MyIdentifiers = new IdentifierCollection( );

        public class IdentifierCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public IdentifierEnumerator GetEnumerator() 
			{
				return new IdentifierEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class IdentifierEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public IdentifierEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.IdentifierCount );
			}
			public IdentifierType  Current 
			{
				get 
				{
					return(parent.GetIdentifierAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Identifier collection

		#region MetadataURL Documentation
/*
		public static string GetMetadataURLAnnoDocumentation()
		{
			return "
        A Map Server may use zero or more MetadataURL elements to offer
        detailed, standardized metadata about the data underneath a
        particular layer. The type attribute indicates the standard to which
        the metadata complies.  The format element indicates how the metadata is structured.
      ";		
		}
 */ 
		public static string GetMetadataURLDefault()
		{
			return "";		
		}
		#endregion

		#region MetadataURL accessor methods
		public static int GetMetadataURLMinCount()
		{
			return 0;
		}

		public static int MetadataURLMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetMetadataURLMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int MetadataURLMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetMetadataURLCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "MetadataURL");
		}

		public int MetadataURLCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "MetadataURL");
			}
		}

		public bool HasMetadataURL()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "MetadataURL");
		}

		public MetadataURLType NewMetadataURL()
		{
			return new MetadataURLType(domNode.OwnerDocument.CreateElement("MetadataURL", "http://www.opengis.net/wms"));
		}

		public MetadataURLType GetMetadataURLAt(int index)
		{
			return new MetadataURLType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "MetadataURL", index));
		}

		public XmlNode GetStartingMetadataURLCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "MetadataURL" );
		}

		public XmlNode GetAdvancedMetadataURLCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "MetadataURL", curNode );
		}

		public MetadataURLType GetMetadataURLValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new MetadataURLType( curNode );
		}


		public MetadataURLType GetMetadataURL()
		{
			return GetMetadataURLAt(0);
		}

		public MetadataURLType MetadataURL
		{
			get
			{
				return GetMetadataURLAt(0);
			}
		}

		public void RemoveMetadataURLAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "MetadataURL", index);
		}

		public void RemoveMetadataURL()
		{
			while (HasMetadataURL())
				RemoveMetadataURLAt(0);
		}

		public XmlNode AddMetadataURL(MetadataURLType newValue)
		{
			return AppendDomElement("http://www.opengis.net/wms", "MetadataURL", newValue);
		}

		public void InsertMetadataURLAt(MetadataURLType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "MetadataURL", index, newValue);
		}

		public void ReplaceMetadataURLAt(MetadataURLType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "MetadataURL", index, newValue);
		}
		#endregion // MetadataURL accessor methods

		#region MetadataURL collection
        public MetadataURLCollection	MyMetadataURLs = new MetadataURLCollection( );

        public class MetadataURLCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public MetadataURLEnumerator GetEnumerator() 
			{
				return new MetadataURLEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class MetadataURLEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public MetadataURLEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.MetadataURLCount );
			}
			public MetadataURLType  Current 
			{
				get 
				{
					return(parent.GetMetadataURLAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // MetadataURL collection

		#region DataURL Documentation
/*
		public static string GetDataURLAnnoDocumentation()
		{
			return "
        A Map Server may use DataURL offer a link to the underlying data represented
        by a particular layer.
      ";		
		}
 */ 
		public static string GetDataURLDefault()
		{
			return "";		
		}
		#endregion

		#region DataURL accessor methods
		public static int GetDataURLMinCount()
		{
			return 0;
		}

		public static int DataURLMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetDataURLMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int DataURLMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetDataURLCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "DataURL");
		}

		public int DataURLCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "DataURL");
			}
		}

		public bool HasDataURL()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "DataURL");
		}

		public DataURLType NewDataURL()
		{
			return new DataURLType(domNode.OwnerDocument.CreateElement("DataURL", "http://www.opengis.net/wms"));
		}

		public DataURLType GetDataURLAt(int index)
		{
			return new DataURLType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "DataURL", index));
		}

		public XmlNode GetStartingDataURLCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "DataURL" );
		}

		public XmlNode GetAdvancedDataURLCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "DataURL", curNode );
		}

		public DataURLType GetDataURLValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new DataURLType( curNode );
		}


		public DataURLType GetDataURL()
		{
			return GetDataURLAt(0);
		}

		public DataURLType DataURL
		{
			get
			{
				return GetDataURLAt(0);
			}
		}

		public void RemoveDataURLAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "DataURL", index);
		}

		public void RemoveDataURL()
		{
			while (HasDataURL())
				RemoveDataURLAt(0);
		}

		public XmlNode AddDataURL(DataURLType newValue)
		{
			return AppendDomElement("http://www.opengis.net/wms", "DataURL", newValue);
		}

		public void InsertDataURLAt(DataURLType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "DataURL", index, newValue);
		}

		public void ReplaceDataURLAt(DataURLType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "DataURL", index, newValue);
		}
		#endregion // DataURL accessor methods

		#region DataURL collection
        public DataURLCollection	MyDataURLs = new DataURLCollection( );

        public class DataURLCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public DataURLEnumerator GetEnumerator() 
			{
				return new DataURLEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class DataURLEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public DataURLEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.DataURLCount );
			}
			public DataURLType  Current 
			{
				get 
				{
					return(parent.GetDataURLAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // DataURL collection

		#region FeatureListURL Documentation
/*
		public static string GetFeatureListURLAnnoDocumentation()
		{
			return "
        A Map Server may use FeatureListURL to point to a list of the
        features represented in a Layer.
      ";		
		}
 */ 
		public static string GetFeatureListURLDefault()
		{
			return "";		
		}
		#endregion

		#region FeatureListURL accessor methods
		public static int GetFeatureListURLMinCount()
		{
			return 0;
		}

		public static int FeatureListURLMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetFeatureListURLMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int FeatureListURLMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetFeatureListURLCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "FeatureListURL");
		}

		public int FeatureListURLCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "FeatureListURL");
			}
		}

		public bool HasFeatureListURL()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "FeatureListURL");
		}

		public FeatureListURLType NewFeatureListURL()
		{
			return new FeatureListURLType(domNode.OwnerDocument.CreateElement("FeatureListURL", "http://www.opengis.net/wms"));
		}

		public FeatureListURLType GetFeatureListURLAt(int index)
		{
			return new FeatureListURLType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "FeatureListURL", index));
		}

		public XmlNode GetStartingFeatureListURLCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "FeatureListURL" );
		}

		public XmlNode GetAdvancedFeatureListURLCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "FeatureListURL", curNode );
		}

		public FeatureListURLType GetFeatureListURLValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new FeatureListURLType( curNode );
		}


		public FeatureListURLType GetFeatureListURL()
		{
			return GetFeatureListURLAt(0);
		}

		public FeatureListURLType FeatureListURL
		{
			get
			{
				return GetFeatureListURLAt(0);
			}
		}

		public void RemoveFeatureListURLAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "FeatureListURL", index);
		}

		public void RemoveFeatureListURL()
		{
			while (HasFeatureListURL())
				RemoveFeatureListURLAt(0);
		}

		public XmlNode AddFeatureListURL(FeatureListURLType newValue)
		{
			return AppendDomElement("http://www.opengis.net/wms", "FeatureListURL", newValue);
		}

		public void InsertFeatureListURLAt(FeatureListURLType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "FeatureListURL", index, newValue);
		}

		public void ReplaceFeatureListURLAt(FeatureListURLType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "FeatureListURL", index, newValue);
		}
		#endregion // FeatureListURL accessor methods

		#region FeatureListURL collection
        public FeatureListURLCollection	MyFeatureListURLs = new FeatureListURLCollection( );

        public class FeatureListURLCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public FeatureListURLEnumerator GetEnumerator() 
			{
				return new FeatureListURLEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class FeatureListURLEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public FeatureListURLEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.FeatureListURLCount );
			}
			public FeatureListURLType  Current 
			{
				get 
				{
					return(parent.GetFeatureListURLAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // FeatureListURL collection

		#region Style Documentation
/*
		public static string GetStyleAnnoDocumentation()
		{
			return "
        A Style element lists the name by which a style is requested and a
        human-readable title for pick lists, optionally (and ideally)
        provides a human-readable description, and optionally gives a style
        URL.
      ";		
		}
 */ 
		public static string GetStyleDefault()
		{
			return "";		
		}
		#endregion

		#region Style accessor methods
		public static int GetStyleMinCount()
		{
			return 0;
		}

		public static int StyleMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetStyleMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int StyleMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetStyleCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Style");
		}

		public int StyleCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Style");
			}
		}

		public bool HasStyle()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "Style");
		}

		public StyleType NewStyle()
		{
			return new StyleType(domNode.OwnerDocument.CreateElement("Style", "http://www.opengis.net/wms"));
		}

		public StyleType GetStyleAt(int index)
		{
			return new StyleType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Style", index));
		}

		public XmlNode GetStartingStyleCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "Style" );
		}

		public XmlNode GetAdvancedStyleCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "Style", curNode );
		}

		public StyleType GetStyleValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new StyleType( curNode );
		}


		public StyleType GetStyle()
		{
			return GetStyleAt(0);
		}

		public StyleType Style
		{
			get
			{
				return GetStyleAt(0);
			}
		}

		public void RemoveStyleAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Style", index);
		}

		public void RemoveStyle()
		{
			while (HasStyle())
				RemoveStyleAt(0);
		}

		public XmlNode AddStyle(StyleType newValue)
		{
			return AppendDomElement("http://www.opengis.net/wms", "Style", newValue);
		}

		public void InsertStyleAt(StyleType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "Style", index, newValue);
		}

		public void ReplaceStyleAt(StyleType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "Style", index, newValue);
		}
		#endregion // Style accessor methods

		#region Style collection
        public StyleCollection	MyStyles = new StyleCollection( );

        public class StyleCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public StyleEnumerator GetEnumerator() 
			{
				return new StyleEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class StyleEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public StyleEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.StyleCount );
			}
			public StyleType  Current 
			{
				get 
				{
					return(parent.GetStyleAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Style collection

		#region MinScaleDenominator Documentation
/*
		public static string GetMinScaleDenominatorAnnoDocumentation()
		{
			return "
        Minimum scale denominator for which it is appropriate to
        display this layer.
      ";		
		}
 */ 
		public static string GetMinScaleDenominatorDefault()
		{
			return "";		
		}
		#endregion

		#region MinScaleDenominator accessor methods
		public static int GetMinScaleDenominatorMinCount()
		{
			return 0;
		}

		public static int MinScaleDenominatorMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetMinScaleDenominatorMaxCount()
		{
			return 1;
		}

		public static int MinScaleDenominatorMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetMinScaleDenominatorCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "MinScaleDenominator");
		}

		public int MinScaleDenominatorCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "MinScaleDenominator");
			}
		}

		public bool HasMinScaleDenominator()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "MinScaleDenominator");
		}

		public SchemaDouble NewMinScaleDenominator()
		{
			return new SchemaDouble();
		}

		public SchemaDouble GetMinScaleDenominatorAt(int index)
		{
			return new SchemaDouble(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "MinScaleDenominator", index)));
		}

		public XmlNode GetStartingMinScaleDenominatorCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "MinScaleDenominator" );
		}

		public XmlNode GetAdvancedMinScaleDenominatorCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "MinScaleDenominator", curNode );
		}

		public SchemaDouble GetMinScaleDenominatorValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDouble( curNode.InnerText );
		}


		public SchemaDouble GetMinScaleDenominator()
		{
			return GetMinScaleDenominatorAt(0);
		}

		public SchemaDouble MinScaleDenominator
		{
			get
			{
				return GetMinScaleDenominatorAt(0);
			}
		}

		public void RemoveMinScaleDenominatorAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "MinScaleDenominator", index);
		}

		public void RemoveMinScaleDenominator()
		{
			RemoveMinScaleDenominatorAt(0);
		}

		public XmlNode AddMinScaleDenominator(SchemaDouble newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "MinScaleDenominator", newValue.ToString());
			return null;
		}

		public void InsertMinScaleDenominatorAt(SchemaDouble newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "MinScaleDenominator", index, newValue.ToString());
		}

		public void ReplaceMinScaleDenominatorAt(SchemaDouble newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "MinScaleDenominator", index, newValue.ToString());
		}
		#endregion // MinScaleDenominator accessor methods

		#region MinScaleDenominator collection
        public MinScaleDenominatorCollection	MyMinScaleDenominators = new MinScaleDenominatorCollection( );

        public class MinScaleDenominatorCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public MinScaleDenominatorEnumerator GetEnumerator() 
			{
				return new MinScaleDenominatorEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class MinScaleDenominatorEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public MinScaleDenominatorEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.MinScaleDenominatorCount );
			}
			public SchemaDouble  Current 
			{
				get 
				{
					return(parent.GetMinScaleDenominatorAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // MinScaleDenominator collection

		#region MaxScaleDenominator Documentation
/*
		public static string GetMaxScaleDenominatorAnnoDocumentation()
		{
			return "
        Maximum scale denominator for which it is appropriate to
        display this layer.
      ";		
		}
 */ 
		public static string GetMaxScaleDenominatorDefault()
		{
			return "";		
		}
		#endregion

		#region MaxScaleDenominator accessor methods
		public static int GetMaxScaleDenominatorMinCount()
		{
			return 0;
		}

		public static int MaxScaleDenominatorMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetMaxScaleDenominatorMaxCount()
		{
			return 1;
		}

		public static int MaxScaleDenominatorMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetMaxScaleDenominatorCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "MaxScaleDenominator");
		}

		public int MaxScaleDenominatorCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "MaxScaleDenominator");
			}
		}

		public bool HasMaxScaleDenominator()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "MaxScaleDenominator");
		}

		public SchemaDouble NewMaxScaleDenominator()
		{
			return new SchemaDouble();
		}

		public SchemaDouble GetMaxScaleDenominatorAt(int index)
		{
			return new SchemaDouble(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "MaxScaleDenominator", index)));
		}

		public XmlNode GetStartingMaxScaleDenominatorCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "MaxScaleDenominator" );
		}

		public XmlNode GetAdvancedMaxScaleDenominatorCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "MaxScaleDenominator", curNode );
		}

		public SchemaDouble GetMaxScaleDenominatorValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDouble( curNode.InnerText );
		}


		public SchemaDouble GetMaxScaleDenominator()
		{
			return GetMaxScaleDenominatorAt(0);
		}

		public SchemaDouble MaxScaleDenominator
		{
			get
			{
				return GetMaxScaleDenominatorAt(0);
			}
		}

		public void RemoveMaxScaleDenominatorAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "MaxScaleDenominator", index);
		}

		public void RemoveMaxScaleDenominator()
		{
			RemoveMaxScaleDenominatorAt(0);
		}

		public XmlNode AddMaxScaleDenominator(SchemaDouble newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "MaxScaleDenominator", newValue.ToString());
			return null;
		}

		public void InsertMaxScaleDenominatorAt(SchemaDouble newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "MaxScaleDenominator", index, newValue.ToString());
		}

		public void ReplaceMaxScaleDenominatorAt(SchemaDouble newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "MaxScaleDenominator", index, newValue.ToString());
		}
		#endregion // MaxScaleDenominator accessor methods

		#region MaxScaleDenominator collection
        public MaxScaleDenominatorCollection	MyMaxScaleDenominators = new MaxScaleDenominatorCollection( );

        public class MaxScaleDenominatorCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public MaxScaleDenominatorEnumerator GetEnumerator() 
			{
				return new MaxScaleDenominatorEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class MaxScaleDenominatorEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public MaxScaleDenominatorEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.MaxScaleDenominatorCount );
			}
			public SchemaDouble  Current 
			{
				get 
				{
					return(parent.GetMaxScaleDenominatorAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // MaxScaleDenominator collection

		#region Layer Documentation
/*
		public static string GetLayerAnnoDocumentation()
		{
			return "
        Nested list of zero or more map Layers offered by this server.
      ";		
		}
 */ 
		public static string GetLayerDefault()
		{
			return "";		
		}
		#endregion

		#region Layer accessor methods
		public static int GetLayerMinCount()
		{
			return 0;
		}

		public static int LayerMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetLayerMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int LayerMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetLayerCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Layer");
		}

		public int LayerCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Layer");
			}
		}

		public bool HasLayer()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "Layer");
		}

		public LayerType NewLayer()
		{
			return new LayerType(domNode.OwnerDocument.CreateElement("Layer", "http://www.opengis.net/wms"));
		}

		public LayerType GetLayerAt(int index)
		{
			return new LayerType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Layer", index));
		}

		public XmlNode GetStartingLayerCursor()
		{
			return GetDomFirstChild( NodeType.Element, "http://www.opengis.net/wms", "Layer" );
		}

		public XmlNode GetAdvancedLayerCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "http://www.opengis.net/wms", "Layer", curNode );
		}

		public LayerType GetLayerValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new LayerType( curNode );
		}


		public LayerType GetLayer()
		{
			return GetLayerAt(0);
		}

		public LayerType Layer
		{
			get
			{
				return GetLayerAt(0);
			}
		}

		public void RemoveLayerAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Layer", index);
		}

		public void RemoveLayer()
		{
			while (HasLayer())
				RemoveLayerAt(0);
		}

		public XmlNode AddLayer(LayerType newValue)
		{
			return AppendDomElement("http://www.opengis.net/wms", "Layer", newValue);
		}

		public void InsertLayerAt(LayerType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "Layer", index, newValue);
		}

		public void ReplaceLayerAt(LayerType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "Layer", index, newValue);
		}
		#endregion // Layer accessor methods

		#region Layer collection
        public LayerCollection	MyLayers = new LayerCollection( );

        public class LayerCollection: IEnumerable
        {
            LayerType parent;
            public LayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public LayerEnumerator GetEnumerator() 
			{
				return new LayerEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class LayerEnumerator: IEnumerator 
        {
			int nIndex;
			LayerType parent;
			public LayerEnumerator(LayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.LayerCount );
			}
			public LayerType  Current 
			{
				get 
				{
					return(parent.GetLayerAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Layer collection

        private void SetCollectionParents()
        {
            Myqueryables.Parent = this; 
            Mycascadeds.Parent = this; 
            Myopaques.Parent = this; 
            MynoSubsetss.Parent = this; 
            MyfixedWidths.Parent = this; 
            MyfixedHeights.Parent = this; 
            MyNames.Parent = this; 
            MyTitles.Parent = this; 
            MyAbstract2s.Parent = this; 
            MyKeywordLists.Parent = this; 
            MyCRSs.Parent = this; 
            MyEX_GeographicBoundingBoxs.Parent = this; 
            MyBoundingBoxs.Parent = this; 
            MyDimensions.Parent = this; 
            MyAttributions.Parent = this; 
            MyAuthorityURLs.Parent = this; 
            MyIdentifiers.Parent = this; 
            MyMetadataURLs.Parent = this; 
            MyDataURLs.Parent = this; 
            MyFeatureListURLs.Parent = this; 
            MyStyles.Parent = this; 
            MyMinScaleDenominators.Parent = this; 
            MyMaxScaleDenominators.Parent = this; 
            MyLayers.Parent = this; 
	}
}
}
