//
// OnlineResourceType.cs
//
// This file was generated by XMLSpy 2007r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace capabilities_1_3_0.wms
{
	public class OnlineResourceType : Altova.Xml.Node
	{
		#region Documentation
	/*
		public static string GetAnnoDocumentation() { return ""; }
	 */ 
		#endregion

		#region Forward constructors

		public OnlineResourceType() : base() { SetCollectionParents(); }

		public OnlineResourceType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public OnlineResourceType(XmlNode node) : base(node) { SetCollectionParents(); }
		public OnlineResourceType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public OnlineResourceType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "type" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "type", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "href" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "href", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "role" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "role", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "arcrole" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "arcrole", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "title" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "title", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "show" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "show", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "actuate" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "actuate", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "wms:OnlineResource");
		}


		#region type2 Documentation
/*
		public static string Gettype2AnnoDocumentation()
		{
			return "";		
		}
 */ 
		public static string Gettype2Default()
		{
			return "";		
		}
		#endregion

		#region type2 accessor methods
		public static int Gettype2MinCount()
		{
			return 0;
		}

		public static int type2MinCount
		{
			get
			{
				return 0;
			}
		}

		public static int Gettype2MaxCount()
		{
			return 1;
		}

		public static int type2MaxCount
		{
			get
			{
				return 1;
			}
		}

		public int Gettype2Count()
		{
			return DomChildCount(NodeType.Attribute, "http://www.w3.org/1999/xlink", "type");
		}

		public int type2Count
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "http://www.w3.org/1999/xlink", "type");
			}
		}

		public bool Hastype2()
		{
			return HasDomChild(NodeType.Attribute, "http://www.w3.org/1999/xlink", "type");
		}

		public SchemaString Newtype2()
		{
			return new SchemaString();
		}

		public SchemaString Gettype2At(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "type", index)));
		}

		public XmlNode GetStartingtype2Cursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "type" );
		}

		public XmlNode GetAdvancedtype2Cursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "type", curNode );
		}

		public SchemaString Gettype2ValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString Gettype2()
		{
			return Gettype2At(0);
		}

		public SchemaString type2
		{
			get
			{
				return Gettype2At(0);
			}
		}

		public void Removetype2At(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "type", index);
		}

		public void Removetype2()
		{
			Removetype2At(0);
		}

		public XmlNode Addtype2(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "http://www.w3.org/1999/xlink", "type", newValue.ToString());
			return null;
		}

		public void Inserttype2At(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "type", index, newValue.ToString());
		}

		public void Replacetype2At(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "type", index, newValue.ToString());
		}
		#endregion // type2 accessor methods

		#region type2 collection
        public type2Collection	Mytype2s = new type2Collection( );

        public class type2Collection: IEnumerable
        {
            OnlineResourceType parent;
            public OnlineResourceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public type2Enumerator GetEnumerator() 
			{
				return new type2Enumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class type2Enumerator: IEnumerator 
        {
			int nIndex;
			OnlineResourceType parent;
			public type2Enumerator(OnlineResourceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.type2Count );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.Gettype2At(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // type2 collection

		#region href Documentation
/*
		public static string GethrefAnnoDocumentation()
		{
			return "";		
		}
 */ 
		public static string GethrefDefault()
		{
			return "";		
		}
		#endregion

		#region href accessor methods
		public static int GethrefMinCount()
		{
			return 0;
		}

		public static int hrefMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GethrefMaxCount()
		{
			return 1;
		}

		public static int hrefMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GethrefCount()
		{
			return DomChildCount(NodeType.Attribute, "http://www.w3.org/1999/xlink", "href");
		}

		public int hrefCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "http://www.w3.org/1999/xlink", "href");
			}
		}

		public bool Hashref()
		{
			return HasDomChild(NodeType.Attribute, "http://www.w3.org/1999/xlink", "href");
		}

		public SchemaString Newhref()
		{
			return new SchemaString();
		}

		public SchemaString GethrefAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "href", index)));
		}

		public XmlNode GetStartinghrefCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "href" );
		}

		public XmlNode GetAdvancedhrefCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "href", curNode );
		}

		public SchemaString GethrefValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString Gethref()
		{
			return GethrefAt(0);
		}

		public SchemaString href
		{
			get
			{
				return GethrefAt(0);
			}
		}

		public void RemovehrefAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "href", index);
		}

		public void Removehref()
		{
			RemovehrefAt(0);
		}

		public XmlNode Addhref(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "http://www.w3.org/1999/xlink", "href", newValue.ToString());
			return null;
		}

		public void InserthrefAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "href", index, newValue.ToString());
		}

		public void ReplacehrefAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "href", index, newValue.ToString());
		}
		#endregion // href accessor methods

		#region href collection
        public hrefCollection	Myhrefs = new hrefCollection( );

        public class hrefCollection: IEnumerable
        {
            OnlineResourceType parent;
            public OnlineResourceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public hrefEnumerator GetEnumerator() 
			{
				return new hrefEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class hrefEnumerator: IEnumerator 
        {
			int nIndex;
			OnlineResourceType parent;
			public hrefEnumerator(OnlineResourceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.hrefCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GethrefAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // href collection

		#region role Documentation
/*
		public static string GetroleAnnoDocumentation()
		{
			return "";		
		}
 */ 
		public static string GetroleDefault()
		{
			return "";		
		}
		#endregion

		#region role accessor methods
		public static int GetroleMinCount()
		{
			return 0;
		}

		public static int roleMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetroleMaxCount()
		{
			return 1;
		}

		public static int roleMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetroleCount()
		{
			return DomChildCount(NodeType.Attribute, "http://www.w3.org/1999/xlink", "role");
		}

		public int roleCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "http://www.w3.org/1999/xlink", "role");
			}
		}

		public bool Hasrole()
		{
			return HasDomChild(NodeType.Attribute, "http://www.w3.org/1999/xlink", "role");
		}

		public SchemaString Newrole()
		{
			return new SchemaString();
		}

		public SchemaString GetroleAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "role", index)));
		}

		public XmlNode GetStartingroleCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "role" );
		}

		public XmlNode GetAdvancedroleCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "role", curNode );
		}

		public SchemaString GetroleValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString Getrole()
		{
			return GetroleAt(0);
		}

		public SchemaString role
		{
			get
			{
				return GetroleAt(0);
			}
		}

		public void RemoveroleAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "role", index);
		}

		public void Removerole()
		{
			RemoveroleAt(0);
		}

		public XmlNode Addrole(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "http://www.w3.org/1999/xlink", "role", newValue.ToString());
			return null;
		}

		public void InsertroleAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "role", index, newValue.ToString());
		}

		public void ReplaceroleAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "role", index, newValue.ToString());
		}
		#endregion // role accessor methods

		#region role collection
        public roleCollection	Myroles = new roleCollection( );

        public class roleCollection: IEnumerable
        {
            OnlineResourceType parent;
            public OnlineResourceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public roleEnumerator GetEnumerator() 
			{
				return new roleEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class roleEnumerator: IEnumerator 
        {
			int nIndex;
			OnlineResourceType parent;
			public roleEnumerator(OnlineResourceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.roleCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetroleAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // role collection

		#region arcrole Documentation
/*
		public static string GetarcroleAnnoDocumentation()
		{
			return "";		
		}
 */ 
		public static string GetarcroleDefault()
		{
			return "";		
		}
		#endregion

		#region arcrole accessor methods
		public static int GetarcroleMinCount()
		{
			return 0;
		}

		public static int arcroleMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetarcroleMaxCount()
		{
			return 1;
		}

		public static int arcroleMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetarcroleCount()
		{
			return DomChildCount(NodeType.Attribute, "http://www.w3.org/1999/xlink", "arcrole");
		}

		public int arcroleCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "http://www.w3.org/1999/xlink", "arcrole");
			}
		}

		public bool Hasarcrole()
		{
			return HasDomChild(NodeType.Attribute, "http://www.w3.org/1999/xlink", "arcrole");
		}

		public SchemaString Newarcrole()
		{
			return new SchemaString();
		}

		public SchemaString GetarcroleAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "arcrole", index)));
		}

		public XmlNode GetStartingarcroleCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "arcrole" );
		}

		public XmlNode GetAdvancedarcroleCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "arcrole", curNode );
		}

		public SchemaString GetarcroleValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString Getarcrole()
		{
			return GetarcroleAt(0);
		}

		public SchemaString arcrole
		{
			get
			{
				return GetarcroleAt(0);
			}
		}

		public void RemovearcroleAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "arcrole", index);
		}

		public void Removearcrole()
		{
			RemovearcroleAt(0);
		}

		public XmlNode Addarcrole(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "http://www.w3.org/1999/xlink", "arcrole", newValue.ToString());
			return null;
		}

		public void InsertarcroleAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "arcrole", index, newValue.ToString());
		}

		public void ReplacearcroleAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "arcrole", index, newValue.ToString());
		}
		#endregion // arcrole accessor methods

		#region arcrole collection
        public arcroleCollection	Myarcroles = new arcroleCollection( );

        public class arcroleCollection: IEnumerable
        {
            OnlineResourceType parent;
            public OnlineResourceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public arcroleEnumerator GetEnumerator() 
			{
				return new arcroleEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class arcroleEnumerator: IEnumerator 
        {
			int nIndex;
			OnlineResourceType parent;
			public arcroleEnumerator(OnlineResourceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.arcroleCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetarcroleAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // arcrole collection

		#region title Documentation
/*
		public static string GettitleAnnoDocumentation()
		{
			return "";		
		}
 */ 
		public static string GettitleDefault()
		{
			return "";		
		}
		#endregion

		#region title accessor methods
		public static int GettitleMinCount()
		{
			return 0;
		}

		public static int titleMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GettitleMaxCount()
		{
			return 1;
		}

		public static int titleMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GettitleCount()
		{
			return DomChildCount(NodeType.Attribute, "http://www.w3.org/1999/xlink", "title");
		}

		public int titleCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "http://www.w3.org/1999/xlink", "title");
			}
		}

		public bool Hastitle()
		{
			return HasDomChild(NodeType.Attribute, "http://www.w3.org/1999/xlink", "title");
		}

		public SchemaString Newtitle()
		{
			return new SchemaString();
		}

		public SchemaString GettitleAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "title", index)));
		}

		public XmlNode GetStartingtitleCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "title" );
		}

		public XmlNode GetAdvancedtitleCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "title", curNode );
		}

		public SchemaString GettitleValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString Gettitle()
		{
			return GettitleAt(0);
		}

		public SchemaString title
		{
			get
			{
				return GettitleAt(0);
			}
		}

		public void RemovetitleAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "title", index);
		}

		public void Removetitle()
		{
			RemovetitleAt(0);
		}

		public XmlNode Addtitle(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "http://www.w3.org/1999/xlink", "title", newValue.ToString());
			return null;
		}

		public void InserttitleAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "title", index, newValue.ToString());
		}

		public void ReplacetitleAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "title", index, newValue.ToString());
		}
		#endregion // title accessor methods

		#region title collection
        public titleCollection	Mytitles = new titleCollection( );

        public class titleCollection: IEnumerable
        {
            OnlineResourceType parent;
            public OnlineResourceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public titleEnumerator GetEnumerator() 
			{
				return new titleEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class titleEnumerator: IEnumerator 
        {
			int nIndex;
			OnlineResourceType parent;
			public titleEnumerator(OnlineResourceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.titleCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GettitleAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // title collection

		#region show Documentation
/*
		public static string GetshowAnnoDocumentation()
		{
			return "
        The 'show' attribute is used to communicate the desired presentation 
        of the ending resource on traversal from the starting resource; it's 
        value should be treated as follows: 
        new - load ending resource in a new window, frame, pane, or other 
              presentation context
        replace - load the resource in the same window, frame, pane, or 
                  other presentation context
        embed - load ending resource in place of the presentation of the 
                starting resource
        other - behavior is unconstrained; examine other markup in the 
                link for hints 
        none - behavior is unconstrained 
      ";		
		}
 */ 
		public static string GetshowDefault()
		{
			return "";		
		}
		#endregion

		#region show accessor methods
		public static int GetshowMinCount()
		{
			return 0;
		}

		public static int showMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetshowMaxCount()
		{
			return 1;
		}

		public static int showMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetshowCount()
		{
			return DomChildCount(NodeType.Attribute, "http://www.w3.org/1999/xlink", "show");
		}

		public int showCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "http://www.w3.org/1999/xlink", "show");
			}
		}

		public bool Hasshow()
		{
			return HasDomChild(NodeType.Attribute, "http://www.w3.org/1999/xlink", "show");
		}

		public xlink.showType Newshow()
		{
			return new xlink.showType();
		}

		public xlink.showType GetshowAt(int index)
		{
			return new xlink.showType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "show", index)));
		}

		public XmlNode GetStartingshowCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "show" );
		}

		public XmlNode GetAdvancedshowCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "show", curNode );
		}

		public xlink.showType GetshowValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new xlink.showType( curNode.Value );
		}


		public xlink.showType Getshow()
		{
			return GetshowAt(0);
		}

		public xlink.showType show
		{
			get
			{
				return GetshowAt(0);
			}
		}

		public void RemoveshowAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "show", index);
		}

		public void Removeshow()
		{
			RemoveshowAt(0);
		}

		public XmlNode Addshow(xlink.showType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "http://www.w3.org/1999/xlink", "show", newValue.ToString());
			return null;
		}

		public void InsertshowAt(xlink.showType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "show", index, newValue.ToString());
		}

		public void ReplaceshowAt(xlink.showType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "show", index, newValue.ToString());
		}
		#endregion // show accessor methods

		#region show collection
        public showCollection	Myshows = new showCollection( );

        public class showCollection: IEnumerable
        {
            OnlineResourceType parent;
            public OnlineResourceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public showEnumerator GetEnumerator() 
			{
				return new showEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class showEnumerator: IEnumerator 
        {
			int nIndex;
			OnlineResourceType parent;
			public showEnumerator(OnlineResourceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.showCount );
			}
			public xlink.showType  Current 
			{
				get 
				{
					return(parent.GetshowAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // show collection

		#region actuate Documentation
/*
		public static string GetactuateAnnoDocumentation()
		{
			return "
        The 'actuate' attribute is used to communicate the desired timing 
        of traversal from the starting resource to the ending resource; 
        it's value should be treated as follows:
        onLoad - traverse to the ending resource immediately on loading 
                 the starting resource 
        onRequest - traverse from the starting resource to the ending 
                    resource only on a post-loading event triggered for 
                    this purpose 
        other - behavior is unconstrained; examine other markup in link 
                for hints 
        none - behavior is unconstrained
      ";		
		}
 */ 
		public static string GetactuateDefault()
		{
			return "";		
		}
		#endregion

		#region actuate accessor methods
		public static int GetactuateMinCount()
		{
			return 0;
		}

		public static int actuateMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetactuateMaxCount()
		{
			return 1;
		}

		public static int actuateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetactuateCount()
		{
			return DomChildCount(NodeType.Attribute, "http://www.w3.org/1999/xlink", "actuate");
		}

		public int actuateCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "http://www.w3.org/1999/xlink", "actuate");
			}
		}

		public bool Hasactuate()
		{
			return HasDomChild(NodeType.Attribute, "http://www.w3.org/1999/xlink", "actuate");
		}

		public xlink.actuateType Newactuate()
		{
			return new xlink.actuateType();
		}

		public xlink.actuateType GetactuateAt(int index)
		{
			return new xlink.actuateType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "actuate", index)));
		}

		public XmlNode GetStartingactuateCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "actuate" );
		}

		public XmlNode GetAdvancedactuateCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "http://www.w3.org/1999/xlink", "actuate", curNode );
		}

		public xlink.actuateType GetactuateValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new xlink.actuateType( curNode.Value );
		}


		public xlink.actuateType Getactuate()
		{
			return GetactuateAt(0);
		}

		public xlink.actuateType actuate
		{
			get
			{
				return GetactuateAt(0);
			}
		}

		public void RemoveactuateAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "actuate", index);
		}

		public void Removeactuate()
		{
			RemoveactuateAt(0);
		}

		public XmlNode Addactuate(xlink.actuateType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "http://www.w3.org/1999/xlink", "actuate", newValue.ToString());
			return null;
		}

		public void InsertactuateAt(xlink.actuateType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "actuate", index, newValue.ToString());
		}

		public void ReplaceactuateAt(xlink.actuateType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "http://www.w3.org/1999/xlink", "actuate", index, newValue.ToString());
		}
		#endregion // actuate accessor methods

		#region actuate collection
        public actuateCollection	Myactuates = new actuateCollection( );

        public class actuateCollection: IEnumerable
        {
            OnlineResourceType parent;
            public OnlineResourceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public actuateEnumerator GetEnumerator() 
			{
				return new actuateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class actuateEnumerator: IEnumerator 
        {
			int nIndex;
			OnlineResourceType parent;
			public actuateEnumerator(OnlineResourceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.actuateCount );
			}
			public xlink.actuateType  Current 
			{
				get 
				{
					return(parent.GetactuateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // actuate collection

        private void SetCollectionParents()
        {
            Mytype2s.Parent = this; 
            Myhrefs.Parent = this; 
            Myroles.Parent = this; 
            Myarcroles.Parent = this; 
            Mytitles.Parent = this; 
            Myshows.Parent = this; 
            Myactuates.Parent = this; 
	}
}
}
