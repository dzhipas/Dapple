//
// IdentifierType.cs
//
// This file was generated by XMLSpy 2007r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace capabilities_1_3_0.wms
{
	public class IdentifierType : Altova.Xml.Node
	{
		#region Documentation
	/*
		public static string GetAnnoDocumentation() { return ""; }
	 */ 
		#endregion

		#region Forward constructors

		public IdentifierType() : base() { SetCollectionParents(); }

		public IdentifierType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public IdentifierType(XmlNode node) : base(node) { SetCollectionParents(); }
		public IdentifierType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public IdentifierType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		#region Value accessor methods
		public SchemaString GetValue()
		{
			return new SchemaString(GetDomNodeValue(domNode));
		}

		public void SetValue(ISchemaType newValue)
		{
			SetDomNodeValue(domNode, newValue.ToString());
		}

		public void Assign(ISchemaType newValue)
		{
			SetValue(newValue);
		}

		public SchemaString Value
		{
			get
			{
				return new SchemaString(GetDomNodeValue(domNode));
			}
			set
			{
				SetDomNodeValue(domNode, value.ToString());
			}
		}
		#endregion // Value accessor methods

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "authority" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "authority", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "wms:Identifier");
		}


		#region authority Documentation
/*
		public static string GetauthorityAnnoDocumentation()
		{
			return "";		
		}
 */ 
		public static string GetauthorityDefault()
		{
			return "";		
		}
		#endregion

		#region authority accessor methods
		public static int GetauthorityMinCount()
		{
			return 1;
		}

		public static int authorityMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetauthorityMaxCount()
		{
			return 1;
		}

		public static int authorityMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetauthorityCount()
		{
			return DomChildCount(NodeType.Attribute, "", "authority");
		}

		public int authorityCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "authority");
			}
		}

		public bool Hasauthority()
		{
			return HasDomChild(NodeType.Attribute, "", "authority");
		}

		public SchemaString Newauthority()
		{
			return new SchemaString();
		}

		public SchemaString GetauthorityAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "authority", index)));
		}

		public XmlNode GetStartingauthorityCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "authority" );
		}

		public XmlNode GetAdvancedauthorityCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "authority", curNode );
		}

		public SchemaString GetauthorityValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString Getauthority()
		{
			return GetauthorityAt(0);
		}

		public SchemaString authority
		{
			get
			{
				return GetauthorityAt(0);
			}
		}

		public void RemoveauthorityAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "authority", index);
		}

		public void Removeauthority()
		{
			RemoveauthorityAt(0);
		}

		public XmlNode Addauthority(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "authority", newValue.ToString());
			return null;
		}

		public void InsertauthorityAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "authority", index, newValue.ToString());
		}

		public void ReplaceauthorityAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "authority", index, newValue.ToString());
		}
		#endregion // authority accessor methods

		#region authority collection
        public authorityCollection	Myauthoritys = new authorityCollection( );

        public class authorityCollection: IEnumerable
        {
            IdentifierType parent;
            public IdentifierType Parent
			{
				set
				{
					parent = value;
				}
			}
			public authorityEnumerator GetEnumerator() 
			{
				return new authorityEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class authorityEnumerator: IEnumerator 
        {
			int nIndex;
			IdentifierType parent;
			public authorityEnumerator(IdentifierType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.authorityCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetauthorityAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // authority collection

        private void SetCollectionParents()
        {
            Myauthoritys.Parent = this; 
	}
}
}
