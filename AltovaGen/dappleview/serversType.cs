//
// serversType.cs
//
// This file was generated by XMLSpy 2007r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace dappleview
{
	public class serversType : Altova.Xml.Node
	{
		#region Documentation
		public static string GetAnnoDocumentation() { return ""; }
		#endregion

		#region Forward constructors

		public serversType() : base() { SetCollectionParents(); }

		public serversType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public serversType(XmlNode node) : base(node) { SetCollectionParents(); }
		public serversType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public serversType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "builderentry" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "builderentry", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new builderentryType(DOMNode).AdjustPrefix();
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "servers");
		}


		#region builderentry Documentation
		public static string GetbuilderentryAnnoDocumentation()
		{
			return "";		
		}
		public static string GetbuilderentryDefault()
		{
			return "";		
		}
		#endregion

		#region builderentry accessor methods
		public static int GetbuilderentryMinCount()
		{
			return 0;
		}

		public static int builderentryMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetbuilderentryMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int builderentryMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetbuilderentryCount()
		{
			return DomChildCount(NodeType.Element, "", "builderentry");
		}

		public int builderentryCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "builderentry");
			}
		}

		public bool Hasbuilderentry()
		{
			return HasDomChild(NodeType.Element, "", "builderentry");
		}

		public builderentryType Newbuilderentry()
		{
			return new builderentryType(domNode.OwnerDocument.CreateElement("builderentry", ""));
		}

		public builderentryType GetbuilderentryAt(int index)
		{
			return new builderentryType(GetDomChildAt(NodeType.Element, "", "builderentry", index));
		}

		public XmlNode GetStartingbuilderentryCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "builderentry" );
		}

		public XmlNode GetAdvancedbuilderentryCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "builderentry", curNode );
		}

		public builderentryType GetbuilderentryValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new builderentryType( curNode );
		}


		public builderentryType Getbuilderentry()
		{
			return GetbuilderentryAt(0);
		}

		public builderentryType builderentry
		{
			get
			{
				return GetbuilderentryAt(0);
			}
		}

		public void RemovebuilderentryAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "builderentry", index);
		}

		public void Removebuilderentry()
		{
			while (Hasbuilderentry())
				RemovebuilderentryAt(0);
		}

		public XmlNode Addbuilderentry(builderentryType newValue)
		{
			return AppendDomElement("", "builderentry", newValue);
		}

		public void InsertbuilderentryAt(builderentryType newValue, int index)
		{
			InsertDomElementAt("", "builderentry", index, newValue);
		}

		public void ReplacebuilderentryAt(builderentryType newValue, int index)
		{
			ReplaceDomElementAt("", "builderentry", index, newValue);
		}
		#endregion // builderentry accessor methods

		#region builderentry collection
        public builderentryCollection	Mybuilderentrys = new builderentryCollection( );

        public class builderentryCollection: IEnumerable
        {
            serversType parent;
            public serversType Parent
			{
				set
				{
					parent = value;
				}
			}
			public builderentryEnumerator GetEnumerator() 
			{
				return new builderentryEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class builderentryEnumerator: IEnumerator 
        {
			int nIndex;
			serversType parent;
			public builderentryEnumerator(serversType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.builderentryCount );
			}
			public builderentryType  Current 
			{
				get 
				{
					return(parent.GetbuilderentryAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // builderentry collection

        private void SetCollectionParents()
        {
            Mybuilderentrys.Parent = this; 
	}
}
}
