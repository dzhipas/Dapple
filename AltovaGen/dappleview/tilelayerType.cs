//
// tilelayerType.cs
//
// This file was generated by XMLSpy 2006r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace dappleview
{
	public class tilelayerType : Altova.Xml.Node
	{
		#region Documentation
		public static string GetAnnoDocumentation() { return ""; }
		#endregion

		#region Forward constructors

		public tilelayerType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public tilelayerType(XmlNode node) : base(node) { SetCollectionParents(); }
		public tilelayerType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public tilelayerType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "name" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "name", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "url" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "url", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "dataset" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "dataset", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "levelzerotilesize" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "levelzerotilesize", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "tilepixelsize" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "tilepixelsize", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "levels" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "levels", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "imageextension" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "imageextension", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "distanceabovesurface" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "distanceabovesurface", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "boundingbox" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "boundingbox", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new boundingboxType(DOMNode).AdjustPrefix();
			}
		}



		#region name Documentation
		public static string GetnameAnnoDocumentation()
		{
			return "";		
		}
		public static string GetnameDefault()
		{
			return "";		
		}
		#endregion

		#region name accessor methods
		public static int GetnameMinCount()
		{
			return 1;
		}

		public static int nameMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetnameMaxCount()
		{
			return 1;
		}

		public static int nameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnameCount()
		{
			return DomChildCount(NodeType.Attribute, "", "name");
		}

		public int nameCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "name");
			}
		}

		public bool Hasname()
		{
			return HasDomChild(NodeType.Attribute, "", "name");
		}

		public SchemaString Newname()
		{
			return new SchemaString();
		}

		public SchemaString GetnameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "name", index)));
		}

		public XmlNode GetStartingnameCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "name" );
		}

		public XmlNode GetAdvancednameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "name", curNode );
		}

		public SchemaString GetnameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString Getname()
		{
			return GetnameAt(0);
		}

		public SchemaString name
		{
			get
			{
				return GetnameAt(0);
			}
		}

		public void RemovenameAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "name", index);
		}

		public void Removename()
		{
			while (Hasname())
				RemovenameAt(0);
		}

		public void Addname(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "name", newValue.ToString());
		}

		public void InsertnameAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "name", index, newValue.ToString());
		}

		public void ReplacenameAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "name", index, newValue.ToString());
		}
		#endregion // name accessor methods

		#region name collection
        public nameCollection	Mynames = new nameCollection( );

        public class nameCollection: IEnumerable
        {
            tilelayerType parent;
            public tilelayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public nameEnumerator GetEnumerator() 
			{
				return new nameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class nameEnumerator: IEnumerator 
        {
			int nIndex;
			tilelayerType parent;
			public nameEnumerator(tilelayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.nameCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetnameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // name collection

		#region url Documentation
		public static string GeturlAnnoDocumentation()
		{
			return "";		
		}
		public static string GeturlDefault()
		{
			return "";		
		}
		#endregion

		#region url accessor methods
		public static int GeturlMinCount()
		{
			return 1;
		}

		public static int urlMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GeturlMaxCount()
		{
			return 1;
		}

		public static int urlMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GeturlCount()
		{
			return DomChildCount(NodeType.Attribute, "", "url");
		}

		public int urlCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "url");
			}
		}

		public bool Hasurl()
		{
			return HasDomChild(NodeType.Attribute, "", "url");
		}

		public SchemaString Newurl()
		{
			return new SchemaString();
		}

		public SchemaString GeturlAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "url", index)));
		}

		public XmlNode GetStartingurlCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "url" );
		}

		public XmlNode GetAdvancedurlCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "url", curNode );
		}

		public SchemaString GeturlValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString Geturl()
		{
			return GeturlAt(0);
		}

		public SchemaString url
		{
			get
			{
				return GeturlAt(0);
			}
		}

		public void RemoveurlAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "url", index);
		}

		public void Removeurl()
		{
			while (Hasurl())
				RemoveurlAt(0);
		}

		public void Addurl(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "url", newValue.ToString());
		}

		public void InserturlAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "url", index, newValue.ToString());
		}

		public void ReplaceurlAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "url", index, newValue.ToString());
		}
		#endregion // url accessor methods

		#region url collection
        public urlCollection	Myurls = new urlCollection( );

        public class urlCollection: IEnumerable
        {
            tilelayerType parent;
            public tilelayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public urlEnumerator GetEnumerator() 
			{
				return new urlEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class urlEnumerator: IEnumerator 
        {
			int nIndex;
			tilelayerType parent;
			public urlEnumerator(tilelayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.urlCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GeturlAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // url collection

		#region dataset Documentation
		public static string GetdatasetAnnoDocumentation()
		{
			return "";		
		}
		public static string GetdatasetDefault()
		{
			return "";		
		}
		#endregion

		#region dataset accessor methods
		public static int GetdatasetMinCount()
		{
			return 1;
		}

		public static int datasetMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetdatasetMaxCount()
		{
			return 1;
		}

		public static int datasetMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetdatasetCount()
		{
			return DomChildCount(NodeType.Attribute, "", "dataset");
		}

		public int datasetCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "dataset");
			}
		}

		public bool Hasdataset()
		{
			return HasDomChild(NodeType.Attribute, "", "dataset");
		}

		public SchemaString Newdataset()
		{
			return new SchemaString();
		}

		public SchemaString GetdatasetAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "dataset", index)));
		}

		public XmlNode GetStartingdatasetCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "dataset" );
		}

		public XmlNode GetAdvanceddatasetCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "dataset", curNode );
		}

		public SchemaString GetdatasetValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString Getdataset()
		{
			return GetdatasetAt(0);
		}

		public SchemaString dataset
		{
			get
			{
				return GetdatasetAt(0);
			}
		}

		public void RemovedatasetAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "dataset", index);
		}

		public void Removedataset()
		{
			while (Hasdataset())
				RemovedatasetAt(0);
		}

		public void Adddataset(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "dataset", newValue.ToString());
		}

		public void InsertdatasetAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "dataset", index, newValue.ToString());
		}

		public void ReplacedatasetAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "dataset", index, newValue.ToString());
		}
		#endregion // dataset accessor methods

		#region dataset collection
        public datasetCollection	Mydatasets = new datasetCollection( );

        public class datasetCollection: IEnumerable
        {
            tilelayerType parent;
            public tilelayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public datasetEnumerator GetEnumerator() 
			{
				return new datasetEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class datasetEnumerator: IEnumerator 
        {
			int nIndex;
			tilelayerType parent;
			public datasetEnumerator(tilelayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.datasetCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetdatasetAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // dataset collection

		#region levelzerotilesize Documentation
		public static string GetlevelzerotilesizeAnnoDocumentation()
		{
			return "";		
		}
		public static string GetlevelzerotilesizeDefault()
		{
			return "";		
		}
		#endregion

		#region levelzerotilesize accessor methods
		public static int GetlevelzerotilesizeMinCount()
		{
			return 1;
		}

		public static int levelzerotilesizeMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetlevelzerotilesizeMaxCount()
		{
			return 1;
		}

		public static int levelzerotilesizeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetlevelzerotilesizeCount()
		{
			return DomChildCount(NodeType.Attribute, "", "levelzerotilesize");
		}

		public int levelzerotilesizeCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "levelzerotilesize");
			}
		}

		public bool Haslevelzerotilesize()
		{
			return HasDomChild(NodeType.Attribute, "", "levelzerotilesize");
		}

		public SchemaDouble Newlevelzerotilesize()
		{
			return new SchemaDouble();
		}

		public SchemaDouble GetlevelzerotilesizeAt(int index)
		{
			return new SchemaDouble(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "levelzerotilesize", index)));
		}

		public XmlNode GetStartinglevelzerotilesizeCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "levelzerotilesize" );
		}

		public XmlNode GetAdvancedlevelzerotilesizeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "levelzerotilesize", curNode );
		}

		public SchemaDouble GetlevelzerotilesizeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDouble( curNode.Value );
		}


		public SchemaDouble Getlevelzerotilesize()
		{
			return GetlevelzerotilesizeAt(0);
		}

		public SchemaDouble levelzerotilesize
		{
			get
			{
				return GetlevelzerotilesizeAt(0);
			}
		}

		public void RemovelevelzerotilesizeAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "levelzerotilesize", index);
		}

		public void Removelevelzerotilesize()
		{
			while (Haslevelzerotilesize())
				RemovelevelzerotilesizeAt(0);
		}

		public void Addlevelzerotilesize(SchemaDouble newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "levelzerotilesize", newValue.ToString());
		}

		public void InsertlevelzerotilesizeAt(SchemaDouble newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "levelzerotilesize", index, newValue.ToString());
		}

		public void ReplacelevelzerotilesizeAt(SchemaDouble newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "levelzerotilesize", index, newValue.ToString());
		}
		#endregion // levelzerotilesize accessor methods

		#region levelzerotilesize collection
        public levelzerotilesizeCollection	Mylevelzerotilesizes = new levelzerotilesizeCollection( );

        public class levelzerotilesizeCollection: IEnumerable
        {
            tilelayerType parent;
            public tilelayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public levelzerotilesizeEnumerator GetEnumerator() 
			{
				return new levelzerotilesizeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class levelzerotilesizeEnumerator: IEnumerator 
        {
			int nIndex;
			tilelayerType parent;
			public levelzerotilesizeEnumerator(tilelayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.levelzerotilesizeCount );
			}
			public SchemaDouble  Current 
			{
				get 
				{
					return(parent.GetlevelzerotilesizeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // levelzerotilesize collection

		#region tilepixelsize Documentation
		public static string GettilepixelsizeAnnoDocumentation()
		{
			return "";		
		}
		public static string GettilepixelsizeDefault()
		{
			return "512";		
		}
		#endregion

		#region tilepixelsize accessor methods
		public static int GettilepixelsizeMinCount()
		{
			return 0;
		}

		public static int tilepixelsizeMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GettilepixelsizeMaxCount()
		{
			return 1;
		}

		public static int tilepixelsizeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GettilepixelsizeCount()
		{
			return DomChildCount(NodeType.Attribute, "", "tilepixelsize");
		}

		public int tilepixelsizeCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "tilepixelsize");
			}
		}

		public bool Hastilepixelsize()
		{
			return HasDomChild(NodeType.Attribute, "", "tilepixelsize");
		}

		public SchemaInt Newtilepixelsize()
		{
			return new SchemaInt();
		}

		public SchemaInt GettilepixelsizeAt(int index)
		{
			return new SchemaInt(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "tilepixelsize", index)));
		}

		public XmlNode GetStartingtilepixelsizeCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "tilepixelsize" );
		}

		public XmlNode GetAdvancedtilepixelsizeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "tilepixelsize", curNode );
		}

		public SchemaInt GettilepixelsizeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaInt( curNode.Value );
		}


		public SchemaInt Gettilepixelsize()
		{
			return GettilepixelsizeAt(0);
		}

		public SchemaInt tilepixelsize
		{
			get
			{
				return GettilepixelsizeAt(0);
			}
		}

		public void RemovetilepixelsizeAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "tilepixelsize", index);
		}

		public void Removetilepixelsize()
		{
			while (Hastilepixelsize())
				RemovetilepixelsizeAt(0);
		}

		public void Addtilepixelsize(SchemaInt newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "tilepixelsize", newValue.ToString());
		}

		public void InserttilepixelsizeAt(SchemaInt newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "tilepixelsize", index, newValue.ToString());
		}

		public void ReplacetilepixelsizeAt(SchemaInt newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "tilepixelsize", index, newValue.ToString());
		}
		#endregion // tilepixelsize accessor methods

		#region tilepixelsize collection
        public tilepixelsizeCollection	Mytilepixelsizes = new tilepixelsizeCollection( );

        public class tilepixelsizeCollection: IEnumerable
        {
            tilelayerType parent;
            public tilelayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public tilepixelsizeEnumerator GetEnumerator() 
			{
				return new tilepixelsizeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class tilepixelsizeEnumerator: IEnumerator 
        {
			int nIndex;
			tilelayerType parent;
			public tilepixelsizeEnumerator(tilelayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.tilepixelsizeCount );
			}
			public SchemaInt  Current 
			{
				get 
				{
					return(parent.GettilepixelsizeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // tilepixelsize collection

		#region levels Documentation
		public static string GetlevelsAnnoDocumentation()
		{
			return "";		
		}
		public static string GetlevelsDefault()
		{
			return "";		
		}
		#endregion

		#region levels accessor methods
		public static int GetlevelsMinCount()
		{
			return 1;
		}

		public static int levelsMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetlevelsMaxCount()
		{
			return 1;
		}

		public static int levelsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetlevelsCount()
		{
			return DomChildCount(NodeType.Attribute, "", "levels");
		}

		public int levelsCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "levels");
			}
		}

		public bool Haslevels()
		{
			return HasDomChild(NodeType.Attribute, "", "levels");
		}

		public SchemaInt Newlevels()
		{
			return new SchemaInt();
		}

		public SchemaInt GetlevelsAt(int index)
		{
			return new SchemaInt(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "levels", index)));
		}

		public XmlNode GetStartinglevelsCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "levels" );
		}

		public XmlNode GetAdvancedlevelsCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "levels", curNode );
		}

		public SchemaInt GetlevelsValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaInt( curNode.Value );
		}


		public SchemaInt Getlevels()
		{
			return GetlevelsAt(0);
		}

		public SchemaInt levels
		{
			get
			{
				return GetlevelsAt(0);
			}
		}

		public void RemovelevelsAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "levels", index);
		}

		public void Removelevels()
		{
			while (Haslevels())
				RemovelevelsAt(0);
		}

		public void Addlevels(SchemaInt newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "levels", newValue.ToString());
		}

		public void InsertlevelsAt(SchemaInt newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "levels", index, newValue.ToString());
		}

		public void ReplacelevelsAt(SchemaInt newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "levels", index, newValue.ToString());
		}
		#endregion // levels accessor methods

		#region levels collection
        public levelsCollection	Mylevelss = new levelsCollection( );

        public class levelsCollection: IEnumerable
        {
            tilelayerType parent;
            public tilelayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public levelsEnumerator GetEnumerator() 
			{
				return new levelsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class levelsEnumerator: IEnumerator 
        {
			int nIndex;
			tilelayerType parent;
			public levelsEnumerator(tilelayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.levelsCount );
			}
			public SchemaInt  Current 
			{
				get 
				{
					return(parent.GetlevelsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // levels collection

		#region imageextension Documentation
		public static string GetimageextensionAnnoDocumentation()
		{
			return "";		
		}
		public static string GetimageextensionDefault()
		{
			return "";		
		}
		#endregion

		#region imageextension accessor methods
		public static int GetimageextensionMinCount()
		{
			return 1;
		}

		public static int imageextensionMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetimageextensionMaxCount()
		{
			return 1;
		}

		public static int imageextensionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetimageextensionCount()
		{
			return DomChildCount(NodeType.Attribute, "", "imageextension");
		}

		public int imageextensionCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "imageextension");
			}
		}

		public bool Hasimageextension()
		{
			return HasDomChild(NodeType.Attribute, "", "imageextension");
		}

		public SchemaString Newimageextension()
		{
			return new SchemaString();
		}

		public SchemaString GetimageextensionAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "imageextension", index)));
		}

		public XmlNode GetStartingimageextensionCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "imageextension" );
		}

		public XmlNode GetAdvancedimageextensionCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "imageextension", curNode );
		}

		public SchemaString GetimageextensionValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString Getimageextension()
		{
			return GetimageextensionAt(0);
		}

		public SchemaString imageextension
		{
			get
			{
				return GetimageextensionAt(0);
			}
		}

		public void RemoveimageextensionAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "imageextension", index);
		}

		public void Removeimageextension()
		{
			while (Hasimageextension())
				RemoveimageextensionAt(0);
		}

		public void Addimageextension(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "imageextension", newValue.ToString());
		}

		public void InsertimageextensionAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "imageextension", index, newValue.ToString());
		}

		public void ReplaceimageextensionAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "imageextension", index, newValue.ToString());
		}
		#endregion // imageextension accessor methods

		#region imageextension collection
        public imageextensionCollection	Myimageextensions = new imageextensionCollection( );

        public class imageextensionCollection: IEnumerable
        {
            tilelayerType parent;
            public tilelayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public imageextensionEnumerator GetEnumerator() 
			{
				return new imageextensionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class imageextensionEnumerator: IEnumerator 
        {
			int nIndex;
			tilelayerType parent;
			public imageextensionEnumerator(tilelayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.imageextensionCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetimageextensionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // imageextension collection

		#region distanceabovesurface Documentation
		public static string GetdistanceabovesurfaceAnnoDocumentation()
		{
			return "";		
		}
		public static string GetdistanceabovesurfaceDefault()
		{
			return "0";		
		}
		#endregion

		#region distanceabovesurface accessor methods
		public static int GetdistanceabovesurfaceMinCount()
		{
			return 0;
		}

		public static int distanceabovesurfaceMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetdistanceabovesurfaceMaxCount()
		{
			return 1;
		}

		public static int distanceabovesurfaceMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetdistanceabovesurfaceCount()
		{
			return DomChildCount(NodeType.Attribute, "", "distanceabovesurface");
		}

		public int distanceabovesurfaceCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "distanceabovesurface");
			}
		}

		public bool Hasdistanceabovesurface()
		{
			return HasDomChild(NodeType.Attribute, "", "distanceabovesurface");
		}

		public SchemaInt Newdistanceabovesurface()
		{
			return new SchemaInt();
		}

		public SchemaInt GetdistanceabovesurfaceAt(int index)
		{
			return new SchemaInt(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "distanceabovesurface", index)));
		}

		public XmlNode GetStartingdistanceabovesurfaceCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "distanceabovesurface" );
		}

		public XmlNode GetAdvanceddistanceabovesurfaceCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "distanceabovesurface", curNode );
		}

		public SchemaInt GetdistanceabovesurfaceValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaInt( curNode.Value );
		}


		public SchemaInt Getdistanceabovesurface()
		{
			return GetdistanceabovesurfaceAt(0);
		}

		public SchemaInt distanceabovesurface
		{
			get
			{
				return GetdistanceabovesurfaceAt(0);
			}
		}

		public void RemovedistanceabovesurfaceAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "distanceabovesurface", index);
		}

		public void Removedistanceabovesurface()
		{
			while (Hasdistanceabovesurface())
				RemovedistanceabovesurfaceAt(0);
		}

		public void Adddistanceabovesurface(SchemaInt newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "distanceabovesurface", newValue.ToString());
		}

		public void InsertdistanceabovesurfaceAt(SchemaInt newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "distanceabovesurface", index, newValue.ToString());
		}

		public void ReplacedistanceabovesurfaceAt(SchemaInt newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "distanceabovesurface", index, newValue.ToString());
		}
		#endregion // distanceabovesurface accessor methods

		#region distanceabovesurface collection
        public distanceabovesurfaceCollection	Mydistanceabovesurfaces = new distanceabovesurfaceCollection( );

        public class distanceabovesurfaceCollection: IEnumerable
        {
            tilelayerType parent;
            public tilelayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public distanceabovesurfaceEnumerator GetEnumerator() 
			{
				return new distanceabovesurfaceEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class distanceabovesurfaceEnumerator: IEnumerator 
        {
			int nIndex;
			tilelayerType parent;
			public distanceabovesurfaceEnumerator(tilelayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.distanceabovesurfaceCount );
			}
			public SchemaInt  Current 
			{
				get 
				{
					return(parent.GetdistanceabovesurfaceAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // distanceabovesurface collection

		#region boundingbox Documentation
		public static string GetboundingboxAnnoDocumentation()
		{
			return "";		
		}
		public static string GetboundingboxDefault()
		{
			return "";		
		}
		#endregion

		#region boundingbox accessor methods
		public static int GetboundingboxMinCount()
		{
			return 1;
		}

		public static int boundingboxMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetboundingboxMaxCount()
		{
			return 1;
		}

		public static int boundingboxMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetboundingboxCount()
		{
			return DomChildCount(NodeType.Element, "", "boundingbox");
		}

		public int boundingboxCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "boundingbox");
			}
		}

		public bool Hasboundingbox()
		{
			return HasDomChild(NodeType.Element, "", "boundingbox");
		}

		public boundingboxType Newboundingbox()
		{
			return new boundingboxType(domNode.OwnerDocument.CreateElement("boundingbox", ""));
		}

		public boundingboxType GetboundingboxAt(int index)
		{
			return new boundingboxType(GetDomChildAt(NodeType.Element, "", "boundingbox", index));
		}

		public XmlNode GetStartingboundingboxCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "boundingbox" );
		}

		public XmlNode GetAdvancedboundingboxCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "boundingbox", curNode );
		}

		public boundingboxType GetboundingboxValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new boundingboxType( curNode );
		}


		public boundingboxType Getboundingbox()
		{
			return GetboundingboxAt(0);
		}

		public boundingboxType boundingbox
		{
			get
			{
				return GetboundingboxAt(0);
			}
		}

		public void RemoveboundingboxAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "boundingbox", index);
		}

		public void Removeboundingbox()
		{
			while (Hasboundingbox())
				RemoveboundingboxAt(0);
		}

		public void Addboundingbox(boundingboxType newValue)
		{
			AppendDomElement("", "boundingbox", newValue);
		}

		public void InsertboundingboxAt(boundingboxType newValue, int index)
		{
			InsertDomElementAt("", "boundingbox", index, newValue);
		}

		public void ReplaceboundingboxAt(boundingboxType newValue, int index)
		{
			ReplaceDomElementAt("", "boundingbox", index, newValue);
		}
		#endregion // boundingbox accessor methods

		#region boundingbox collection
        public boundingboxCollection	Myboundingboxs = new boundingboxCollection( );

        public class boundingboxCollection: IEnumerable
        {
            tilelayerType parent;
            public tilelayerType Parent
			{
				set
				{
					parent = value;
				}
			}
			public boundingboxEnumerator GetEnumerator() 
			{
				return new boundingboxEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class boundingboxEnumerator: IEnumerator 
        {
			int nIndex;
			tilelayerType parent;
			public boundingboxEnumerator(tilelayerType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.boundingboxCount );
			}
			public boundingboxType  Current 
			{
				get 
				{
					return(parent.GetboundingboxAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // boundingbox collection

        private void SetCollectionParents()
        {
            Mynames.Parent = this; 
            Myurls.Parent = this; 
            Mydatasets.Parent = this; 
            Mylevelzerotilesizes.Parent = this; 
            Mytilepixelsizes.Parent = this; 
            Mylevelss.Parent = this; 
            Myimageextensions.Parent = this; 
            Mydistanceabovesurfaces.Parent = this; 
            Myboundingboxs.Parent = this; 
	}
}
}
