//
// builderdirectoriesType.cs
//
// This file was generated by XMLSpy 2006r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace dappleview
{
	public class builderdirectoriesType : Altova.Xml.Node
	{
		#region Documentation
		public static string GetAnnoDocumentation() { return ""; }
		#endregion

		#region Forward constructors

		public builderdirectoriesType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public builderdirectoriesType(XmlNode node) : base(node) { SetCollectionParents(); }
		public builderdirectoriesType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public builderdirectoriesType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "builderdirectory" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "builderdirectory", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new builderdirectoryType(DOMNode).AdjustPrefix();
			}
		}



		#region builderdirectory Documentation
		public static string GetbuilderdirectoryAnnoDocumentation()
		{
			return "";		
		}
		public static string GetbuilderdirectoryDefault()
		{
			return "";		
		}
		#endregion

		#region builderdirectory accessor methods
		public static int GetbuilderdirectoryMinCount()
		{
			return 0;
		}

		public static int builderdirectoryMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetbuilderdirectoryMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int builderdirectoryMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetbuilderdirectoryCount()
		{
			return DomChildCount(NodeType.Element, "", "builderdirectory");
		}

		public int builderdirectoryCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "builderdirectory");
			}
		}

		public bool Hasbuilderdirectory()
		{
			return HasDomChild(NodeType.Element, "", "builderdirectory");
		}

		public builderdirectoryType Newbuilderdirectory()
		{
			return new builderdirectoryType(domNode.OwnerDocument.CreateElement("builderdirectory", ""));
		}

		public builderdirectoryType GetbuilderdirectoryAt(int index)
		{
			return new builderdirectoryType(GetDomChildAt(NodeType.Element, "", "builderdirectory", index));
		}

		public XmlNode GetStartingbuilderdirectoryCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "builderdirectory" );
		}

		public XmlNode GetAdvancedbuilderdirectoryCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "builderdirectory", curNode );
		}

		public builderdirectoryType GetbuilderdirectoryValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new builderdirectoryType( curNode );
		}


		public builderdirectoryType Getbuilderdirectory()
		{
			return GetbuilderdirectoryAt(0);
		}

		public builderdirectoryType builderdirectory
		{
			get
			{
				return GetbuilderdirectoryAt(0);
			}
		}

		public void RemovebuilderdirectoryAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "builderdirectory", index);
		}

		public void Removebuilderdirectory()
		{
			while (Hasbuilderdirectory())
				RemovebuilderdirectoryAt(0);
		}

		public void Addbuilderdirectory(builderdirectoryType newValue)
		{
			AppendDomElement("", "builderdirectory", newValue);
		}

		public void InsertbuilderdirectoryAt(builderdirectoryType newValue, int index)
		{
			InsertDomElementAt("", "builderdirectory", index, newValue);
		}

		public void ReplacebuilderdirectoryAt(builderdirectoryType newValue, int index)
		{
			ReplaceDomElementAt("", "builderdirectory", index, newValue);
		}
		#endregion // builderdirectory accessor methods

		#region builderdirectory collection
        public builderdirectoryCollection	Mybuilderdirectorys = new builderdirectoryCollection( );

        public class builderdirectoryCollection: IEnumerable
        {
            builderdirectoriesType parent;
            public builderdirectoriesType Parent
			{
				set
				{
					parent = value;
				}
			}
			public builderdirectoryEnumerator GetEnumerator() 
			{
				return new builderdirectoryEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class builderdirectoryEnumerator: IEnumerator 
        {
			int nIndex;
			builderdirectoriesType parent;
			public builderdirectoryEnumerator(builderdirectoriesType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.builderdirectoryCount );
			}
			public builderdirectoryType  Current 
			{
				get 
				{
					return(parent.GetbuilderdirectoryAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // builderdirectory collection

        private void SetCollectionParents()
        {
            Mybuilderdirectorys.Parent = this; 
	}
}
}
