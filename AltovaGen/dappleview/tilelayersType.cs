//
// tilelayersType.cs
//
// This file was generated by XMLSpy 2007r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace dappleview
{
	public class tilelayersType : Altova.Xml.Node
	{
		#region Documentation
		public static string GetAnnoDocumentation() { return ""; }
		#endregion

		#region Forward constructors

		public tilelayersType() : base() { SetCollectionParents(); }

		public tilelayersType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public tilelayersType(XmlNode node) : base(node) { SetCollectionParents(); }
		public tilelayersType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public tilelayersType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "tilelayer" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "tilelayer", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new tilelayerType(DOMNode).AdjustPrefix();
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "tilelayers");
		}


		#region tilelayer Documentation
		public static string GettilelayerAnnoDocumentation()
		{
			return "";		
		}
		public static string GettilelayerDefault()
		{
			return "";		
		}
		#endregion

		#region tilelayer accessor methods
		public static int GettilelayerMinCount()
		{
			return 0;
		}

		public static int tilelayerMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GettilelayerMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int tilelayerMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GettilelayerCount()
		{
			return DomChildCount(NodeType.Element, "", "tilelayer");
		}

		public int tilelayerCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "tilelayer");
			}
		}

		public bool Hastilelayer()
		{
			return HasDomChild(NodeType.Element, "", "tilelayer");
		}

		public tilelayerType Newtilelayer()
		{
			return new tilelayerType(domNode.OwnerDocument.CreateElement("tilelayer", ""));
		}

		public tilelayerType GettilelayerAt(int index)
		{
			return new tilelayerType(GetDomChildAt(NodeType.Element, "", "tilelayer", index));
		}

		public XmlNode GetStartingtilelayerCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "tilelayer" );
		}

		public XmlNode GetAdvancedtilelayerCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "tilelayer", curNode );
		}

		public tilelayerType GettilelayerValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new tilelayerType( curNode );
		}


		public tilelayerType Gettilelayer()
		{
			return GettilelayerAt(0);
		}

		public tilelayerType tilelayer
		{
			get
			{
				return GettilelayerAt(0);
			}
		}

		public void RemovetilelayerAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "tilelayer", index);
		}

		public void Removetilelayer()
		{
			while (Hastilelayer())
				RemovetilelayerAt(0);
		}

		public XmlNode Addtilelayer(tilelayerType newValue)
		{
			return AppendDomElement("", "tilelayer", newValue);
		}

		public void InserttilelayerAt(tilelayerType newValue, int index)
		{
			InsertDomElementAt("", "tilelayer", index, newValue);
		}

		public void ReplacetilelayerAt(tilelayerType newValue, int index)
		{
			ReplaceDomElementAt("", "tilelayer", index, newValue);
		}
		#endregion // tilelayer accessor methods

		#region tilelayer collection
        public tilelayerCollection	Mytilelayers = new tilelayerCollection( );

        public class tilelayerCollection: IEnumerable
        {
            tilelayersType parent;
            public tilelayersType Parent
			{
				set
				{
					parent = value;
				}
			}
			public tilelayerEnumerator GetEnumerator() 
			{
				return new tilelayerEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class tilelayerEnumerator: IEnumerator 
        {
			int nIndex;
			tilelayersType parent;
			public tilelayerEnumerator(tilelayersType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.tilelayerCount );
			}
			public tilelayerType  Current 
			{
				get 
				{
					return(parent.GettilelayerAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // tilelayer collection

        private void SetCollectionParents()
        {
            Mytilelayers.Parent = this; 
	}
}
}
