//
// builderdirectoryType.cs
//
// This file was generated by XMLSpy 2007r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace dappleview
{
	public class builderdirectoryType : builderdirectoryBaseType
	{
		#region Documentation
		public static new string GetAnnoDocumentation() { return ""; }
		#endregion

		#region Forward constructors

		public builderdirectoryType() : base() { SetCollectionParents(); }

		public builderdirectoryType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public builderdirectoryType(XmlNode node) : base(node) { SetCollectionParents(); }
		public builderdirectoryType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public builderdirectoryType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "name" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "name", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "specialcontainer" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "specialcontainer", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "builderentry" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "builderentry", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new builderentryType(DOMNode).AdjustPrefix();
			}

			base.AdjustPrefix();
		}

		public new void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "builderdirectory");
		}


		#region name Documentation
		public static string GetnameAnnoDocumentation()
		{
			return "";		
		}
		public static string GetnameDefault()
		{
			return "";		
		}
		#endregion

		#region name accessor methods
		public static int GetnameMinCount()
		{
			return 1;
		}

		public static int nameMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetnameMaxCount()
		{
			return 1;
		}

		public static int nameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnameCount()
		{
			return DomChildCount(NodeType.Attribute, "", "name");
		}

		public int nameCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "name");
			}
		}

		public bool Hasname()
		{
			return HasDomChild(NodeType.Attribute, "", "name");
		}

		public SchemaString Newname()
		{
			return new SchemaString();
		}

		public SchemaString GetnameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "name", index)));
		}

		public XmlNode GetStartingnameCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "name" );
		}

		public XmlNode GetAdvancednameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "name", curNode );
		}

		public SchemaString GetnameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString Getname()
		{
			return GetnameAt(0);
		}

		public SchemaString name
		{
			get
			{
				return GetnameAt(0);
			}
		}

		public void RemovenameAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "name", index);
		}

		public void Removename()
		{
			RemovenameAt(0);
		}

		public XmlNode Addname(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "name", newValue.ToString());
			return null;
		}

		public void InsertnameAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "name", index, newValue.ToString());
		}

		public void ReplacenameAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "name", index, newValue.ToString());
		}
		#endregion // name accessor methods

		#region name collection
        public nameCollection	Mynames = new nameCollection( );

        public class nameCollection: IEnumerable
        {
            builderdirectoryType parent;
            public builderdirectoryType Parent
			{
				set
				{
					parent = value;
				}
			}
			public nameEnumerator GetEnumerator() 
			{
				return new nameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class nameEnumerator: IEnumerator 
        {
			int nIndex;
			builderdirectoryType parent;
			public nameEnumerator(builderdirectoryType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.nameCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetnameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // name collection

		#region specialcontainer Documentation
		public static string GetspecialcontainerAnnoDocumentation()
		{
			return "";		
		}
		public static string GetspecialcontainerDefault()
		{
			return "";		
		}
		#endregion

		#region specialcontainer accessor methods
		public static int GetspecialcontainerMinCount()
		{
			return 0;
		}

		public static int specialcontainerMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetspecialcontainerMaxCount()
		{
			return 1;
		}

		public static int specialcontainerMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetspecialcontainerCount()
		{
			return DomChildCount(NodeType.Attribute, "", "specialcontainer");
		}

		public int specialcontainerCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "specialcontainer");
			}
		}

		public bool Hasspecialcontainer()
		{
			return HasDomChild(NodeType.Attribute, "", "specialcontainer");
		}

		public SpecialDirectoryType Newspecialcontainer()
		{
			return new SpecialDirectoryType();
		}

		public SpecialDirectoryType GetspecialcontainerAt(int index)
		{
			return new SpecialDirectoryType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "specialcontainer", index)));
		}

		public XmlNode GetStartingspecialcontainerCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "specialcontainer" );
		}

		public XmlNode GetAdvancedspecialcontainerCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "specialcontainer", curNode );
		}

		public SpecialDirectoryType GetspecialcontainerValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SpecialDirectoryType( curNode.Value );
		}


		public SpecialDirectoryType Getspecialcontainer()
		{
			return GetspecialcontainerAt(0);
		}

		public SpecialDirectoryType specialcontainer
		{
			get
			{
				return GetspecialcontainerAt(0);
			}
		}

		public void RemovespecialcontainerAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "specialcontainer", index);
		}

		public void Removespecialcontainer()
		{
			RemovespecialcontainerAt(0);
		}

		public XmlNode Addspecialcontainer(SpecialDirectoryType newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "specialcontainer", newValue.ToString());
			return null;
		}

		public void InsertspecialcontainerAt(SpecialDirectoryType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "specialcontainer", index, newValue.ToString());
		}

		public void ReplacespecialcontainerAt(SpecialDirectoryType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "specialcontainer", index, newValue.ToString());
		}
		#endregion // specialcontainer accessor methods

		#region specialcontainer collection
        public specialcontainerCollection	Myspecialcontainers = new specialcontainerCollection( );

        public class specialcontainerCollection: IEnumerable
        {
            builderdirectoryType parent;
            public builderdirectoryType Parent
			{
				set
				{
					parent = value;
				}
			}
			public specialcontainerEnumerator GetEnumerator() 
			{
				return new specialcontainerEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class specialcontainerEnumerator: IEnumerator 
        {
			int nIndex;
			builderdirectoryType parent;
			public specialcontainerEnumerator(builderdirectoryType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.specialcontainerCount );
			}
			public SpecialDirectoryType  Current 
			{
				get 
				{
					return(parent.GetspecialcontainerAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // specialcontainer collection

		#region builderentry Documentation
		public static string GetbuilderentryAnnoDocumentation()
		{
			return "";		
		}
		public static string GetbuilderentryDefault()
		{
			return "";		
		}
		#endregion

		#region builderentry accessor methods
		public static int GetbuilderentryMinCount()
		{
			return 0;
		}

		public static int builderentryMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetbuilderentryMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int builderentryMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetbuilderentryCount()
		{
			return DomChildCount(NodeType.Element, "", "builderentry");
		}

		public int builderentryCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "builderentry");
			}
		}

		public bool Hasbuilderentry()
		{
			return HasDomChild(NodeType.Element, "", "builderentry");
		}

		public builderentryType Newbuilderentry()
		{
			return new builderentryType(domNode.OwnerDocument.CreateElement("builderentry", ""));
		}

		public builderentryType GetbuilderentryAt(int index)
		{
			return new builderentryType(GetDomChildAt(NodeType.Element, "", "builderentry", index));
		}

		public XmlNode GetStartingbuilderentryCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "builderentry" );
		}

		public XmlNode GetAdvancedbuilderentryCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "builderentry", curNode );
		}

		public builderentryType GetbuilderentryValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new builderentryType( curNode );
		}


		public builderentryType Getbuilderentry()
		{
			return GetbuilderentryAt(0);
		}

		public builderentryType builderentry
		{
			get
			{
				return GetbuilderentryAt(0);
			}
		}

		public void RemovebuilderentryAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "builderentry", index);
		}

		public void Removebuilderentry()
		{
			while (Hasbuilderentry())
				RemovebuilderentryAt(0);
		}

		public XmlNode Addbuilderentry(builderentryType newValue)
		{
			return AppendDomElement("", "builderentry", newValue);
		}

		public void InsertbuilderentryAt(builderentryType newValue, int index)
		{
			InsertDomElementAt("", "builderentry", index, newValue);
		}

		public void ReplacebuilderentryAt(builderentryType newValue, int index)
		{
			ReplaceDomElementAt("", "builderentry", index, newValue);
		}
		#endregion // builderentry accessor methods

		#region builderentry collection
        public builderentryCollection	Mybuilderentrys = new builderentryCollection( );

        public class builderentryCollection: IEnumerable
        {
            builderdirectoryType parent;
            public builderdirectoryType Parent
			{
				set
				{
					parent = value;
				}
			}
			public builderentryEnumerator GetEnumerator() 
			{
				return new builderentryEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class builderentryEnumerator: IEnumerator 
        {
			int nIndex;
			builderdirectoryType parent;
			public builderentryEnumerator(builderdirectoryType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.builderentryCount );
			}
			public builderentryType  Current 
			{
				get 
				{
					return(parent.GetbuilderentryAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // builderentry collection

        private void SetCollectionParents()
        {
            Mynames.Parent = this; 
            Myspecialcontainers.Parent = this; 
            Mybuilderentrys.Parent = this; 
	}
}
}
