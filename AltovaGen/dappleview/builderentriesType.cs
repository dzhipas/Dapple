//
// builderentriesType.cs
//
// This file was generated by XMLSpy 2006r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace dappleview
{
	public class builderentriesType : Altova.Xml.Node
	{
		#region Forward constructors

		public builderentriesType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public builderentriesType(XmlNode node) : base(node) { SetCollectionParents(); }
		public builderentriesType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public builderentriesType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "builderdirectory" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "builderdirectory", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new builderdirectoryType2(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "dapcatalog" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "dapcatalog", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new dapcatalogType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "wmscatalog" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "wmscatalog", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new wmscatalogType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "specialbuilder" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "specialbuilder", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new specialbuilderType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "localfilesystem" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "localfilesystem", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new localfilesystemType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "tileserver" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "tileserver", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new tileserverType(DOMNode).AdjustPrefix();
			}
		}



		#region builderdirectory accessor methods
		public static int GetbuilderdirectoryMinCount()
		{
			return 1;
		}

		public static int builderdirectoryMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetbuilderdirectoryMaxCount()
		{
			return 1;
		}

		public static int builderdirectoryMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetbuilderdirectoryCount()
		{
			return DomChildCount(NodeType.Element, "", "builderdirectory");
		}

		public int builderdirectoryCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "builderdirectory");
			}
		}

		public bool Hasbuilderdirectory()
		{
			return HasDomChild(NodeType.Element, "", "builderdirectory");
		}

		public builderdirectoryType2 Newbuilderdirectory()
		{
			return new builderdirectoryType2(domNode.OwnerDocument.CreateElement("builderdirectory", ""));
		}

		public builderdirectoryType2 GetbuilderdirectoryAt(int index)
		{
			return new builderdirectoryType2(GetDomChildAt(NodeType.Element, "", "builderdirectory", index));
		}

		public XmlNode GetStartingbuilderdirectoryCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "builderdirectory" );
		}

		public XmlNode GetAdvancedbuilderdirectoryCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "builderdirectory", curNode );
		}

		public builderdirectoryType2 GetbuilderdirectoryValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new builderdirectoryType2( curNode );
		}


		public builderdirectoryType2 Getbuilderdirectory()
		{
			return GetbuilderdirectoryAt(0);
		}

		public builderdirectoryType2 builderdirectory
		{
			get
			{
				return GetbuilderdirectoryAt(0);
			}
		}

		public void RemovebuilderdirectoryAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "builderdirectory", index);
		}

		public void Removebuilderdirectory()
		{
			while (Hasbuilderdirectory())
				RemovebuilderdirectoryAt(0);
		}

		public void Addbuilderdirectory(builderdirectoryType2 newValue)
		{
			AppendDomElement("", "builderdirectory", newValue);
		}

		public void InsertbuilderdirectoryAt(builderdirectoryType2 newValue, int index)
		{
			InsertDomElementAt("", "builderdirectory", index, newValue);
		}

		public void ReplacebuilderdirectoryAt(builderdirectoryType2 newValue, int index)
		{
			ReplaceDomElementAt("", "builderdirectory", index, newValue);
		}
		#endregion // builderdirectory accessor methods

		#region builderdirectory collection
        public builderdirectoryCollection	Mybuilderdirectorys = new builderdirectoryCollection( );

        public class builderdirectoryCollection: IEnumerable
        {
            builderentriesType parent;
            public builderentriesType Parent
			{
				set
				{
					parent = value;
				}
			}
			public builderdirectoryEnumerator GetEnumerator() 
			{
				return new builderdirectoryEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class builderdirectoryEnumerator: IEnumerator 
        {
			int nIndex;
			builderentriesType parent;
			public builderdirectoryEnumerator(builderentriesType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.builderdirectoryCount );
			}
			public builderdirectoryType2  Current 
			{
				get 
				{
					return(parent.GetbuilderdirectoryAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // builderdirectory collection

		#region dapcatalog accessor methods
		public static int GetdapcatalogMinCount()
		{
			return 1;
		}

		public static int dapcatalogMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetdapcatalogMaxCount()
		{
			return 1;
		}

		public static int dapcatalogMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetdapcatalogCount()
		{
			return DomChildCount(NodeType.Element, "", "dapcatalog");
		}

		public int dapcatalogCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "dapcatalog");
			}
		}

		public bool Hasdapcatalog()
		{
			return HasDomChild(NodeType.Element, "", "dapcatalog");
		}

		public dapcatalogType Newdapcatalog()
		{
			return new dapcatalogType(domNode.OwnerDocument.CreateElement("dapcatalog", ""));
		}

		public dapcatalogType GetdapcatalogAt(int index)
		{
			return new dapcatalogType(GetDomChildAt(NodeType.Element, "", "dapcatalog", index));
		}

		public XmlNode GetStartingdapcatalogCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "dapcatalog" );
		}

		public XmlNode GetAdvanceddapcatalogCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "dapcatalog", curNode );
		}

		public dapcatalogType GetdapcatalogValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new dapcatalogType( curNode );
		}


		public dapcatalogType Getdapcatalog()
		{
			return GetdapcatalogAt(0);
		}

		public dapcatalogType dapcatalog
		{
			get
			{
				return GetdapcatalogAt(0);
			}
		}

		public void RemovedapcatalogAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "dapcatalog", index);
		}

		public void Removedapcatalog()
		{
			while (Hasdapcatalog())
				RemovedapcatalogAt(0);
		}

		public void Adddapcatalog(dapcatalogType newValue)
		{
			AppendDomElement("", "dapcatalog", newValue);
		}

		public void InsertdapcatalogAt(dapcatalogType newValue, int index)
		{
			InsertDomElementAt("", "dapcatalog", index, newValue);
		}

		public void ReplacedapcatalogAt(dapcatalogType newValue, int index)
		{
			ReplaceDomElementAt("", "dapcatalog", index, newValue);
		}
		#endregion // dapcatalog accessor methods

		#region dapcatalog collection
        public dapcatalogCollection	Mydapcatalogs = new dapcatalogCollection( );

        public class dapcatalogCollection: IEnumerable
        {
            builderentriesType parent;
            public builderentriesType Parent
			{
				set
				{
					parent = value;
				}
			}
			public dapcatalogEnumerator GetEnumerator() 
			{
				return new dapcatalogEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class dapcatalogEnumerator: IEnumerator 
        {
			int nIndex;
			builderentriesType parent;
			public dapcatalogEnumerator(builderentriesType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.dapcatalogCount );
			}
			public dapcatalogType  Current 
			{
				get 
				{
					return(parent.GetdapcatalogAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // dapcatalog collection

		#region wmscatalog accessor methods
		public static int GetwmscatalogMinCount()
		{
			return 1;
		}

		public static int wmscatalogMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetwmscatalogMaxCount()
		{
			return 1;
		}

		public static int wmscatalogMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetwmscatalogCount()
		{
			return DomChildCount(NodeType.Element, "", "wmscatalog");
		}

		public int wmscatalogCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "wmscatalog");
			}
		}

		public bool Haswmscatalog()
		{
			return HasDomChild(NodeType.Element, "", "wmscatalog");
		}

		public wmscatalogType Newwmscatalog()
		{
			return new wmscatalogType(domNode.OwnerDocument.CreateElement("wmscatalog", ""));
		}

		public wmscatalogType GetwmscatalogAt(int index)
		{
			return new wmscatalogType(GetDomChildAt(NodeType.Element, "", "wmscatalog", index));
		}

		public XmlNode GetStartingwmscatalogCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "wmscatalog" );
		}

		public XmlNode GetAdvancedwmscatalogCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "wmscatalog", curNode );
		}

		public wmscatalogType GetwmscatalogValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new wmscatalogType( curNode );
		}


		public wmscatalogType Getwmscatalog()
		{
			return GetwmscatalogAt(0);
		}

		public wmscatalogType wmscatalog
		{
			get
			{
				return GetwmscatalogAt(0);
			}
		}

		public void RemovewmscatalogAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "wmscatalog", index);
		}

		public void Removewmscatalog()
		{
			while (Haswmscatalog())
				RemovewmscatalogAt(0);
		}

		public void Addwmscatalog(wmscatalogType newValue)
		{
			AppendDomElement("", "wmscatalog", newValue);
		}

		public void InsertwmscatalogAt(wmscatalogType newValue, int index)
		{
			InsertDomElementAt("", "wmscatalog", index, newValue);
		}

		public void ReplacewmscatalogAt(wmscatalogType newValue, int index)
		{
			ReplaceDomElementAt("", "wmscatalog", index, newValue);
		}
		#endregion // wmscatalog accessor methods

		#region wmscatalog collection
        public wmscatalogCollection	Mywmscatalogs = new wmscatalogCollection( );

        public class wmscatalogCollection: IEnumerable
        {
            builderentriesType parent;
            public builderentriesType Parent
			{
				set
				{
					parent = value;
				}
			}
			public wmscatalogEnumerator GetEnumerator() 
			{
				return new wmscatalogEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class wmscatalogEnumerator: IEnumerator 
        {
			int nIndex;
			builderentriesType parent;
			public wmscatalogEnumerator(builderentriesType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.wmscatalogCount );
			}
			public wmscatalogType  Current 
			{
				get 
				{
					return(parent.GetwmscatalogAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // wmscatalog collection

		#region specialbuilder accessor methods
		public static int GetspecialbuilderMinCount()
		{
			return 1;
		}

		public static int specialbuilderMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetspecialbuilderMaxCount()
		{
			return 1;
		}

		public static int specialbuilderMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetspecialbuilderCount()
		{
			return DomChildCount(NodeType.Element, "", "specialbuilder");
		}

		public int specialbuilderCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "specialbuilder");
			}
		}

		public bool Hasspecialbuilder()
		{
			return HasDomChild(NodeType.Element, "", "specialbuilder");
		}

		public specialbuilderType Newspecialbuilder()
		{
			return new specialbuilderType(domNode.OwnerDocument.CreateElement("specialbuilder", ""));
		}

		public specialbuilderType GetspecialbuilderAt(int index)
		{
			return new specialbuilderType(GetDomChildAt(NodeType.Element, "", "specialbuilder", index));
		}

		public XmlNode GetStartingspecialbuilderCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "specialbuilder" );
		}

		public XmlNode GetAdvancedspecialbuilderCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "specialbuilder", curNode );
		}

		public specialbuilderType GetspecialbuilderValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new specialbuilderType( curNode );
		}


		public specialbuilderType Getspecialbuilder()
		{
			return GetspecialbuilderAt(0);
		}

		public specialbuilderType specialbuilder
		{
			get
			{
				return GetspecialbuilderAt(0);
			}
		}

		public void RemovespecialbuilderAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "specialbuilder", index);
		}

		public void Removespecialbuilder()
		{
			while (Hasspecialbuilder())
				RemovespecialbuilderAt(0);
		}

		public void Addspecialbuilder(specialbuilderType newValue)
		{
			AppendDomElement("", "specialbuilder", newValue);
		}

		public void InsertspecialbuilderAt(specialbuilderType newValue, int index)
		{
			InsertDomElementAt("", "specialbuilder", index, newValue);
		}

		public void ReplacespecialbuilderAt(specialbuilderType newValue, int index)
		{
			ReplaceDomElementAt("", "specialbuilder", index, newValue);
		}
		#endregion // specialbuilder accessor methods

		#region specialbuilder collection
        public specialbuilderCollection	Myspecialbuilders = new specialbuilderCollection( );

        public class specialbuilderCollection: IEnumerable
        {
            builderentriesType parent;
            public builderentriesType Parent
			{
				set
				{
					parent = value;
				}
			}
			public specialbuilderEnumerator GetEnumerator() 
			{
				return new specialbuilderEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class specialbuilderEnumerator: IEnumerator 
        {
			int nIndex;
			builderentriesType parent;
			public specialbuilderEnumerator(builderentriesType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.specialbuilderCount );
			}
			public specialbuilderType  Current 
			{
				get 
				{
					return(parent.GetspecialbuilderAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // specialbuilder collection

		#region localfilesystem accessor methods
		public static int GetlocalfilesystemMinCount()
		{
			return 1;
		}

		public static int localfilesystemMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetlocalfilesystemMaxCount()
		{
			return 1;
		}

		public static int localfilesystemMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetlocalfilesystemCount()
		{
			return DomChildCount(NodeType.Element, "", "localfilesystem");
		}

		public int localfilesystemCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "localfilesystem");
			}
		}

		public bool Haslocalfilesystem()
		{
			return HasDomChild(NodeType.Element, "", "localfilesystem");
		}

		public localfilesystemType Newlocalfilesystem()
		{
			return new localfilesystemType(domNode.OwnerDocument.CreateElement("localfilesystem", ""));
		}

		public localfilesystemType GetlocalfilesystemAt(int index)
		{
			return new localfilesystemType(GetDomChildAt(NodeType.Element, "", "localfilesystem", index));
		}

		public XmlNode GetStartinglocalfilesystemCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "localfilesystem" );
		}

		public XmlNode GetAdvancedlocalfilesystemCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "localfilesystem", curNode );
		}

		public localfilesystemType GetlocalfilesystemValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new localfilesystemType( curNode );
		}


		public localfilesystemType Getlocalfilesystem()
		{
			return GetlocalfilesystemAt(0);
		}

		public localfilesystemType localfilesystem
		{
			get
			{
				return GetlocalfilesystemAt(0);
			}
		}

		public void RemovelocalfilesystemAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "localfilesystem", index);
		}

		public void Removelocalfilesystem()
		{
			while (Haslocalfilesystem())
				RemovelocalfilesystemAt(0);
		}

		public void Addlocalfilesystem(localfilesystemType newValue)
		{
			AppendDomElement("", "localfilesystem", newValue);
		}

		public void InsertlocalfilesystemAt(localfilesystemType newValue, int index)
		{
			InsertDomElementAt("", "localfilesystem", index, newValue);
		}

		public void ReplacelocalfilesystemAt(localfilesystemType newValue, int index)
		{
			ReplaceDomElementAt("", "localfilesystem", index, newValue);
		}
		#endregion // localfilesystem accessor methods

		#region localfilesystem collection
        public localfilesystemCollection	Mylocalfilesystems = new localfilesystemCollection( );

        public class localfilesystemCollection: IEnumerable
        {
            builderentriesType parent;
            public builderentriesType Parent
			{
				set
				{
					parent = value;
				}
			}
			public localfilesystemEnumerator GetEnumerator() 
			{
				return new localfilesystemEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class localfilesystemEnumerator: IEnumerator 
        {
			int nIndex;
			builderentriesType parent;
			public localfilesystemEnumerator(builderentriesType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.localfilesystemCount );
			}
			public localfilesystemType  Current 
			{
				get 
				{
					return(parent.GetlocalfilesystemAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // localfilesystem collection

		#region tileserver accessor methods
		public static int GettileserverMinCount()
		{
			return 1;
		}

		public static int tileserverMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GettileserverMaxCount()
		{
			return 1;
		}

		public static int tileserverMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GettileserverCount()
		{
			return DomChildCount(NodeType.Element, "", "tileserver");
		}

		public int tileserverCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "tileserver");
			}
		}

		public bool Hastileserver()
		{
			return HasDomChild(NodeType.Element, "", "tileserver");
		}

		public tileserverType Newtileserver()
		{
			return new tileserverType(domNode.OwnerDocument.CreateElement("tileserver", ""));
		}

		public tileserverType GettileserverAt(int index)
		{
			return new tileserverType(GetDomChildAt(NodeType.Element, "", "tileserver", index));
		}

		public XmlNode GetStartingtileserverCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "tileserver" );
		}

		public XmlNode GetAdvancedtileserverCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "tileserver", curNode );
		}

		public tileserverType GettileserverValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new tileserverType( curNode );
		}


		public tileserverType Gettileserver()
		{
			return GettileserverAt(0);
		}

		public tileserverType tileserver
		{
			get
			{
				return GettileserverAt(0);
			}
		}

		public void RemovetileserverAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "tileserver", index);
		}

		public void Removetileserver()
		{
			while (Hastileserver())
				RemovetileserverAt(0);
		}

		public void Addtileserver(tileserverType newValue)
		{
			AppendDomElement("", "tileserver", newValue);
		}

		public void InserttileserverAt(tileserverType newValue, int index)
		{
			InsertDomElementAt("", "tileserver", index, newValue);
		}

		public void ReplacetileserverAt(tileserverType newValue, int index)
		{
			ReplaceDomElementAt("", "tileserver", index, newValue);
		}
		#endregion // tileserver accessor methods

		#region tileserver collection
        public tileserverCollection	Mytileservers = new tileserverCollection( );

        public class tileserverCollection: IEnumerable
        {
            builderentriesType parent;
            public builderentriesType Parent
			{
				set
				{
					parent = value;
				}
			}
			public tileserverEnumerator GetEnumerator() 
			{
				return new tileserverEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class tileserverEnumerator: IEnumerator 
        {
			int nIndex;
			builderentriesType parent;
			public tileserverEnumerator(builderentriesType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.tileserverCount );
			}
			public tileserverType  Current 
			{
				get 
				{
					return(parent.GettileserverAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // tileserver collection

        private void SetCollectionParents()
        {
            Mybuilderdirectorys.Parent = this; 
            Mydapcatalogs.Parent = this; 
            Mywmscatalogs.Parent = this; 
            Myspecialbuilders.Parent = this; 
            Mylocalfilesystems.Parent = this; 
            Mytileservers.Parent = this; 
	}
}
}
