//
// tileserversetType.cs
//
// This file was generated by XMLSpy 2006r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace dappleview
{
	public class tileserversetType : Altova.Xml.Node
	{
		#region Documentation
		public static string GetAnnoDocumentation() { return ""; }
		#endregion

		#region Forward constructors

		public tileserversetType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public tileserversetType(XmlNode node) : base(node) { SetCollectionParents(); }
		public tileserversetType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public tileserversetType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "name" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "name", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "tilelayers" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "tilelayers", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new tilelayersType(DOMNode).AdjustPrefix();
			}
		}



		#region name Documentation
		public static string GetnameAnnoDocumentation()
		{
			return "";		
		}
		public static string GetnameDefault()
		{
			return "";		
		}
		#endregion

		#region name accessor methods
		public static int GetnameMinCount()
		{
			return 1;
		}

		public static int nameMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetnameMaxCount()
		{
			return 1;
		}

		public static int nameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnameCount()
		{
			return DomChildCount(NodeType.Attribute, "", "name");
		}

		public int nameCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "name");
			}
		}

		public bool Hasname()
		{
			return HasDomChild(NodeType.Attribute, "", "name");
		}

		public SchemaString Newname()
		{
			return new SchemaString();
		}

		public SchemaString GetnameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "name", index)));
		}

		public XmlNode GetStartingnameCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "name" );
		}

		public XmlNode GetAdvancednameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "name", curNode );
		}

		public SchemaString GetnameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString Getname()
		{
			return GetnameAt(0);
		}

		public SchemaString name
		{
			get
			{
				return GetnameAt(0);
			}
		}

		public void RemovenameAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "name", index);
		}

		public void Removename()
		{
			while (Hasname())
				RemovenameAt(0);
		}

		public void Addname(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "name", newValue.ToString());
		}

		public void InsertnameAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "name", index, newValue.ToString());
		}

		public void ReplacenameAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "name", index, newValue.ToString());
		}
		#endregion // name accessor methods

		#region name collection
        public nameCollection	Mynames = new nameCollection( );

        public class nameCollection: IEnumerable
        {
            tileserversetType parent;
            public tileserversetType Parent
			{
				set
				{
					parent = value;
				}
			}
			public nameEnumerator GetEnumerator() 
			{
				return new nameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class nameEnumerator: IEnumerator 
        {
			int nIndex;
			tileserversetType parent;
			public nameEnumerator(tileserversetType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.nameCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetnameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // name collection

		#region tilelayers Documentation
		public static string GettilelayersAnnoDocumentation()
		{
			return "";		
		}
		public static string GettilelayersDefault()
		{
			return "";		
		}
		#endregion

		#region tilelayers accessor methods
		public static int GettilelayersMinCount()
		{
			return 0;
		}

		public static int tilelayersMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GettilelayersMaxCount()
		{
			return 1;
		}

		public static int tilelayersMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GettilelayersCount()
		{
			return DomChildCount(NodeType.Element, "", "tilelayers");
		}

		public int tilelayersCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "tilelayers");
			}
		}

		public bool Hastilelayers()
		{
			return HasDomChild(NodeType.Element, "", "tilelayers");
		}

		public tilelayersType Newtilelayers()
		{
			return new tilelayersType(domNode.OwnerDocument.CreateElement("tilelayers", ""));
		}

		public tilelayersType GettilelayersAt(int index)
		{
			return new tilelayersType(GetDomChildAt(NodeType.Element, "", "tilelayers", index));
		}

		public XmlNode GetStartingtilelayersCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "tilelayers" );
		}

		public XmlNode GetAdvancedtilelayersCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "tilelayers", curNode );
		}

		public tilelayersType GettilelayersValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new tilelayersType( curNode );
		}


		public tilelayersType Gettilelayers()
		{
			return GettilelayersAt(0);
		}

		public tilelayersType tilelayers
		{
			get
			{
				return GettilelayersAt(0);
			}
		}

		public void RemovetilelayersAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "tilelayers", index);
		}

		public void Removetilelayers()
		{
			while (Hastilelayers())
				RemovetilelayersAt(0);
		}

		public void Addtilelayers(tilelayersType newValue)
		{
			AppendDomElement("", "tilelayers", newValue);
		}

		public void InserttilelayersAt(tilelayersType newValue, int index)
		{
			InsertDomElementAt("", "tilelayers", index, newValue);
		}

		public void ReplacetilelayersAt(tilelayersType newValue, int index)
		{
			ReplaceDomElementAt("", "tilelayers", index, newValue);
		}
		#endregion // tilelayers accessor methods

		#region tilelayers collection
        public tilelayersCollection	Mytilelayerss = new tilelayersCollection( );

        public class tilelayersCollection: IEnumerable
        {
            tileserversetType parent;
            public tileserversetType Parent
			{
				set
				{
					parent = value;
				}
			}
			public tilelayersEnumerator GetEnumerator() 
			{
				return new tilelayersEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class tilelayersEnumerator: IEnumerator 
        {
			int nIndex;
			tileserversetType parent;
			public tilelayersEnumerator(tileserversetType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.tilelayersCount );
			}
			public tilelayersType  Current 
			{
				get 
				{
					return(parent.GettilelayersAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // tilelayers collection

        private void SetCollectionParents()
        {
            Mynames.Parent = this; 
            Mytilelayerss.Parent = this; 
	}
}
}
