//
// boundingboxType.cs
//
// This file was generated by XMLSpy 2007r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace dappleview
{
	public class boundingboxType : Altova.Xml.Node
	{
		#region Documentation
		public static string GetAnnoDocumentation() { return ""; }
		#endregion

		#region Forward constructors

		public boundingboxType() : base() { SetCollectionParents(); }

		public boundingboxType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public boundingboxType(XmlNode node) : base(node) { SetCollectionParents(); }
		public boundingboxType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public boundingboxType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "minlat" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "minlat", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "maxlat" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "maxlat", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "minlon" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "minlon", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "maxlon" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "maxlon", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "boundingbox");
		}


		#region minlat Documentation
		public static string GetminlatAnnoDocumentation()
		{
			return "";		
		}
		public static string GetminlatDefault()
		{
			return "";		
		}
		#endregion

		#region minlat accessor methods
		public static int GetminlatMinCount()
		{
			return 1;
		}

		public static int minlatMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetminlatMaxCount()
		{
			return 1;
		}

		public static int minlatMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetminlatCount()
		{
			return DomChildCount(NodeType.Attribute, "", "minlat");
		}

		public int minlatCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "minlat");
			}
		}

		public bool Hasminlat()
		{
			return HasDomChild(NodeType.Attribute, "", "minlat");
		}

		public SchemaDouble Newminlat()
		{
			return new SchemaDouble();
		}

		public SchemaDouble GetminlatAt(int index)
		{
			return new SchemaDouble(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "minlat", index)));
		}

		public XmlNode GetStartingminlatCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "minlat" );
		}

		public XmlNode GetAdvancedminlatCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "minlat", curNode );
		}

		public SchemaDouble GetminlatValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDouble( curNode.Value );
		}


		public SchemaDouble Getminlat()
		{
			return GetminlatAt(0);
		}

		public SchemaDouble minlat
		{
			get
			{
				return GetminlatAt(0);
			}
		}

		public void RemoveminlatAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "minlat", index);
		}

		public void Removeminlat()
		{
			RemoveminlatAt(0);
		}

		public XmlNode Addminlat(SchemaDouble newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "minlat", newValue.ToString());
			return null;
		}

		public void InsertminlatAt(SchemaDouble newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "minlat", index, newValue.ToString());
		}

		public void ReplaceminlatAt(SchemaDouble newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "minlat", index, newValue.ToString());
		}
		#endregion // minlat accessor methods

		#region minlat collection
        public minlatCollection	Myminlats = new minlatCollection( );

        public class minlatCollection: IEnumerable
        {
            boundingboxType parent;
            public boundingboxType Parent
			{
				set
				{
					parent = value;
				}
			}
			public minlatEnumerator GetEnumerator() 
			{
				return new minlatEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class minlatEnumerator: IEnumerator 
        {
			int nIndex;
			boundingboxType parent;
			public minlatEnumerator(boundingboxType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.minlatCount );
			}
			public SchemaDouble  Current 
			{
				get 
				{
					return(parent.GetminlatAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // minlat collection

		#region maxlat Documentation
		public static string GetmaxlatAnnoDocumentation()
		{
			return "";		
		}
		public static string GetmaxlatDefault()
		{
			return "";		
		}
		#endregion

		#region maxlat accessor methods
		public static int GetmaxlatMinCount()
		{
			return 1;
		}

		public static int maxlatMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetmaxlatMaxCount()
		{
			return 1;
		}

		public static int maxlatMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetmaxlatCount()
		{
			return DomChildCount(NodeType.Attribute, "", "maxlat");
		}

		public int maxlatCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "maxlat");
			}
		}

		public bool Hasmaxlat()
		{
			return HasDomChild(NodeType.Attribute, "", "maxlat");
		}

		public SchemaDouble Newmaxlat()
		{
			return new SchemaDouble();
		}

		public SchemaDouble GetmaxlatAt(int index)
		{
			return new SchemaDouble(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "maxlat", index)));
		}

		public XmlNode GetStartingmaxlatCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "maxlat" );
		}

		public XmlNode GetAdvancedmaxlatCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "maxlat", curNode );
		}

		public SchemaDouble GetmaxlatValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDouble( curNode.Value );
		}


		public SchemaDouble Getmaxlat()
		{
			return GetmaxlatAt(0);
		}

		public SchemaDouble maxlat
		{
			get
			{
				return GetmaxlatAt(0);
			}
		}

		public void RemovemaxlatAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "maxlat", index);
		}

		public void Removemaxlat()
		{
			RemovemaxlatAt(0);
		}

		public XmlNode Addmaxlat(SchemaDouble newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "maxlat", newValue.ToString());
			return null;
		}

		public void InsertmaxlatAt(SchemaDouble newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "maxlat", index, newValue.ToString());
		}

		public void ReplacemaxlatAt(SchemaDouble newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "maxlat", index, newValue.ToString());
		}
		#endregion // maxlat accessor methods

		#region maxlat collection
        public maxlatCollection	Mymaxlats = new maxlatCollection( );

        public class maxlatCollection: IEnumerable
        {
            boundingboxType parent;
            public boundingboxType Parent
			{
				set
				{
					parent = value;
				}
			}
			public maxlatEnumerator GetEnumerator() 
			{
				return new maxlatEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class maxlatEnumerator: IEnumerator 
        {
			int nIndex;
			boundingboxType parent;
			public maxlatEnumerator(boundingboxType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.maxlatCount );
			}
			public SchemaDouble  Current 
			{
				get 
				{
					return(parent.GetmaxlatAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // maxlat collection

		#region minlon Documentation
		public static string GetminlonAnnoDocumentation()
		{
			return "";		
		}
		public static string GetminlonDefault()
		{
			return "";		
		}
		#endregion

		#region minlon accessor methods
		public static int GetminlonMinCount()
		{
			return 1;
		}

		public static int minlonMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetminlonMaxCount()
		{
			return 1;
		}

		public static int minlonMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetminlonCount()
		{
			return DomChildCount(NodeType.Attribute, "", "minlon");
		}

		public int minlonCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "minlon");
			}
		}

		public bool Hasminlon()
		{
			return HasDomChild(NodeType.Attribute, "", "minlon");
		}

		public SchemaDouble Newminlon()
		{
			return new SchemaDouble();
		}

		public SchemaDouble GetminlonAt(int index)
		{
			return new SchemaDouble(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "minlon", index)));
		}

		public XmlNode GetStartingminlonCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "minlon" );
		}

		public XmlNode GetAdvancedminlonCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "minlon", curNode );
		}

		public SchemaDouble GetminlonValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDouble( curNode.Value );
		}


		public SchemaDouble Getminlon()
		{
			return GetminlonAt(0);
		}

		public SchemaDouble minlon
		{
			get
			{
				return GetminlonAt(0);
			}
		}

		public void RemoveminlonAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "minlon", index);
		}

		public void Removeminlon()
		{
			RemoveminlonAt(0);
		}

		public XmlNode Addminlon(SchemaDouble newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "minlon", newValue.ToString());
			return null;
		}

		public void InsertminlonAt(SchemaDouble newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "minlon", index, newValue.ToString());
		}

		public void ReplaceminlonAt(SchemaDouble newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "minlon", index, newValue.ToString());
		}
		#endregion // minlon accessor methods

		#region minlon collection
        public minlonCollection	Myminlons = new minlonCollection( );

        public class minlonCollection: IEnumerable
        {
            boundingboxType parent;
            public boundingboxType Parent
			{
				set
				{
					parent = value;
				}
			}
			public minlonEnumerator GetEnumerator() 
			{
				return new minlonEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class minlonEnumerator: IEnumerator 
        {
			int nIndex;
			boundingboxType parent;
			public minlonEnumerator(boundingboxType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.minlonCount );
			}
			public SchemaDouble  Current 
			{
				get 
				{
					return(parent.GetminlonAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // minlon collection

		#region maxlon Documentation
		public static string GetmaxlonAnnoDocumentation()
		{
			return "";		
		}
		public static string GetmaxlonDefault()
		{
			return "";		
		}
		#endregion

		#region maxlon accessor methods
		public static int GetmaxlonMinCount()
		{
			return 1;
		}

		public static int maxlonMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetmaxlonMaxCount()
		{
			return 1;
		}

		public static int maxlonMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetmaxlonCount()
		{
			return DomChildCount(NodeType.Attribute, "", "maxlon");
		}

		public int maxlonCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "maxlon");
			}
		}

		public bool Hasmaxlon()
		{
			return HasDomChild(NodeType.Attribute, "", "maxlon");
		}

		public SchemaDouble Newmaxlon()
		{
			return new SchemaDouble();
		}

		public SchemaDouble GetmaxlonAt(int index)
		{
			return new SchemaDouble(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "maxlon", index)));
		}

		public XmlNode GetStartingmaxlonCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "maxlon" );
		}

		public XmlNode GetAdvancedmaxlonCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "maxlon", curNode );
		}

		public SchemaDouble GetmaxlonValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDouble( curNode.Value );
		}


		public SchemaDouble Getmaxlon()
		{
			return GetmaxlonAt(0);
		}

		public SchemaDouble maxlon
		{
			get
			{
				return GetmaxlonAt(0);
			}
		}

		public void RemovemaxlonAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "maxlon", index);
		}

		public void Removemaxlon()
		{
			RemovemaxlonAt(0);
		}

		public XmlNode Addmaxlon(SchemaDouble newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "maxlon", newValue.ToString());
			return null;
		}

		public void InsertmaxlonAt(SchemaDouble newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "maxlon", index, newValue.ToString());
		}

		public void ReplacemaxlonAt(SchemaDouble newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "maxlon", index, newValue.ToString());
		}
		#endregion // maxlon accessor methods

		#region maxlon collection
        public maxlonCollection	Mymaxlons = new maxlonCollection( );

        public class maxlonCollection: IEnumerable
        {
            boundingboxType parent;
            public boundingboxType Parent
			{
				set
				{
					parent = value;
				}
			}
			public maxlonEnumerator GetEnumerator() 
			{
				return new maxlonEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class maxlonEnumerator: IEnumerator 
        {
			int nIndex;
			boundingboxType parent;
			public maxlonEnumerator(boundingboxType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.maxlonCount );
			}
			public SchemaDouble  Current 
			{
				get 
				{
					return(parent.GetmaxlonAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // maxlon collection

        private void SetCollectionParents()
        {
            Myminlats.Parent = this; 
            Mymaxlats.Parent = this; 
            Myminlons.Parent = this; 
            Mymaxlons.Parent = this; 
	}
}
}
