//
// cameraorientationType.cs
//
// This file was generated by XMLSpy 2007r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace dappleview
{
	public class cameraorientationType : Altova.Xml.Node
	{
		#region Documentation
		public static string GetAnnoDocumentation() { return ""; }
		#endregion

		#region Forward constructors

		public cameraorientationType() : base() { SetCollectionParents(); }

		public cameraorientationType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public cameraorientationType(XmlNode node) : base(node) { SetCollectionParents(); }
		public cameraorientationType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public cameraorientationType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "lat" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "lat", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "lon" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "lon", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "heading" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "heading", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "tilt" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "tilt", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "altitude" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "altitude", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "cameraorientation");
		}


		#region lat Documentation
		public static string GetlatAnnoDocumentation()
		{
			return "";		
		}
		public static string GetlatDefault()
		{
			return "";		
		}
		#endregion

		#region lat accessor methods
		public static int GetlatMinCount()
		{
			return 1;
		}

		public static int latMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetlatMaxCount()
		{
			return 1;
		}

		public static int latMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetlatCount()
		{
			return DomChildCount(NodeType.Attribute, "", "lat");
		}

		public int latCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "lat");
			}
		}

		public bool Haslat()
		{
			return HasDomChild(NodeType.Attribute, "", "lat");
		}

		public SchemaDouble Newlat()
		{
			return new SchemaDouble();
		}

		public SchemaDouble GetlatAt(int index)
		{
			return new SchemaDouble(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "lat", index)));
		}

		public XmlNode GetStartinglatCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "lat" );
		}

		public XmlNode GetAdvancedlatCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "lat", curNode );
		}

		public SchemaDouble GetlatValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDouble( curNode.Value );
		}


		public SchemaDouble Getlat()
		{
			return GetlatAt(0);
		}

		public SchemaDouble lat
		{
			get
			{
				return GetlatAt(0);
			}
		}

		public void RemovelatAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "lat", index);
		}

		public void Removelat()
		{
			RemovelatAt(0);
		}

		public XmlNode Addlat(SchemaDouble newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "lat", newValue.ToString());
			return null;
		}

		public void InsertlatAt(SchemaDouble newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "lat", index, newValue.ToString());
		}

		public void ReplacelatAt(SchemaDouble newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "lat", index, newValue.ToString());
		}
		#endregion // lat accessor methods

		#region lat collection
        public latCollection	Mylats = new latCollection( );

        public class latCollection: IEnumerable
        {
            cameraorientationType parent;
            public cameraorientationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public latEnumerator GetEnumerator() 
			{
				return new latEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class latEnumerator: IEnumerator 
        {
			int nIndex;
			cameraorientationType parent;
			public latEnumerator(cameraorientationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.latCount );
			}
			public SchemaDouble  Current 
			{
				get 
				{
					return(parent.GetlatAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // lat collection

		#region lon Documentation
		public static string GetlonAnnoDocumentation()
		{
			return "";		
		}
		public static string GetlonDefault()
		{
			return "";		
		}
		#endregion

		#region lon accessor methods
		public static int GetlonMinCount()
		{
			return 1;
		}

		public static int lonMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetlonMaxCount()
		{
			return 1;
		}

		public static int lonMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetlonCount()
		{
			return DomChildCount(NodeType.Attribute, "", "lon");
		}

		public int lonCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "lon");
			}
		}

		public bool Haslon()
		{
			return HasDomChild(NodeType.Attribute, "", "lon");
		}

		public SchemaDouble Newlon()
		{
			return new SchemaDouble();
		}

		public SchemaDouble GetlonAt(int index)
		{
			return new SchemaDouble(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "lon", index)));
		}

		public XmlNode GetStartinglonCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "lon" );
		}

		public XmlNode GetAdvancedlonCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "lon", curNode );
		}

		public SchemaDouble GetlonValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDouble( curNode.Value );
		}


		public SchemaDouble Getlon()
		{
			return GetlonAt(0);
		}

		public SchemaDouble lon
		{
			get
			{
				return GetlonAt(0);
			}
		}

		public void RemovelonAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "lon", index);
		}

		public void Removelon()
		{
			RemovelonAt(0);
		}

		public XmlNode Addlon(SchemaDouble newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "lon", newValue.ToString());
			return null;
		}

		public void InsertlonAt(SchemaDouble newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "lon", index, newValue.ToString());
		}

		public void ReplacelonAt(SchemaDouble newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "lon", index, newValue.ToString());
		}
		#endregion // lon accessor methods

		#region lon collection
        public lonCollection	Mylons = new lonCollection( );

        public class lonCollection: IEnumerable
        {
            cameraorientationType parent;
            public cameraorientationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public lonEnumerator GetEnumerator() 
			{
				return new lonEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class lonEnumerator: IEnumerator 
        {
			int nIndex;
			cameraorientationType parent;
			public lonEnumerator(cameraorientationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.lonCount );
			}
			public SchemaDouble  Current 
			{
				get 
				{
					return(parent.GetlonAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // lon collection

		#region heading Documentation
		public static string GetheadingAnnoDocumentation()
		{
			return "";		
		}
		public static string GetheadingDefault()
		{
			return "";		
		}
		#endregion

		#region heading accessor methods
		public static int GetheadingMinCount()
		{
			return 1;
		}

		public static int headingMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetheadingMaxCount()
		{
			return 1;
		}

		public static int headingMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetheadingCount()
		{
			return DomChildCount(NodeType.Attribute, "", "heading");
		}

		public int headingCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "heading");
			}
		}

		public bool Hasheading()
		{
			return HasDomChild(NodeType.Attribute, "", "heading");
		}

		public SchemaDouble Newheading()
		{
			return new SchemaDouble();
		}

		public SchemaDouble GetheadingAt(int index)
		{
			return new SchemaDouble(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "heading", index)));
		}

		public XmlNode GetStartingheadingCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "heading" );
		}

		public XmlNode GetAdvancedheadingCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "heading", curNode );
		}

		public SchemaDouble GetheadingValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDouble( curNode.Value );
		}


		public SchemaDouble Getheading()
		{
			return GetheadingAt(0);
		}

		public SchemaDouble heading
		{
			get
			{
				return GetheadingAt(0);
			}
		}

		public void RemoveheadingAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "heading", index);
		}

		public void Removeheading()
		{
			RemoveheadingAt(0);
		}

		public XmlNode Addheading(SchemaDouble newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "heading", newValue.ToString());
			return null;
		}

		public void InsertheadingAt(SchemaDouble newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "heading", index, newValue.ToString());
		}

		public void ReplaceheadingAt(SchemaDouble newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "heading", index, newValue.ToString());
		}
		#endregion // heading accessor methods

		#region heading collection
        public headingCollection	Myheadings = new headingCollection( );

        public class headingCollection: IEnumerable
        {
            cameraorientationType parent;
            public cameraorientationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public headingEnumerator GetEnumerator() 
			{
				return new headingEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class headingEnumerator: IEnumerator 
        {
			int nIndex;
			cameraorientationType parent;
			public headingEnumerator(cameraorientationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.headingCount );
			}
			public SchemaDouble  Current 
			{
				get 
				{
					return(parent.GetheadingAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // heading collection

		#region tilt Documentation
		public static string GettiltAnnoDocumentation()
		{
			return "";		
		}
		public static string GettiltDefault()
		{
			return "";		
		}
		#endregion

		#region tilt accessor methods
		public static int GettiltMinCount()
		{
			return 1;
		}

		public static int tiltMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GettiltMaxCount()
		{
			return 1;
		}

		public static int tiltMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GettiltCount()
		{
			return DomChildCount(NodeType.Attribute, "", "tilt");
		}

		public int tiltCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "tilt");
			}
		}

		public bool Hastilt()
		{
			return HasDomChild(NodeType.Attribute, "", "tilt");
		}

		public SchemaDouble Newtilt()
		{
			return new SchemaDouble();
		}

		public SchemaDouble GettiltAt(int index)
		{
			return new SchemaDouble(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "tilt", index)));
		}

		public XmlNode GetStartingtiltCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "tilt" );
		}

		public XmlNode GetAdvancedtiltCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "tilt", curNode );
		}

		public SchemaDouble GettiltValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDouble( curNode.Value );
		}


		public SchemaDouble Gettilt()
		{
			return GettiltAt(0);
		}

		public SchemaDouble tilt
		{
			get
			{
				return GettiltAt(0);
			}
		}

		public void RemovetiltAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "tilt", index);
		}

		public void Removetilt()
		{
			RemovetiltAt(0);
		}

		public XmlNode Addtilt(SchemaDouble newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "tilt", newValue.ToString());
			return null;
		}

		public void InserttiltAt(SchemaDouble newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "tilt", index, newValue.ToString());
		}

		public void ReplacetiltAt(SchemaDouble newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "tilt", index, newValue.ToString());
		}
		#endregion // tilt accessor methods

		#region tilt collection
        public tiltCollection	Mytilts = new tiltCollection( );

        public class tiltCollection: IEnumerable
        {
            cameraorientationType parent;
            public cameraorientationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public tiltEnumerator GetEnumerator() 
			{
				return new tiltEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class tiltEnumerator: IEnumerator 
        {
			int nIndex;
			cameraorientationType parent;
			public tiltEnumerator(cameraorientationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.tiltCount );
			}
			public SchemaDouble  Current 
			{
				get 
				{
					return(parent.GettiltAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // tilt collection

		#region altitude Documentation
		public static string GetaltitudeAnnoDocumentation()
		{
			return "";		
		}
		public static string GetaltitudeDefault()
		{
			return "";		
		}
		#endregion

		#region altitude accessor methods
		public static int GetaltitudeMinCount()
		{
			return 1;
		}

		public static int altitudeMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetaltitudeMaxCount()
		{
			return 1;
		}

		public static int altitudeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetaltitudeCount()
		{
			return DomChildCount(NodeType.Attribute, "", "altitude");
		}

		public int altitudeCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "altitude");
			}
		}

		public bool Hasaltitude()
		{
			return HasDomChild(NodeType.Attribute, "", "altitude");
		}

		public SchemaDouble Newaltitude()
		{
			return new SchemaDouble();
		}

		public SchemaDouble GetaltitudeAt(int index)
		{
			return new SchemaDouble(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "altitude", index)));
		}

		public XmlNode GetStartingaltitudeCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "altitude" );
		}

		public XmlNode GetAdvancedaltitudeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "altitude", curNode );
		}

		public SchemaDouble GetaltitudeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDouble( curNode.Value );
		}


		public SchemaDouble Getaltitude()
		{
			return GetaltitudeAt(0);
		}

		public SchemaDouble altitude
		{
			get
			{
				return GetaltitudeAt(0);
			}
		}

		public void RemovealtitudeAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "altitude", index);
		}

		public void Removealtitude()
		{
			RemovealtitudeAt(0);
		}

		public XmlNode Addaltitude(SchemaDouble newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "altitude", newValue.ToString());
			return null;
		}

		public void InsertaltitudeAt(SchemaDouble newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "altitude", index, newValue.ToString());
		}

		public void ReplacealtitudeAt(SchemaDouble newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "altitude", index, newValue.ToString());
		}
		#endregion // altitude accessor methods

		#region altitude collection
        public altitudeCollection	Myaltitudes = new altitudeCollection( );

        public class altitudeCollection: IEnumerable
        {
            cameraorientationType parent;
            public cameraorientationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public altitudeEnumerator GetEnumerator() 
			{
				return new altitudeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class altitudeEnumerator: IEnumerator 
        {
			int nIndex;
			cameraorientationType parent;
			public altitudeEnumerator(cameraorientationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.altitudeCount );
			}
			public SchemaDouble  Current 
			{
				get 
				{
					return(parent.GetaltitudeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // altitude collection

        private void SetCollectionParents()
        {
            Mylats.Parent = this; 
            Mylons.Parent = this; 
            Myheadings.Parent = this; 
            Mytilts.Parent = this; 
            Myaltitudes.Parent = this; 
	}
}
}
