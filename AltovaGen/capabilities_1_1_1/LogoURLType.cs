//
// LogoURLType.cs
//
// This file was generated by XMLSpy 2006r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace capabilities_1_1_1
{
	public class LogoURLType : Altova.Xml.Node
	{
		#region Forward constructors

		public LogoURLType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public LogoURLType(XmlNode node) : base(node) { SetCollectionParents(); }
		public LogoURLType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public LogoURLType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "width" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "width", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "height" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "height", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Format" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Format", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new FormatType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "OnlineResource" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "OnlineResource", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new OnlineResourceType(DOMNode).AdjustPrefix();
			}
		}



		#region width accessor methods
		public static int GetwidthMinCount()
		{
			return 1;
		}

		public static int widthMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetwidthMaxCount()
		{
			return 1;
		}

		public static int widthMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetwidthCount()
		{
			return DomChildCount(NodeType.Attribute, "", "width");
		}

		public int widthCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "width");
			}
		}

		public bool Haswidth()
		{
			return HasDomChild(NodeType.Attribute, "", "width");
		}

		public SchemaString Newwidth()
		{
			return new SchemaString();
		}

		public SchemaString GetwidthAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "width", index)));
		}

		public XmlNode GetStartingwidthCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "width" );
		}

		public XmlNode GetAdvancedwidthCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "width", curNode );
		}

		public SchemaString GetwidthValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString Getwidth()
		{
			return GetwidthAt(0);
		}

		public SchemaString width
		{
			get
			{
				return GetwidthAt(0);
			}
		}

		public void RemovewidthAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "width", index);
		}

		public void Removewidth()
		{
			while (Haswidth())
				RemovewidthAt(0);
		}

		public void Addwidth(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "width", newValue.ToString());
		}

		public void InsertwidthAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "width", index, newValue.ToString());
		}

		public void ReplacewidthAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "width", index, newValue.ToString());
		}
		#endregion // width accessor methods

		#region width collection
        public widthCollection	Mywidths = new widthCollection( );

        public class widthCollection: IEnumerable
        {
            LogoURLType parent;
            public LogoURLType Parent
			{
				set
				{
					parent = value;
				}
			}
			public widthEnumerator GetEnumerator() 
			{
				return new widthEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class widthEnumerator: IEnumerator 
        {
			int nIndex;
			LogoURLType parent;
			public widthEnumerator(LogoURLType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.widthCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetwidthAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // width collection

		#region height accessor methods
		public static int GetheightMinCount()
		{
			return 1;
		}

		public static int heightMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetheightMaxCount()
		{
			return 1;
		}

		public static int heightMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetheightCount()
		{
			return DomChildCount(NodeType.Attribute, "", "height");
		}

		public int heightCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "height");
			}
		}

		public bool Hasheight()
		{
			return HasDomChild(NodeType.Attribute, "", "height");
		}

		public SchemaString Newheight()
		{
			return new SchemaString();
		}

		public SchemaString GetheightAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "height", index)));
		}

		public XmlNode GetStartingheightCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "height" );
		}

		public XmlNode GetAdvancedheightCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "height", curNode );
		}

		public SchemaString GetheightValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString Getheight()
		{
			return GetheightAt(0);
		}

		public SchemaString height
		{
			get
			{
				return GetheightAt(0);
			}
		}

		public void RemoveheightAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "height", index);
		}

		public void Removeheight()
		{
			while (Hasheight())
				RemoveheightAt(0);
		}

		public void Addheight(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "height", newValue.ToString());
		}

		public void InsertheightAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "height", index, newValue.ToString());
		}

		public void ReplaceheightAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "height", index, newValue.ToString());
		}
		#endregion // height accessor methods

		#region height collection
        public heightCollection	Myheights = new heightCollection( );

        public class heightCollection: IEnumerable
        {
            LogoURLType parent;
            public LogoURLType Parent
			{
				set
				{
					parent = value;
				}
			}
			public heightEnumerator GetEnumerator() 
			{
				return new heightEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class heightEnumerator: IEnumerator 
        {
			int nIndex;
			LogoURLType parent;
			public heightEnumerator(LogoURLType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.heightCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetheightAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // height collection

		#region Format accessor methods
		public static int GetFormatMinCount()
		{
			return 1;
		}

		public static int FormatMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetFormatMaxCount()
		{
			return 1;
		}

		public static int FormatMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetFormatCount()
		{
			return DomChildCount(NodeType.Element, "", "Format");
		}

		public int FormatCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Format");
			}
		}

		public bool HasFormat()
		{
			return HasDomChild(NodeType.Element, "", "Format");
		}

		public FormatType NewFormat()
		{
			return new FormatType(domNode.OwnerDocument.CreateElement("Format", ""));
		}

		public FormatType GetFormatAt(int index)
		{
			return new FormatType(GetDomChildAt(NodeType.Element, "", "Format", index));
		}

		public XmlNode GetStartingFormatCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Format" );
		}

		public XmlNode GetAdvancedFormatCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Format", curNode );
		}

		public FormatType GetFormatValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new FormatType( curNode );
		}


		public FormatType GetFormat()
		{
			return GetFormatAt(0);
		}

		public FormatType Format
		{
			get
			{
				return GetFormatAt(0);
			}
		}

		public void RemoveFormatAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Format", index);
		}

		public void RemoveFormat()
		{
			while (HasFormat())
				RemoveFormatAt(0);
		}

		public void AddFormat(FormatType newValue)
		{
			AppendDomElement("", "Format", newValue);
		}

		public void InsertFormatAt(FormatType newValue, int index)
		{
			InsertDomElementAt("", "Format", index, newValue);
		}

		public void ReplaceFormatAt(FormatType newValue, int index)
		{
			ReplaceDomElementAt("", "Format", index, newValue);
		}
		#endregion // Format accessor methods

		#region Format collection
        public FormatCollection	MyFormats = new FormatCollection( );

        public class FormatCollection: IEnumerable
        {
            LogoURLType parent;
            public LogoURLType Parent
			{
				set
				{
					parent = value;
				}
			}
			public FormatEnumerator GetEnumerator() 
			{
				return new FormatEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class FormatEnumerator: IEnumerator 
        {
			int nIndex;
			LogoURLType parent;
			public FormatEnumerator(LogoURLType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.FormatCount );
			}
			public FormatType  Current 
			{
				get 
				{
					return(parent.GetFormatAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Format collection

		#region OnlineResource accessor methods
		public static int GetOnlineResourceMinCount()
		{
			return 1;
		}

		public static int OnlineResourceMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetOnlineResourceMaxCount()
		{
			return 1;
		}

		public static int OnlineResourceMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetOnlineResourceCount()
		{
			return DomChildCount(NodeType.Element, "", "OnlineResource");
		}

		public int OnlineResourceCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "OnlineResource");
			}
		}

		public bool HasOnlineResource()
		{
			return HasDomChild(NodeType.Element, "", "OnlineResource");
		}

		public OnlineResourceType NewOnlineResource()
		{
			return new OnlineResourceType(domNode.OwnerDocument.CreateElement("OnlineResource", ""));
		}

		public OnlineResourceType GetOnlineResourceAt(int index)
		{
			return new OnlineResourceType(GetDomChildAt(NodeType.Element, "", "OnlineResource", index));
		}

		public XmlNode GetStartingOnlineResourceCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "OnlineResource" );
		}

		public XmlNode GetAdvancedOnlineResourceCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "OnlineResource", curNode );
		}

		public OnlineResourceType GetOnlineResourceValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new OnlineResourceType( curNode );
		}


		public OnlineResourceType GetOnlineResource()
		{
			return GetOnlineResourceAt(0);
		}

		public OnlineResourceType OnlineResource
		{
			get
			{
				return GetOnlineResourceAt(0);
			}
		}

		public void RemoveOnlineResourceAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "OnlineResource", index);
		}

		public void RemoveOnlineResource()
		{
			while (HasOnlineResource())
				RemoveOnlineResourceAt(0);
		}

		public void AddOnlineResource(OnlineResourceType newValue)
		{
			AppendDomElement("", "OnlineResource", newValue);
		}

		public void InsertOnlineResourceAt(OnlineResourceType newValue, int index)
		{
			InsertDomElementAt("", "OnlineResource", index, newValue);
		}

		public void ReplaceOnlineResourceAt(OnlineResourceType newValue, int index)
		{
			ReplaceDomElementAt("", "OnlineResource", index, newValue);
		}
		#endregion // OnlineResource accessor methods

		#region OnlineResource collection
        public OnlineResourceCollection	MyOnlineResources = new OnlineResourceCollection( );

        public class OnlineResourceCollection: IEnumerable
        {
            LogoURLType parent;
            public LogoURLType Parent
			{
				set
				{
					parent = value;
				}
			}
			public OnlineResourceEnumerator GetEnumerator() 
			{
				return new OnlineResourceEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class OnlineResourceEnumerator: IEnumerator 
        {
			int nIndex;
			LogoURLType parent;
			public OnlineResourceEnumerator(LogoURLType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.OnlineResourceCount );
			}
			public OnlineResourceType  Current 
			{
				get 
				{
					return(parent.GetOnlineResourceAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // OnlineResource collection

        private void SetCollectionParents()
        {
            Mywidths.Parent = this; 
            Myheights.Parent = this; 
            MyFormats.Parent = this; 
            MyOnlineResources.Parent = this; 
	}
}
}
