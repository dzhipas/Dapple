//
// RequestType.cs
//
// This file was generated by XMLSpy 2006r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace capabilities_1_1_1
{
	public class RequestType : Altova.Xml.Node
	{
		#region Forward constructors

		public RequestType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public RequestType(XmlNode node) : base(node) { SetCollectionParents(); }
		public RequestType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public RequestType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "GetCapabilities" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "GetCapabilities", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new GetCapabilitiesType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "GetMap" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "GetMap", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new GetMapType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "GetFeatureInfo" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "GetFeatureInfo", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new GetFeatureInfoType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "DescribeLayer" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "DescribeLayer", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new DescribeLayerType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "GetLegendGraphic" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "GetLegendGraphic", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new GetLegendGraphicType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "GetStyles" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "GetStyles", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new GetStylesType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "PutStyles" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "PutStyles", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new PutStylesType(DOMNode).AdjustPrefix();
			}
		}



		#region GetCapabilities accessor methods
		public static int GetGetCapabilitiesMinCount()
		{
			return 1;
		}

		public static int GetCapabilitiesMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetGetCapabilitiesMaxCount()
		{
			return 1;
		}

		public static int GetCapabilitiesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGetCapabilitiesCount()
		{
			return DomChildCount(NodeType.Element, "", "GetCapabilities");
		}

		public int GetCapabilitiesCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "GetCapabilities");
			}
		}

		public bool HasGetCapabilities()
		{
			return HasDomChild(NodeType.Element, "", "GetCapabilities");
		}

		public GetCapabilitiesType NewGetCapabilities()
		{
			return new GetCapabilitiesType(domNode.OwnerDocument.CreateElement("GetCapabilities", ""));
		}

		public GetCapabilitiesType GetGetCapabilitiesAt(int index)
		{
			return new GetCapabilitiesType(GetDomChildAt(NodeType.Element, "", "GetCapabilities", index));
		}

		public XmlNode GetStartingGetCapabilitiesCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "GetCapabilities" );
		}

		public XmlNode GetAdvancedGetCapabilitiesCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "GetCapabilities", curNode );
		}

		public GetCapabilitiesType GetGetCapabilitiesValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new GetCapabilitiesType( curNode );
		}


		public GetCapabilitiesType GetGetCapabilities()
		{
			return GetGetCapabilitiesAt(0);
		}

		public GetCapabilitiesType GetCapabilities
		{
			get
			{
				return GetGetCapabilitiesAt(0);
			}
		}

		public void RemoveGetCapabilitiesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "GetCapabilities", index);
		}

		public void RemoveGetCapabilities()
		{
			while (HasGetCapabilities())
				RemoveGetCapabilitiesAt(0);
		}

		public void AddGetCapabilities(GetCapabilitiesType newValue)
		{
			AppendDomElement("", "GetCapabilities", newValue);
		}

		public void InsertGetCapabilitiesAt(GetCapabilitiesType newValue, int index)
		{
			InsertDomElementAt("", "GetCapabilities", index, newValue);
		}

		public void ReplaceGetCapabilitiesAt(GetCapabilitiesType newValue, int index)
		{
			ReplaceDomElementAt("", "GetCapabilities", index, newValue);
		}
		#endregion // GetCapabilities accessor methods

		#region GetCapabilities collection
        public GetCapabilitiesCollection	MyGetCapabilitiess = new GetCapabilitiesCollection( );

        public class GetCapabilitiesCollection: IEnumerable
        {
            RequestType parent;
            public RequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public GetCapabilitiesEnumerator GetEnumerator() 
			{
				return new GetCapabilitiesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class GetCapabilitiesEnumerator: IEnumerator 
        {
			int nIndex;
			RequestType parent;
			public GetCapabilitiesEnumerator(RequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.GetCapabilitiesCount );
			}
			public GetCapabilitiesType  Current 
			{
				get 
				{
					return(parent.GetGetCapabilitiesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // GetCapabilities collection

		#region GetMap accessor methods
		public static int GetGetMapMinCount()
		{
			return 1;
		}

		public static int GetMapMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetGetMapMaxCount()
		{
			return 1;
		}

		public static int GetMapMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGetMapCount()
		{
			return DomChildCount(NodeType.Element, "", "GetMap");
		}

		public int GetMapCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "GetMap");
			}
		}

		public bool HasGetMap()
		{
			return HasDomChild(NodeType.Element, "", "GetMap");
		}

		public GetMapType NewGetMap()
		{
			return new GetMapType(domNode.OwnerDocument.CreateElement("GetMap", ""));
		}

		public GetMapType GetGetMapAt(int index)
		{
			return new GetMapType(GetDomChildAt(NodeType.Element, "", "GetMap", index));
		}

		public XmlNode GetStartingGetMapCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "GetMap" );
		}

		public XmlNode GetAdvancedGetMapCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "GetMap", curNode );
		}

		public GetMapType GetGetMapValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new GetMapType( curNode );
		}


		public GetMapType GetGetMap()
		{
			return GetGetMapAt(0);
		}

		public GetMapType GetMap
		{
			get
			{
				return GetGetMapAt(0);
			}
		}

		public void RemoveGetMapAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "GetMap", index);
		}

		public void RemoveGetMap()
		{
			while (HasGetMap())
				RemoveGetMapAt(0);
		}

		public void AddGetMap(GetMapType newValue)
		{
			AppendDomElement("", "GetMap", newValue);
		}

		public void InsertGetMapAt(GetMapType newValue, int index)
		{
			InsertDomElementAt("", "GetMap", index, newValue);
		}

		public void ReplaceGetMapAt(GetMapType newValue, int index)
		{
			ReplaceDomElementAt("", "GetMap", index, newValue);
		}
		#endregion // GetMap accessor methods

		#region GetMap collection
        public GetMapCollection	MyGetMaps = new GetMapCollection( );

        public class GetMapCollection: IEnumerable
        {
            RequestType parent;
            public RequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public GetMapEnumerator GetEnumerator() 
			{
				return new GetMapEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class GetMapEnumerator: IEnumerator 
        {
			int nIndex;
			RequestType parent;
			public GetMapEnumerator(RequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.GetMapCount );
			}
			public GetMapType  Current 
			{
				get 
				{
					return(parent.GetGetMapAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // GetMap collection

		#region GetFeatureInfo accessor methods
		public static int GetGetFeatureInfoMinCount()
		{
			return 0;
		}

		public static int GetFeatureInfoMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetGetFeatureInfoMaxCount()
		{
			return 1;
		}

		public static int GetFeatureInfoMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGetFeatureInfoCount()
		{
			return DomChildCount(NodeType.Element, "", "GetFeatureInfo");
		}

		public int GetFeatureInfoCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "GetFeatureInfo");
			}
		}

		public bool HasGetFeatureInfo()
		{
			return HasDomChild(NodeType.Element, "", "GetFeatureInfo");
		}

		public GetFeatureInfoType NewGetFeatureInfo()
		{
			return new GetFeatureInfoType(domNode.OwnerDocument.CreateElement("GetFeatureInfo", ""));
		}

		public GetFeatureInfoType GetGetFeatureInfoAt(int index)
		{
			return new GetFeatureInfoType(GetDomChildAt(NodeType.Element, "", "GetFeatureInfo", index));
		}

		public XmlNode GetStartingGetFeatureInfoCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "GetFeatureInfo" );
		}

		public XmlNode GetAdvancedGetFeatureInfoCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "GetFeatureInfo", curNode );
		}

		public GetFeatureInfoType GetGetFeatureInfoValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new GetFeatureInfoType( curNode );
		}


		public GetFeatureInfoType GetGetFeatureInfo()
		{
			return GetGetFeatureInfoAt(0);
		}

		public GetFeatureInfoType GetFeatureInfo
		{
			get
			{
				return GetGetFeatureInfoAt(0);
			}
		}

		public void RemoveGetFeatureInfoAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "GetFeatureInfo", index);
		}

		public void RemoveGetFeatureInfo()
		{
			while (HasGetFeatureInfo())
				RemoveGetFeatureInfoAt(0);
		}

		public void AddGetFeatureInfo(GetFeatureInfoType newValue)
		{
			AppendDomElement("", "GetFeatureInfo", newValue);
		}

		public void InsertGetFeatureInfoAt(GetFeatureInfoType newValue, int index)
		{
			InsertDomElementAt("", "GetFeatureInfo", index, newValue);
		}

		public void ReplaceGetFeatureInfoAt(GetFeatureInfoType newValue, int index)
		{
			ReplaceDomElementAt("", "GetFeatureInfo", index, newValue);
		}
		#endregion // GetFeatureInfo accessor methods

		#region GetFeatureInfo collection
        public GetFeatureInfoCollection	MyGetFeatureInfos = new GetFeatureInfoCollection( );

        public class GetFeatureInfoCollection: IEnumerable
        {
            RequestType parent;
            public RequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public GetFeatureInfoEnumerator GetEnumerator() 
			{
				return new GetFeatureInfoEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class GetFeatureInfoEnumerator: IEnumerator 
        {
			int nIndex;
			RequestType parent;
			public GetFeatureInfoEnumerator(RequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.GetFeatureInfoCount );
			}
			public GetFeatureInfoType  Current 
			{
				get 
				{
					return(parent.GetGetFeatureInfoAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // GetFeatureInfo collection

		#region DescribeLayer accessor methods
		public static int GetDescribeLayerMinCount()
		{
			return 0;
		}

		public static int DescribeLayerMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetDescribeLayerMaxCount()
		{
			return 1;
		}

		public static int DescribeLayerMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDescribeLayerCount()
		{
			return DomChildCount(NodeType.Element, "", "DescribeLayer");
		}

		public int DescribeLayerCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "DescribeLayer");
			}
		}

		public bool HasDescribeLayer()
		{
			return HasDomChild(NodeType.Element, "", "DescribeLayer");
		}

		public DescribeLayerType NewDescribeLayer()
		{
			return new DescribeLayerType(domNode.OwnerDocument.CreateElement("DescribeLayer", ""));
		}

		public DescribeLayerType GetDescribeLayerAt(int index)
		{
			return new DescribeLayerType(GetDomChildAt(NodeType.Element, "", "DescribeLayer", index));
		}

		public XmlNode GetStartingDescribeLayerCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "DescribeLayer" );
		}

		public XmlNode GetAdvancedDescribeLayerCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "DescribeLayer", curNode );
		}

		public DescribeLayerType GetDescribeLayerValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new DescribeLayerType( curNode );
		}


		public DescribeLayerType GetDescribeLayer()
		{
			return GetDescribeLayerAt(0);
		}

		public DescribeLayerType DescribeLayer
		{
			get
			{
				return GetDescribeLayerAt(0);
			}
		}

		public void RemoveDescribeLayerAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "DescribeLayer", index);
		}

		public void RemoveDescribeLayer()
		{
			while (HasDescribeLayer())
				RemoveDescribeLayerAt(0);
		}

		public void AddDescribeLayer(DescribeLayerType newValue)
		{
			AppendDomElement("", "DescribeLayer", newValue);
		}

		public void InsertDescribeLayerAt(DescribeLayerType newValue, int index)
		{
			InsertDomElementAt("", "DescribeLayer", index, newValue);
		}

		public void ReplaceDescribeLayerAt(DescribeLayerType newValue, int index)
		{
			ReplaceDomElementAt("", "DescribeLayer", index, newValue);
		}
		#endregion // DescribeLayer accessor methods

		#region DescribeLayer collection
        public DescribeLayerCollection	MyDescribeLayers = new DescribeLayerCollection( );

        public class DescribeLayerCollection: IEnumerable
        {
            RequestType parent;
            public RequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public DescribeLayerEnumerator GetEnumerator() 
			{
				return new DescribeLayerEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class DescribeLayerEnumerator: IEnumerator 
        {
			int nIndex;
			RequestType parent;
			public DescribeLayerEnumerator(RequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.DescribeLayerCount );
			}
			public DescribeLayerType  Current 
			{
				get 
				{
					return(parent.GetDescribeLayerAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // DescribeLayer collection

		#region GetLegendGraphic accessor methods
		public static int GetGetLegendGraphicMinCount()
		{
			return 0;
		}

		public static int GetLegendGraphicMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetGetLegendGraphicMaxCount()
		{
			return 1;
		}

		public static int GetLegendGraphicMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGetLegendGraphicCount()
		{
			return DomChildCount(NodeType.Element, "", "GetLegendGraphic");
		}

		public int GetLegendGraphicCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "GetLegendGraphic");
			}
		}

		public bool HasGetLegendGraphic()
		{
			return HasDomChild(NodeType.Element, "", "GetLegendGraphic");
		}

		public GetLegendGraphicType NewGetLegendGraphic()
		{
			return new GetLegendGraphicType(domNode.OwnerDocument.CreateElement("GetLegendGraphic", ""));
		}

		public GetLegendGraphicType GetGetLegendGraphicAt(int index)
		{
			return new GetLegendGraphicType(GetDomChildAt(NodeType.Element, "", "GetLegendGraphic", index));
		}

		public XmlNode GetStartingGetLegendGraphicCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "GetLegendGraphic" );
		}

		public XmlNode GetAdvancedGetLegendGraphicCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "GetLegendGraphic", curNode );
		}

		public GetLegendGraphicType GetGetLegendGraphicValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new GetLegendGraphicType( curNode );
		}


		public GetLegendGraphicType GetGetLegendGraphic()
		{
			return GetGetLegendGraphicAt(0);
		}

		public GetLegendGraphicType GetLegendGraphic
		{
			get
			{
				return GetGetLegendGraphicAt(0);
			}
		}

		public void RemoveGetLegendGraphicAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "GetLegendGraphic", index);
		}

		public void RemoveGetLegendGraphic()
		{
			while (HasGetLegendGraphic())
				RemoveGetLegendGraphicAt(0);
		}

		public void AddGetLegendGraphic(GetLegendGraphicType newValue)
		{
			AppendDomElement("", "GetLegendGraphic", newValue);
		}

		public void InsertGetLegendGraphicAt(GetLegendGraphicType newValue, int index)
		{
			InsertDomElementAt("", "GetLegendGraphic", index, newValue);
		}

		public void ReplaceGetLegendGraphicAt(GetLegendGraphicType newValue, int index)
		{
			ReplaceDomElementAt("", "GetLegendGraphic", index, newValue);
		}
		#endregion // GetLegendGraphic accessor methods

		#region GetLegendGraphic collection
        public GetLegendGraphicCollection	MyGetLegendGraphics = new GetLegendGraphicCollection( );

        public class GetLegendGraphicCollection: IEnumerable
        {
            RequestType parent;
            public RequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public GetLegendGraphicEnumerator GetEnumerator() 
			{
				return new GetLegendGraphicEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class GetLegendGraphicEnumerator: IEnumerator 
        {
			int nIndex;
			RequestType parent;
			public GetLegendGraphicEnumerator(RequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.GetLegendGraphicCount );
			}
			public GetLegendGraphicType  Current 
			{
				get 
				{
					return(parent.GetGetLegendGraphicAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // GetLegendGraphic collection

		#region GetStyles accessor methods
		public static int GetGetStylesMinCount()
		{
			return 0;
		}

		public static int GetStylesMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetGetStylesMaxCount()
		{
			return 1;
		}

		public static int GetStylesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGetStylesCount()
		{
			return DomChildCount(NodeType.Element, "", "GetStyles");
		}

		public int GetStylesCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "GetStyles");
			}
		}

		public bool HasGetStyles()
		{
			return HasDomChild(NodeType.Element, "", "GetStyles");
		}

		public GetStylesType NewGetStyles()
		{
			return new GetStylesType(domNode.OwnerDocument.CreateElement("GetStyles", ""));
		}

		public GetStylesType GetGetStylesAt(int index)
		{
			return new GetStylesType(GetDomChildAt(NodeType.Element, "", "GetStyles", index));
		}

		public XmlNode GetStartingGetStylesCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "GetStyles" );
		}

		public XmlNode GetAdvancedGetStylesCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "GetStyles", curNode );
		}

		public GetStylesType GetGetStylesValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new GetStylesType( curNode );
		}


		public GetStylesType GetGetStyles()
		{
			return GetGetStylesAt(0);
		}

		public GetStylesType GetStyles
		{
			get
			{
				return GetGetStylesAt(0);
			}
		}

		public void RemoveGetStylesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "GetStyles", index);
		}

		public void RemoveGetStyles()
		{
			while (HasGetStyles())
				RemoveGetStylesAt(0);
		}

		public void AddGetStyles(GetStylesType newValue)
		{
			AppendDomElement("", "GetStyles", newValue);
		}

		public void InsertGetStylesAt(GetStylesType newValue, int index)
		{
			InsertDomElementAt("", "GetStyles", index, newValue);
		}

		public void ReplaceGetStylesAt(GetStylesType newValue, int index)
		{
			ReplaceDomElementAt("", "GetStyles", index, newValue);
		}
		#endregion // GetStyles accessor methods

		#region GetStyles collection
        public GetStylesCollection	MyGetStyless = new GetStylesCollection( );

        public class GetStylesCollection: IEnumerable
        {
            RequestType parent;
            public RequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public GetStylesEnumerator GetEnumerator() 
			{
				return new GetStylesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class GetStylesEnumerator: IEnumerator 
        {
			int nIndex;
			RequestType parent;
			public GetStylesEnumerator(RequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.GetStylesCount );
			}
			public GetStylesType  Current 
			{
				get 
				{
					return(parent.GetGetStylesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // GetStyles collection

		#region PutStyles accessor methods
		public static int GetPutStylesMinCount()
		{
			return 0;
		}

		public static int PutStylesMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetPutStylesMaxCount()
		{
			return 1;
		}

		public static int PutStylesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPutStylesCount()
		{
			return DomChildCount(NodeType.Element, "", "PutStyles");
		}

		public int PutStylesCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "PutStyles");
			}
		}

		public bool HasPutStyles()
		{
			return HasDomChild(NodeType.Element, "", "PutStyles");
		}

		public PutStylesType NewPutStyles()
		{
			return new PutStylesType(domNode.OwnerDocument.CreateElement("PutStyles", ""));
		}

		public PutStylesType GetPutStylesAt(int index)
		{
			return new PutStylesType(GetDomChildAt(NodeType.Element, "", "PutStyles", index));
		}

		public XmlNode GetStartingPutStylesCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "PutStyles" );
		}

		public XmlNode GetAdvancedPutStylesCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "PutStyles", curNode );
		}

		public PutStylesType GetPutStylesValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new PutStylesType( curNode );
		}


		public PutStylesType GetPutStyles()
		{
			return GetPutStylesAt(0);
		}

		public PutStylesType PutStyles
		{
			get
			{
				return GetPutStylesAt(0);
			}
		}

		public void RemovePutStylesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "PutStyles", index);
		}

		public void RemovePutStyles()
		{
			while (HasPutStyles())
				RemovePutStylesAt(0);
		}

		public void AddPutStyles(PutStylesType newValue)
		{
			AppendDomElement("", "PutStyles", newValue);
		}

		public void InsertPutStylesAt(PutStylesType newValue, int index)
		{
			InsertDomElementAt("", "PutStyles", index, newValue);
		}

		public void ReplacePutStylesAt(PutStylesType newValue, int index)
		{
			ReplaceDomElementAt("", "PutStyles", index, newValue);
		}
		#endregion // PutStyles accessor methods

		#region PutStyles collection
        public PutStylesCollection	MyPutStyless = new PutStylesCollection( );

        public class PutStylesCollection: IEnumerable
        {
            RequestType parent;
            public RequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public PutStylesEnumerator GetEnumerator() 
			{
				return new PutStylesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PutStylesEnumerator: IEnumerator 
        {
			int nIndex;
			RequestType parent;
			public PutStylesEnumerator(RequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PutStylesCount );
			}
			public PutStylesType  Current 
			{
				get 
				{
					return(parent.GetPutStylesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // PutStyles collection

        private void SetCollectionParents()
        {
            MyGetCapabilitiess.Parent = this; 
            MyGetMaps.Parent = this; 
            MyGetFeatureInfos.Parent = this; 
            MyDescribeLayers.Parent = this; 
            MyGetLegendGraphics.Parent = this; 
            MyGetStyless.Parent = this; 
            MyPutStyless.Parent = this; 
	}
}
}
