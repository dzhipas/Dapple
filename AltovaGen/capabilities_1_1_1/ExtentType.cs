//
// ExtentType.cs
//
// This file was generated by XMLSpy 2006r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace capabilities_1_1_1
{
	public class ExtentType : Altova.Xml.Node
	{
		#region Forward constructors

		public ExtentType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public ExtentType(XmlNode node) : base(node) { SetCollectionParents(); }
		public ExtentType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public ExtentType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		#region Value accessor methods
		public SchemaString GetValue()
		{
			return new SchemaString(GetDomNodeValue(domNode));
		}

		public void SetValue(ISchemaType newValue)
		{
			SetDomNodeValue(domNode, newValue.ToString());
		}

		public void Assign(ISchemaType newValue)
		{
			SetValue(newValue);
		}

		public SchemaString Value
		{
			get
			{
				return new SchemaString(GetDomNodeValue(domNode));
			}
			set
			{
				SetDomNodeValue(domNode, value.ToString());
			}
		}
		#endregion // Value accessor methods

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "name" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "name", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "default" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "default", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "nearestValue" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "nearestValue", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "multipleValues" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "multipleValues", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "current" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "current", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}



		#region name accessor methods
		public static int GetnameMinCount()
		{
			return 1;
		}

		public static int nameMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetnameMaxCount()
		{
			return 1;
		}

		public static int nameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnameCount()
		{
			return DomChildCount(NodeType.Attribute, "", "name");
		}

		public int nameCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "name");
			}
		}

		public bool Hasname()
		{
			return HasDomChild(NodeType.Attribute, "", "name");
		}

		public SchemaString Newname()
		{
			return new SchemaString();
		}

		public SchemaString GetnameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "name", index)));
		}

		public XmlNode GetStartingnameCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "name" );
		}

		public XmlNode GetAdvancednameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "name", curNode );
		}

		public SchemaString GetnameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString Getname()
		{
			return GetnameAt(0);
		}

		public SchemaString name
		{
			get
			{
				return GetnameAt(0);
			}
		}

		public void RemovenameAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "name", index);
		}

		public void Removename()
		{
			while (Hasname())
				RemovenameAt(0);
		}

		public void Addname(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "name", newValue.ToString());
		}

		public void InsertnameAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "name", index, newValue.ToString());
		}

		public void ReplacenameAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "name", index, newValue.ToString());
		}
		#endregion // name accessor methods

		#region name collection
        public nameCollection	Mynames = new nameCollection( );

        public class nameCollection: IEnumerable
        {
            ExtentType parent;
            public ExtentType Parent
			{
				set
				{
					parent = value;
				}
			}
			public nameEnumerator GetEnumerator() 
			{
				return new nameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class nameEnumerator: IEnumerator 
        {
			int nIndex;
			ExtentType parent;
			public nameEnumerator(ExtentType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.nameCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetnameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // name collection

		#region default2 accessor methods
		public static int Getdefault2MinCount()
		{
			return 0;
		}

		public static int default2MinCount
		{
			get
			{
				return 0;
			}
		}

		public static int Getdefault2MaxCount()
		{
			return 1;
		}

		public static int default2MaxCount
		{
			get
			{
				return 1;
			}
		}

		public int Getdefault2Count()
		{
			return DomChildCount(NodeType.Attribute, "", "default");
		}

		public int default2Count
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "default");
			}
		}

		public bool Hasdefault2()
		{
			return HasDomChild(NodeType.Attribute, "", "default");
		}

		public SchemaString Newdefault2()
		{
			return new SchemaString();
		}

		public SchemaString Getdefault2At(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "default", index)));
		}

		public XmlNode GetStartingdefault2Cursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "default" );
		}

		public XmlNode GetAdvanceddefault2Cursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "default", curNode );
		}

		public SchemaString Getdefault2ValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString Getdefault2()
		{
			return Getdefault2At(0);
		}

		public SchemaString default2
		{
			get
			{
				return Getdefault2At(0);
			}
		}

		public void Removedefault2At(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "default", index);
		}

		public void Removedefault2()
		{
			while (Hasdefault2())
				Removedefault2At(0);
		}

		public void Adddefault2(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "default", newValue.ToString());
		}

		public void Insertdefault2At(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "default", index, newValue.ToString());
		}

		public void Replacedefault2At(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "default", index, newValue.ToString());
		}
		#endregion // default2 accessor methods

		#region default2 collection
        public default2Collection	Mydefault2s = new default2Collection( );

        public class default2Collection: IEnumerable
        {
            ExtentType parent;
            public ExtentType Parent
			{
				set
				{
					parent = value;
				}
			}
			public default2Enumerator GetEnumerator() 
			{
				return new default2Enumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class default2Enumerator: IEnumerator 
        {
			int nIndex;
			ExtentType parent;
			public default2Enumerator(ExtentType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.default2Count );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.Getdefault2At(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // default2 collection

		#region nearestValue accessor methods
		public static int GetnearestValueMinCount()
		{
			return 0;
		}

		public static int nearestValueMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetnearestValueMaxCount()
		{
			return 1;
		}

		public static int nearestValueMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnearestValueCount()
		{
			return DomChildCount(NodeType.Attribute, "", "nearestValue");
		}

		public int nearestValueCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "nearestValue");
			}
		}

		public bool HasnearestValue()
		{
			return HasDomChild(NodeType.Attribute, "", "nearestValue");
		}

		public EnumerationType NewnearestValue()
		{
			return new EnumerationType();
		}

		public EnumerationType GetnearestValueAt(int index)
		{
			return new EnumerationType(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "nearestValue", index)));
		}

		public XmlNode GetStartingnearestValueCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "nearestValue" );
		}

		public XmlNode GetAdvancednearestValueCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "nearestValue", curNode );
		}

		public EnumerationType GetnearestValueValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new EnumerationType( curNode.Value );
		}


		public EnumerationType GetnearestValue()
		{
			return GetnearestValueAt(0);
		}

		public EnumerationType nearestValue
		{
			get
			{
				return GetnearestValueAt(0);
			}
		}

		public void RemovenearestValueAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "nearestValue", index);
		}

		public void RemovenearestValue()
		{
			while (HasnearestValue())
				RemovenearestValueAt(0);
		}

		public void AddnearestValue(EnumerationType newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "nearestValue", newValue.ToString());
		}

		public void InsertnearestValueAt(EnumerationType newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "nearestValue", index, newValue.ToString());
		}

		public void ReplacenearestValueAt(EnumerationType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "nearestValue", index, newValue.ToString());
		}
		#endregion // nearestValue accessor methods

		#region nearestValue collection
        public nearestValueCollection	MynearestValues = new nearestValueCollection( );

        public class nearestValueCollection: IEnumerable
        {
            ExtentType parent;
            public ExtentType Parent
			{
				set
				{
					parent = value;
				}
			}
			public nearestValueEnumerator GetEnumerator() 
			{
				return new nearestValueEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class nearestValueEnumerator: IEnumerator 
        {
			int nIndex;
			ExtentType parent;
			public nearestValueEnumerator(ExtentType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.nearestValueCount );
			}
			public EnumerationType  Current 
			{
				get 
				{
					return(parent.GetnearestValueAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // nearestValue collection

		#region multipleValues accessor methods
		public static int GetmultipleValuesMinCount()
		{
			return 0;
		}

		public static int multipleValuesMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetmultipleValuesMaxCount()
		{
			return 1;
		}

		public static int multipleValuesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetmultipleValuesCount()
		{
			return DomChildCount(NodeType.Attribute, "", "multipleValues");
		}

		public int multipleValuesCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "multipleValues");
			}
		}

		public bool HasmultipleValues()
		{
			return HasDomChild(NodeType.Attribute, "", "multipleValues");
		}

		public EnumerationType2 NewmultipleValues()
		{
			return new EnumerationType2();
		}

		public EnumerationType2 GetmultipleValuesAt(int index)
		{
			return new EnumerationType2(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "multipleValues", index)));
		}

		public XmlNode GetStartingmultipleValuesCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "multipleValues" );
		}

		public XmlNode GetAdvancedmultipleValuesCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "multipleValues", curNode );
		}

		public EnumerationType2 GetmultipleValuesValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new EnumerationType2( curNode.Value );
		}


		public EnumerationType2 GetmultipleValues()
		{
			return GetmultipleValuesAt(0);
		}

		public EnumerationType2 multipleValues
		{
			get
			{
				return GetmultipleValuesAt(0);
			}
		}

		public void RemovemultipleValuesAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "multipleValues", index);
		}

		public void RemovemultipleValues()
		{
			while (HasmultipleValues())
				RemovemultipleValuesAt(0);
		}

		public void AddmultipleValues(EnumerationType2 newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "multipleValues", newValue.ToString());
		}

		public void InsertmultipleValuesAt(EnumerationType2 newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "multipleValues", index, newValue.ToString());
		}

		public void ReplacemultipleValuesAt(EnumerationType2 newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "multipleValues", index, newValue.ToString());
		}
		#endregion // multipleValues accessor methods

		#region multipleValues collection
        public multipleValuesCollection	MymultipleValuess = new multipleValuesCollection( );

        public class multipleValuesCollection: IEnumerable
        {
            ExtentType parent;
            public ExtentType Parent
			{
				set
				{
					parent = value;
				}
			}
			public multipleValuesEnumerator GetEnumerator() 
			{
				return new multipleValuesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class multipleValuesEnumerator: IEnumerator 
        {
			int nIndex;
			ExtentType parent;
			public multipleValuesEnumerator(ExtentType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.multipleValuesCount );
			}
			public EnumerationType2  Current 
			{
				get 
				{
					return(parent.GetmultipleValuesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // multipleValues collection

		#region current accessor methods
		public static int GetcurrentMinCount()
		{
			return 0;
		}

		public static int currentMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetcurrentMaxCount()
		{
			return 1;
		}

		public static int currentMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetcurrentCount()
		{
			return DomChildCount(NodeType.Attribute, "", "current");
		}

		public int currentCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "current");
			}
		}

		public bool Hascurrent()
		{
			return HasDomChild(NodeType.Attribute, "", "current");
		}

		public EnumerationType3 Newcurrent()
		{
			return new EnumerationType3();
		}

		public EnumerationType3 GetcurrentAt(int index)
		{
			return new EnumerationType3(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "current", index)));
		}

		public XmlNode GetStartingcurrentCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "current" );
		}

		public XmlNode GetAdvancedcurrentCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "current", curNode );
		}

		public EnumerationType3 GetcurrentValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new EnumerationType3( curNode.Value );
		}


		public EnumerationType3 Getcurrent()
		{
			return GetcurrentAt(0);
		}

		public EnumerationType3 current
		{
			get
			{
				return GetcurrentAt(0);
			}
		}

		public void RemovecurrentAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "current", index);
		}

		public void Removecurrent()
		{
			while (Hascurrent())
				RemovecurrentAt(0);
		}

		public void Addcurrent(EnumerationType3 newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "current", newValue.ToString());
		}

		public void InsertcurrentAt(EnumerationType3 newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "current", index, newValue.ToString());
		}

		public void ReplacecurrentAt(EnumerationType3 newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "current", index, newValue.ToString());
		}
		#endregion // current accessor methods

		#region current collection
        public currentCollection	Mycurrents = new currentCollection( );

        public class currentCollection: IEnumerable
        {
            ExtentType parent;
            public ExtentType Parent
			{
				set
				{
					parent = value;
				}
			}
			public currentEnumerator GetEnumerator() 
			{
				return new currentEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class currentEnumerator: IEnumerator 
        {
			int nIndex;
			ExtentType parent;
			public currentEnumerator(ExtentType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.currentCount );
			}
			public EnumerationType3  Current 
			{
				get 
				{
					return(parent.GetcurrentAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // current collection

		public void AddTextNode(SchemaString newValue)
		{
			AppendDomChild(NodeType.Text, "", "", newValue.ToString());
		}
		public void AddProcessingInstruction(SchemaString name, SchemaString newValue)
		{
			AppendDomChild(NodeType.ProcessingInstruction , "", name.ToString(), newValue.ToString());
		}
		public void AddCDataNode(SchemaString newValue)
		{
			AppendDomChild(NodeType.CData, "", "", newValue.ToString());
		}
		public void AddComment(SchemaString newValue)
		{
			AppendDomChild(NodeType.Comment, "", "", newValue.ToString());
		}
        private void SetCollectionParents()
        {
            Mynames.Parent = this; 
            Mydefault2s.Parent = this; 
            MynearestValues.Parent = this; 
            MymultipleValuess.Parent = this; 
            Mycurrents.Parent = this; 
	}
}
}
