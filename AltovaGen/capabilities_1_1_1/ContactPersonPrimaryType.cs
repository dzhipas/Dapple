//
// ContactPersonPrimaryType.cs
//
// This file was generated by XMLSpy 2006r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace capabilities_1_1_1
{
	public class ContactPersonPrimaryType : Altova.Xml.Node
	{
		#region Forward constructors

		public ContactPersonPrimaryType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public ContactPersonPrimaryType(XmlNode node) : base(node) { SetCollectionParents(); }
		public ContactPersonPrimaryType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public ContactPersonPrimaryType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ContactPerson" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ContactPerson", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new ContactPersonType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ContactOrganization" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ContactOrganization", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
				new ContactOrganizationType(DOMNode).AdjustPrefix();
			}
		}



		#region ContactPerson accessor methods
		public static int GetContactPersonMinCount()
		{
			return 1;
		}

		public static int ContactPersonMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetContactPersonMaxCount()
		{
			return 1;
		}

		public static int ContactPersonMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetContactPersonCount()
		{
			return DomChildCount(NodeType.Element, "", "ContactPerson");
		}

		public int ContactPersonCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ContactPerson");
			}
		}

		public bool HasContactPerson()
		{
			return HasDomChild(NodeType.Element, "", "ContactPerson");
		}

		public ContactPersonType NewContactPerson()
		{
			return new ContactPersonType(domNode.OwnerDocument.CreateElement("ContactPerson", ""));
		}

		public ContactPersonType GetContactPersonAt(int index)
		{
			return new ContactPersonType(GetDomChildAt(NodeType.Element, "", "ContactPerson", index));
		}

		public XmlNode GetStartingContactPersonCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ContactPerson" );
		}

		public XmlNode GetAdvancedContactPersonCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ContactPerson", curNode );
		}

		public ContactPersonType GetContactPersonValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ContactPersonType( curNode );
		}


		public ContactPersonType GetContactPerson()
		{
			return GetContactPersonAt(0);
		}

		public ContactPersonType ContactPerson
		{
			get
			{
				return GetContactPersonAt(0);
			}
		}

		public void RemoveContactPersonAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ContactPerson", index);
		}

		public void RemoveContactPerson()
		{
			while (HasContactPerson())
				RemoveContactPersonAt(0);
		}

		public void AddContactPerson(ContactPersonType newValue)
		{
			AppendDomElement("", "ContactPerson", newValue);
		}

		public void InsertContactPersonAt(ContactPersonType newValue, int index)
		{
			InsertDomElementAt("", "ContactPerson", index, newValue);
		}

		public void ReplaceContactPersonAt(ContactPersonType newValue, int index)
		{
			ReplaceDomElementAt("", "ContactPerson", index, newValue);
		}
		#endregion // ContactPerson accessor methods

		#region ContactPerson collection
        public ContactPersonCollection	MyContactPersons = new ContactPersonCollection( );

        public class ContactPersonCollection: IEnumerable
        {
            ContactPersonPrimaryType parent;
            public ContactPersonPrimaryType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ContactPersonEnumerator GetEnumerator() 
			{
				return new ContactPersonEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ContactPersonEnumerator: IEnumerator 
        {
			int nIndex;
			ContactPersonPrimaryType parent;
			public ContactPersonEnumerator(ContactPersonPrimaryType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ContactPersonCount );
			}
			public ContactPersonType  Current 
			{
				get 
				{
					return(parent.GetContactPersonAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ContactPerson collection

		#region ContactOrganization accessor methods
		public static int GetContactOrganizationMinCount()
		{
			return 1;
		}

		public static int ContactOrganizationMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetContactOrganizationMaxCount()
		{
			return 1;
		}

		public static int ContactOrganizationMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetContactOrganizationCount()
		{
			return DomChildCount(NodeType.Element, "", "ContactOrganization");
		}

		public int ContactOrganizationCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ContactOrganization");
			}
		}

		public bool HasContactOrganization()
		{
			return HasDomChild(NodeType.Element, "", "ContactOrganization");
		}

		public ContactOrganizationType NewContactOrganization()
		{
			return new ContactOrganizationType(domNode.OwnerDocument.CreateElement("ContactOrganization", ""));
		}

		public ContactOrganizationType GetContactOrganizationAt(int index)
		{
			return new ContactOrganizationType(GetDomChildAt(NodeType.Element, "", "ContactOrganization", index));
		}

		public XmlNode GetStartingContactOrganizationCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ContactOrganization" );
		}

		public XmlNode GetAdvancedContactOrganizationCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ContactOrganization", curNode );
		}

		public ContactOrganizationType GetContactOrganizationValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ContactOrganizationType( curNode );
		}


		public ContactOrganizationType GetContactOrganization()
		{
			return GetContactOrganizationAt(0);
		}

		public ContactOrganizationType ContactOrganization
		{
			get
			{
				return GetContactOrganizationAt(0);
			}
		}

		public void RemoveContactOrganizationAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ContactOrganization", index);
		}

		public void RemoveContactOrganization()
		{
			while (HasContactOrganization())
				RemoveContactOrganizationAt(0);
		}

		public void AddContactOrganization(ContactOrganizationType newValue)
		{
			AppendDomElement("", "ContactOrganization", newValue);
		}

		public void InsertContactOrganizationAt(ContactOrganizationType newValue, int index)
		{
			InsertDomElementAt("", "ContactOrganization", index, newValue);
		}

		public void ReplaceContactOrganizationAt(ContactOrganizationType newValue, int index)
		{
			ReplaceDomElementAt("", "ContactOrganization", index, newValue);
		}
		#endregion // ContactOrganization accessor methods

		#region ContactOrganization collection
        public ContactOrganizationCollection	MyContactOrganizations = new ContactOrganizationCollection( );

        public class ContactOrganizationCollection: IEnumerable
        {
            ContactPersonPrimaryType parent;
            public ContactPersonPrimaryType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ContactOrganizationEnumerator GetEnumerator() 
			{
				return new ContactOrganizationEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ContactOrganizationEnumerator: IEnumerator 
        {
			int nIndex;
			ContactPersonPrimaryType parent;
			public ContactOrganizationEnumerator(ContactPersonPrimaryType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ContactOrganizationCount );
			}
			public ContactOrganizationType  Current 
			{
				get 
				{
					return(parent.GetContactOrganizationAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ContactOrganization collection

        private void SetCollectionParents()
        {
            MyContactPersons.Parent = this; 
            MyContactOrganizations.Parent = this; 
	}
}
}
