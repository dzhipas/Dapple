//
// ScaleHintType.cs
//
// This file was generated by XMLSpy 2006r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace capabilities_1_1_1
{
	public class ScaleHintType : Altova.Xml.Node
	{
		#region Forward constructors

		public ScaleHintType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public ScaleHintType(XmlNode node) : base(node) { SetCollectionParents(); }
		public ScaleHintType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public ScaleHintType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "min" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "min", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "max" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "max", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}



		#region min accessor methods
		public static int GetminMinCount()
		{
			return 1;
		}

		public static int minMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetminMaxCount()
		{
			return 1;
		}

		public static int minMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetminCount()
		{
			return DomChildCount(NodeType.Attribute, "", "min");
		}

		public int minCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "min");
			}
		}

		public bool Hasmin()
		{
			return HasDomChild(NodeType.Attribute, "", "min");
		}

		public SchemaString Newmin()
		{
			return new SchemaString();
		}

		public SchemaString GetminAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "min", index)));
		}

		public XmlNode GetStartingminCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "min" );
		}

		public XmlNode GetAdvancedminCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "min", curNode );
		}

		public SchemaString GetminValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString Getmin()
		{
			return GetminAt(0);
		}

		public SchemaString min
		{
			get
			{
				return GetminAt(0);
			}
		}

		public void RemoveminAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "min", index);
		}

		public void Removemin()
		{
			while (Hasmin())
				RemoveminAt(0);
		}

		public void Addmin(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "min", newValue.ToString());
		}

		public void InsertminAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "min", index, newValue.ToString());
		}

		public void ReplaceminAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "min", index, newValue.ToString());
		}
		#endregion // min accessor methods

		#region min collection
        public minCollection	Mymins = new minCollection( );

        public class minCollection: IEnumerable
        {
            ScaleHintType parent;
            public ScaleHintType Parent
			{
				set
				{
					parent = value;
				}
			}
			public minEnumerator GetEnumerator() 
			{
				return new minEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class minEnumerator: IEnumerator 
        {
			int nIndex;
			ScaleHintType parent;
			public minEnumerator(ScaleHintType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.minCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetminAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // min collection

		#region max accessor methods
		public static int GetmaxMinCount()
		{
			return 1;
		}

		public static int maxMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetmaxMaxCount()
		{
			return 1;
		}

		public static int maxMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetmaxCount()
		{
			return DomChildCount(NodeType.Attribute, "", "max");
		}

		public int maxCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "max");
			}
		}

		public bool Hasmax()
		{
			return HasDomChild(NodeType.Attribute, "", "max");
		}

		public SchemaString Newmax()
		{
			return new SchemaString();
		}

		public SchemaString GetmaxAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "max", index)));
		}

		public XmlNode GetStartingmaxCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "max" );
		}

		public XmlNode GetAdvancedmaxCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "max", curNode );
		}

		public SchemaString GetmaxValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString Getmax()
		{
			return GetmaxAt(0);
		}

		public SchemaString max
		{
			get
			{
				return GetmaxAt(0);
			}
		}

		public void RemovemaxAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "max", index);
		}

		public void Removemax()
		{
			while (Hasmax())
				RemovemaxAt(0);
		}

		public void Addmax(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "max", newValue.ToString());
		}

		public void InsertmaxAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "max", index, newValue.ToString());
		}

		public void ReplacemaxAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "max", index, newValue.ToString());
		}
		#endregion // max accessor methods

		#region max collection
        public maxCollection	Mymaxs = new maxCollection( );

        public class maxCollection: IEnumerable
        {
            ScaleHintType parent;
            public ScaleHintType Parent
			{
				set
				{
					parent = value;
				}
			}
			public maxEnumerator GetEnumerator() 
			{
				return new maxEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class maxEnumerator: IEnumerator 
        {
			int nIndex;
			ScaleHintType parent;
			public maxEnumerator(ScaleHintType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.maxCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetmaxAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // max collection

        private void SetCollectionParents()
        {
            Mymins.Parent = this; 
            Mymaxs.Parent = this; 
	}
}
}
