//
// StyleType.cs
//
// This file was generated by XMLSpy 2007r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LayerSet
{
	public class StyleType : Altova.Xml.Node
	{
		#region Documentation
		public static string GetAnnoDocumentation() { return ""; }
		#endregion

		#region Forward constructors

		public StyleType() : base() { SetCollectionParents(); }

		public StyleType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public StyleType(XmlNode node) : base(node) { SetCollectionParents(); }
		public StyleType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public StyleType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "IsBold" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "IsBold", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "IsItalic" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "IsItalic", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "IsUnderlined" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "IsUnderlined", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "IsStrikeout" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "IsStrikeout", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "Style");
		}


		#region IsBold Documentation
		public static string GetIsBoldAnnoDocumentation()
		{
			return "";		
		}
		public static string GetIsBoldDefault()
		{
			return "";		
		}
		#endregion

		#region IsBold accessor methods
		public static int GetIsBoldMinCount()
		{
			return 0;
		}

		public static int IsBoldMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetIsBoldMaxCount()
		{
			return 1;
		}

		public static int IsBoldMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetIsBoldCount()
		{
			return DomChildCount(NodeType.Element, "", "IsBold");
		}

		public int IsBoldCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "IsBold");
			}
		}

		public bool HasIsBold()
		{
			return HasDomChild(NodeType.Element, "", "IsBold");
		}

		public SchemaBoolean NewIsBold()
		{
			return new SchemaBoolean();
		}

		public SchemaBoolean GetIsBoldAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "IsBold", index)));
		}

		public XmlNode GetStartingIsBoldCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "IsBold" );
		}

		public XmlNode GetAdvancedIsBoldCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "IsBold", curNode );
		}

		public SchemaBoolean GetIsBoldValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaBoolean( curNode.InnerText );
		}


		public SchemaBoolean GetIsBold()
		{
			return GetIsBoldAt(0);
		}

		public SchemaBoolean IsBold
		{
			get
			{
				return GetIsBoldAt(0);
			}
		}

		public void RemoveIsBoldAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "IsBold", index);
		}

		public void RemoveIsBold()
		{
			RemoveIsBoldAt(0);
		}

		public XmlNode AddIsBold(SchemaBoolean newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "IsBold", newValue.ToString());
			return null;
		}

		public void InsertIsBoldAt(SchemaBoolean newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "IsBold", index, newValue.ToString());
		}

		public void ReplaceIsBoldAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "IsBold", index, newValue.ToString());
		}
		#endregion // IsBold accessor methods

		#region IsBold collection
        public IsBoldCollection	MyIsBolds = new IsBoldCollection( );

        public class IsBoldCollection: IEnumerable
        {
            StyleType parent;
            public StyleType Parent
			{
				set
				{
					parent = value;
				}
			}
			public IsBoldEnumerator GetEnumerator() 
			{
				return new IsBoldEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class IsBoldEnumerator: IEnumerator 
        {
			int nIndex;
			StyleType parent;
			public IsBoldEnumerator(StyleType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.IsBoldCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetIsBoldAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // IsBold collection

		#region IsItalic Documentation
		public static string GetIsItalicAnnoDocumentation()
		{
			return "";		
		}
		public static string GetIsItalicDefault()
		{
			return "";		
		}
		#endregion

		#region IsItalic accessor methods
		public static int GetIsItalicMinCount()
		{
			return 0;
		}

		public static int IsItalicMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetIsItalicMaxCount()
		{
			return 1;
		}

		public static int IsItalicMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetIsItalicCount()
		{
			return DomChildCount(NodeType.Element, "", "IsItalic");
		}

		public int IsItalicCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "IsItalic");
			}
		}

		public bool HasIsItalic()
		{
			return HasDomChild(NodeType.Element, "", "IsItalic");
		}

		public SchemaBoolean NewIsItalic()
		{
			return new SchemaBoolean();
		}

		public SchemaBoolean GetIsItalicAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "IsItalic", index)));
		}

		public XmlNode GetStartingIsItalicCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "IsItalic" );
		}

		public XmlNode GetAdvancedIsItalicCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "IsItalic", curNode );
		}

		public SchemaBoolean GetIsItalicValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaBoolean( curNode.InnerText );
		}


		public SchemaBoolean GetIsItalic()
		{
			return GetIsItalicAt(0);
		}

		public SchemaBoolean IsItalic
		{
			get
			{
				return GetIsItalicAt(0);
			}
		}

		public void RemoveIsItalicAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "IsItalic", index);
		}

		public void RemoveIsItalic()
		{
			RemoveIsItalicAt(0);
		}

		public XmlNode AddIsItalic(SchemaBoolean newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "IsItalic", newValue.ToString());
			return null;
		}

		public void InsertIsItalicAt(SchemaBoolean newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "IsItalic", index, newValue.ToString());
		}

		public void ReplaceIsItalicAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "IsItalic", index, newValue.ToString());
		}
		#endregion // IsItalic accessor methods

		#region IsItalic collection
        public IsItalicCollection	MyIsItalics = new IsItalicCollection( );

        public class IsItalicCollection: IEnumerable
        {
            StyleType parent;
            public StyleType Parent
			{
				set
				{
					parent = value;
				}
			}
			public IsItalicEnumerator GetEnumerator() 
			{
				return new IsItalicEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class IsItalicEnumerator: IEnumerator 
        {
			int nIndex;
			StyleType parent;
			public IsItalicEnumerator(StyleType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.IsItalicCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetIsItalicAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // IsItalic collection

		#region IsUnderlined Documentation
		public static string GetIsUnderlinedAnnoDocumentation()
		{
			return "";		
		}
		public static string GetIsUnderlinedDefault()
		{
			return "";		
		}
		#endregion

		#region IsUnderlined accessor methods
		public static int GetIsUnderlinedMinCount()
		{
			return 0;
		}

		public static int IsUnderlinedMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetIsUnderlinedMaxCount()
		{
			return 1;
		}

		public static int IsUnderlinedMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetIsUnderlinedCount()
		{
			return DomChildCount(NodeType.Element, "", "IsUnderlined");
		}

		public int IsUnderlinedCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "IsUnderlined");
			}
		}

		public bool HasIsUnderlined()
		{
			return HasDomChild(NodeType.Element, "", "IsUnderlined");
		}

		public SchemaBoolean NewIsUnderlined()
		{
			return new SchemaBoolean();
		}

		public SchemaBoolean GetIsUnderlinedAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "IsUnderlined", index)));
		}

		public XmlNode GetStartingIsUnderlinedCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "IsUnderlined" );
		}

		public XmlNode GetAdvancedIsUnderlinedCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "IsUnderlined", curNode );
		}

		public SchemaBoolean GetIsUnderlinedValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaBoolean( curNode.InnerText );
		}


		public SchemaBoolean GetIsUnderlined()
		{
			return GetIsUnderlinedAt(0);
		}

		public SchemaBoolean IsUnderlined
		{
			get
			{
				return GetIsUnderlinedAt(0);
			}
		}

		public void RemoveIsUnderlinedAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "IsUnderlined", index);
		}

		public void RemoveIsUnderlined()
		{
			RemoveIsUnderlinedAt(0);
		}

		public XmlNode AddIsUnderlined(SchemaBoolean newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "IsUnderlined", newValue.ToString());
			return null;
		}

		public void InsertIsUnderlinedAt(SchemaBoolean newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "IsUnderlined", index, newValue.ToString());
		}

		public void ReplaceIsUnderlinedAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "IsUnderlined", index, newValue.ToString());
		}
		#endregion // IsUnderlined accessor methods

		#region IsUnderlined collection
        public IsUnderlinedCollection	MyIsUnderlineds = new IsUnderlinedCollection( );

        public class IsUnderlinedCollection: IEnumerable
        {
            StyleType parent;
            public StyleType Parent
			{
				set
				{
					parent = value;
				}
			}
			public IsUnderlinedEnumerator GetEnumerator() 
			{
				return new IsUnderlinedEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class IsUnderlinedEnumerator: IEnumerator 
        {
			int nIndex;
			StyleType parent;
			public IsUnderlinedEnumerator(StyleType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.IsUnderlinedCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetIsUnderlinedAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // IsUnderlined collection

		#region IsStrikeout Documentation
		public static string GetIsStrikeoutAnnoDocumentation()
		{
			return "";		
		}
		public static string GetIsStrikeoutDefault()
		{
			return "";		
		}
		#endregion

		#region IsStrikeout accessor methods
		public static int GetIsStrikeoutMinCount()
		{
			return 0;
		}

		public static int IsStrikeoutMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetIsStrikeoutMaxCount()
		{
			return 1;
		}

		public static int IsStrikeoutMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetIsStrikeoutCount()
		{
			return DomChildCount(NodeType.Element, "", "IsStrikeout");
		}

		public int IsStrikeoutCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "IsStrikeout");
			}
		}

		public bool HasIsStrikeout()
		{
			return HasDomChild(NodeType.Element, "", "IsStrikeout");
		}

		public SchemaBoolean NewIsStrikeout()
		{
			return new SchemaBoolean();
		}

		public SchemaBoolean GetIsStrikeoutAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "IsStrikeout", index)));
		}

		public XmlNode GetStartingIsStrikeoutCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "IsStrikeout" );
		}

		public XmlNode GetAdvancedIsStrikeoutCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "IsStrikeout", curNode );
		}

		public SchemaBoolean GetIsStrikeoutValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaBoolean( curNode.InnerText );
		}


		public SchemaBoolean GetIsStrikeout()
		{
			return GetIsStrikeoutAt(0);
		}

		public SchemaBoolean IsStrikeout
		{
			get
			{
				return GetIsStrikeoutAt(0);
			}
		}

		public void RemoveIsStrikeoutAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "IsStrikeout", index);
		}

		public void RemoveIsStrikeout()
		{
			RemoveIsStrikeoutAt(0);
		}

		public XmlNode AddIsStrikeout(SchemaBoolean newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "IsStrikeout", newValue.ToString());
			return null;
		}

		public void InsertIsStrikeoutAt(SchemaBoolean newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "IsStrikeout", index, newValue.ToString());
		}

		public void ReplaceIsStrikeoutAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "IsStrikeout", index, newValue.ToString());
		}
		#endregion // IsStrikeout accessor methods

		#region IsStrikeout collection
        public IsStrikeoutCollection	MyIsStrikeouts = new IsStrikeoutCollection( );

        public class IsStrikeoutCollection: IEnumerable
        {
            StyleType parent;
            public StyleType Parent
			{
				set
				{
					parent = value;
				}
			}
			public IsStrikeoutEnumerator GetEnumerator() 
			{
				return new IsStrikeoutEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class IsStrikeoutEnumerator: IEnumerator 
        {
			int nIndex;
			StyleType parent;
			public IsStrikeoutEnumerator(StyleType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.IsStrikeoutCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetIsStrikeoutAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // IsStrikeout collection

        private void SetCollectionParents()
        {
            MyIsBolds.Parent = this; 
            MyIsItalics.Parent = this; 
            MyIsUnderlineds.Parent = this; 
            MyIsStrikeouts.Parent = this; 
	}
}
}
