//
// Type_ExtendedInformation.cs
//
// This file was generated by XMLSpy 2007r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LayerSet
{
	public class Type_ExtendedInformation : Altova.Xml.Node
	{
		#region Documentation
		public static string GetAnnoDocumentation() { return ""; }
		#endregion

		#region Forward constructors

		public Type_ExtendedInformation() : base() { SetCollectionParents(); }

		public Type_ExtendedInformation(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public Type_ExtendedInformation(XmlNode node) : base(node) { SetCollectionParents(); }
		public Type_ExtendedInformation(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public Type_ExtendedInformation(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Abstract" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Abstract", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ToolBarImage" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ToolBarImage", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "Type_ExtendedInformation");
		}


		#region Abstract2 Documentation
		public static string GetAbstract2AnnoDocumentation()
		{
			return "";		
		}
		public static string GetAbstract2Default()
		{
			return "";		
		}
		#endregion

		#region Abstract2 accessor methods
		public static int GetAbstract2MinCount()
		{
			return 0;
		}

		public static int Abstract2MinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetAbstract2MaxCount()
		{
			return 1;
		}

		public static int Abstract2MaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetAbstract2Count()
		{
			return DomChildCount(NodeType.Element, "", "Abstract");
		}

		public int Abstract2Count
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Abstract");
			}
		}

		public bool HasAbstract2()
		{
			return HasDomChild(NodeType.Element, "", "Abstract");
		}

		public SchemaString NewAbstract2()
		{
			return new SchemaString();
		}

		public SchemaString GetAbstract2At(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Abstract", index)));
		}

		public XmlNode GetStartingAbstract2Cursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Abstract" );
		}

		public XmlNode GetAdvancedAbstract2Cursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Abstract", curNode );
		}

		public SchemaString GetAbstract2ValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetAbstract2()
		{
			return GetAbstract2At(0);
		}

		public SchemaString Abstract2
		{
			get
			{
				return GetAbstract2At(0);
			}
		}

		public void RemoveAbstract2At(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Abstract", index);
		}

		public void RemoveAbstract2()
		{
			RemoveAbstract2At(0);
		}

		public XmlNode AddAbstract2(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "Abstract", newValue.ToString());
			return null;
		}

		public void InsertAbstract2At(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "Abstract", index, newValue.ToString());
		}

		public void ReplaceAbstract2At(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Abstract", index, newValue.ToString());
		}
		#endregion // Abstract2 accessor methods

		#region Abstract2 collection
        public Abstract2Collection	MyAbstract2s = new Abstract2Collection( );

        public class Abstract2Collection: IEnumerable
        {
            Type_ExtendedInformation parent;
            public Type_ExtendedInformation Parent
			{
				set
				{
					parent = value;
				}
			}
			public Abstract2Enumerator GetEnumerator() 
			{
				return new Abstract2Enumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class Abstract2Enumerator: IEnumerator 
        {
			int nIndex;
			Type_ExtendedInformation parent;
			public Abstract2Enumerator(Type_ExtendedInformation par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.Abstract2Count );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetAbstract2At(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Abstract2 collection

		#region ToolBarImage Documentation
		public static string GetToolBarImageAnnoDocumentation()
		{
			return "";		
		}
		public static string GetToolBarImageDefault()
		{
			return "";		
		}
		#endregion

		#region ToolBarImage accessor methods
		public static int GetToolBarImageMinCount()
		{
			return 0;
		}

		public static int ToolBarImageMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetToolBarImageMaxCount()
		{
			return 1;
		}

		public static int ToolBarImageMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetToolBarImageCount()
		{
			return DomChildCount(NodeType.Element, "", "ToolBarImage");
		}

		public int ToolBarImageCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ToolBarImage");
			}
		}

		public bool HasToolBarImage()
		{
			return HasDomChild(NodeType.Element, "", "ToolBarImage");
		}

		public SchemaString NewToolBarImage()
		{
			return new SchemaString();
		}

		public SchemaString GetToolBarImageAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "ToolBarImage", index)));
		}

		public XmlNode GetStartingToolBarImageCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ToolBarImage" );
		}

		public XmlNode GetAdvancedToolBarImageCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ToolBarImage", curNode );
		}

		public SchemaString GetToolBarImageValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetToolBarImage()
		{
			return GetToolBarImageAt(0);
		}

		public SchemaString ToolBarImage
		{
			get
			{
				return GetToolBarImageAt(0);
			}
		}

		public void RemoveToolBarImageAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ToolBarImage", index);
		}

		public void RemoveToolBarImage()
		{
			RemoveToolBarImageAt(0);
		}

		public XmlNode AddToolBarImage(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "ToolBarImage", newValue.ToString());
			return null;
		}

		public void InsertToolBarImageAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "ToolBarImage", index, newValue.ToString());
		}

		public void ReplaceToolBarImageAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "ToolBarImage", index, newValue.ToString());
		}
		#endregion // ToolBarImage accessor methods

		#region ToolBarImage collection
        public ToolBarImageCollection	MyToolBarImages = new ToolBarImageCollection( );

        public class ToolBarImageCollection: IEnumerable
        {
            Type_ExtendedInformation parent;
            public Type_ExtendedInformation Parent
			{
				set
				{
					parent = value;
				}
			}
			public ToolBarImageEnumerator GetEnumerator() 
			{
				return new ToolBarImageEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ToolBarImageEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ExtendedInformation parent;
			public ToolBarImageEnumerator(Type_ExtendedInformation par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ToolBarImageCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetToolBarImageAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ToolBarImage collection

        private void SetCollectionParents()
        {
            MyAbstract2s.Parent = this; 
            MyToolBarImages.Parent = this; 
	}
}
}
