//
// Type_LatLonBoundingBox.cs
//
// This file was generated by XMLSpy 2007r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LayerSet
{
	public class Type_LatLonBoundingBox : Altova.Xml.Node
	{
		#region Documentation
		public static string GetAnnoDocumentation() { return ""; }
		#endregion

		#region Forward constructors

		public Type_LatLonBoundingBox() : base() { SetCollectionParents(); }

		public Type_LatLonBoundingBox(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public Type_LatLonBoundingBox(XmlNode node) : base(node) { SetCollectionParents(); }
		public Type_LatLonBoundingBox(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public Type_LatLonBoundingBox(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "North" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "North", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_LatitudeCoordinate(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "South" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "South", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_LatitudeCoordinate(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "West" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "West", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_LongitudeCoordinate(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "East" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "East", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_LongitudeCoordinate(DOMNode).AdjustPrefix();
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "Type_LatLonBoundingBox");
		}


		#region North Documentation
		public static string GetNorthAnnoDocumentation()
		{
			return "";		
		}
		public static string GetNorthDefault()
		{
			return "";		
		}
		#endregion

		#region North accessor methods
		public static int GetNorthMinCount()
		{
			return 1;
		}

		public static int NorthMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetNorthMaxCount()
		{
			return 1;
		}

		public static int NorthMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNorthCount()
		{
			return DomChildCount(NodeType.Element, "", "North");
		}

		public int NorthCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "North");
			}
		}

		public bool HasNorth()
		{
			return HasDomChild(NodeType.Element, "", "North");
		}

		public Type_LatitudeCoordinate NewNorth()
		{
			return new Type_LatitudeCoordinate(domNode.OwnerDocument.CreateElement("North", ""));
		}

		public Type_LatitudeCoordinate GetNorthAt(int index)
		{
			return new Type_LatitudeCoordinate(GetDomChildAt(NodeType.Element, "", "North", index));
		}

		public XmlNode GetStartingNorthCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "North" );
		}

		public XmlNode GetAdvancedNorthCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "North", curNode );
		}

		public Type_LatitudeCoordinate GetNorthValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_LatitudeCoordinate( curNode );
		}


		public Type_LatitudeCoordinate GetNorth()
		{
			return GetNorthAt(0);
		}

		public Type_LatitudeCoordinate North
		{
			get
			{
				return GetNorthAt(0);
			}
		}

		public void RemoveNorthAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "North", index);
		}

		public void RemoveNorth()
		{
			RemoveNorthAt(0);
		}

		public XmlNode AddNorth(Type_LatitudeCoordinate newValue)
		{
			return AppendDomElement("", "North", newValue);
		}

		public void InsertNorthAt(Type_LatitudeCoordinate newValue, int index)
		{
			InsertDomElementAt("", "North", index, newValue);
		}

		public void ReplaceNorthAt(Type_LatitudeCoordinate newValue, int index)
		{
			ReplaceDomElementAt("", "North", index, newValue);
		}
		#endregion // North accessor methods

		#region North collection
        public NorthCollection	MyNorths = new NorthCollection( );

        public class NorthCollection: IEnumerable
        {
            Type_LatLonBoundingBox parent;
            public Type_LatLonBoundingBox Parent
			{
				set
				{
					parent = value;
				}
			}
			public NorthEnumerator GetEnumerator() 
			{
				return new NorthEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NorthEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LatLonBoundingBox parent;
			public NorthEnumerator(Type_LatLonBoundingBox par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NorthCount );
			}
			public Type_LatitudeCoordinate  Current 
			{
				get 
				{
					return(parent.GetNorthAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // North collection

		#region South Documentation
		public static string GetSouthAnnoDocumentation()
		{
			return "";		
		}
		public static string GetSouthDefault()
		{
			return "";		
		}
		#endregion

		#region South accessor methods
		public static int GetSouthMinCount()
		{
			return 1;
		}

		public static int SouthMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetSouthMaxCount()
		{
			return 1;
		}

		public static int SouthMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetSouthCount()
		{
			return DomChildCount(NodeType.Element, "", "South");
		}

		public int SouthCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "South");
			}
		}

		public bool HasSouth()
		{
			return HasDomChild(NodeType.Element, "", "South");
		}

		public Type_LatitudeCoordinate NewSouth()
		{
			return new Type_LatitudeCoordinate(domNode.OwnerDocument.CreateElement("South", ""));
		}

		public Type_LatitudeCoordinate GetSouthAt(int index)
		{
			return new Type_LatitudeCoordinate(GetDomChildAt(NodeType.Element, "", "South", index));
		}

		public XmlNode GetStartingSouthCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "South" );
		}

		public XmlNode GetAdvancedSouthCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "South", curNode );
		}

		public Type_LatitudeCoordinate GetSouthValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_LatitudeCoordinate( curNode );
		}


		public Type_LatitudeCoordinate GetSouth()
		{
			return GetSouthAt(0);
		}

		public Type_LatitudeCoordinate South
		{
			get
			{
				return GetSouthAt(0);
			}
		}

		public void RemoveSouthAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "South", index);
		}

		public void RemoveSouth()
		{
			RemoveSouthAt(0);
		}

		public XmlNode AddSouth(Type_LatitudeCoordinate newValue)
		{
			return AppendDomElement("", "South", newValue);
		}

		public void InsertSouthAt(Type_LatitudeCoordinate newValue, int index)
		{
			InsertDomElementAt("", "South", index, newValue);
		}

		public void ReplaceSouthAt(Type_LatitudeCoordinate newValue, int index)
		{
			ReplaceDomElementAt("", "South", index, newValue);
		}
		#endregion // South accessor methods

		#region South collection
        public SouthCollection	MySouths = new SouthCollection( );

        public class SouthCollection: IEnumerable
        {
            Type_LatLonBoundingBox parent;
            public Type_LatLonBoundingBox Parent
			{
				set
				{
					parent = value;
				}
			}
			public SouthEnumerator GetEnumerator() 
			{
				return new SouthEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class SouthEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LatLonBoundingBox parent;
			public SouthEnumerator(Type_LatLonBoundingBox par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.SouthCount );
			}
			public Type_LatitudeCoordinate  Current 
			{
				get 
				{
					return(parent.GetSouthAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // South collection

		#region West Documentation
		public static string GetWestAnnoDocumentation()
		{
			return "";		
		}
		public static string GetWestDefault()
		{
			return "";		
		}
		#endregion

		#region West accessor methods
		public static int GetWestMinCount()
		{
			return 1;
		}

		public static int WestMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetWestMaxCount()
		{
			return 1;
		}

		public static int WestMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetWestCount()
		{
			return DomChildCount(NodeType.Element, "", "West");
		}

		public int WestCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "West");
			}
		}

		public bool HasWest()
		{
			return HasDomChild(NodeType.Element, "", "West");
		}

		public Type_LongitudeCoordinate NewWest()
		{
			return new Type_LongitudeCoordinate(domNode.OwnerDocument.CreateElement("West", ""));
		}

		public Type_LongitudeCoordinate GetWestAt(int index)
		{
			return new Type_LongitudeCoordinate(GetDomChildAt(NodeType.Element, "", "West", index));
		}

		public XmlNode GetStartingWestCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "West" );
		}

		public XmlNode GetAdvancedWestCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "West", curNode );
		}

		public Type_LongitudeCoordinate GetWestValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_LongitudeCoordinate( curNode );
		}


		public Type_LongitudeCoordinate GetWest()
		{
			return GetWestAt(0);
		}

		public Type_LongitudeCoordinate West
		{
			get
			{
				return GetWestAt(0);
			}
		}

		public void RemoveWestAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "West", index);
		}

		public void RemoveWest()
		{
			RemoveWestAt(0);
		}

		public XmlNode AddWest(Type_LongitudeCoordinate newValue)
		{
			return AppendDomElement("", "West", newValue);
		}

		public void InsertWestAt(Type_LongitudeCoordinate newValue, int index)
		{
			InsertDomElementAt("", "West", index, newValue);
		}

		public void ReplaceWestAt(Type_LongitudeCoordinate newValue, int index)
		{
			ReplaceDomElementAt("", "West", index, newValue);
		}
		#endregion // West accessor methods

		#region West collection
        public WestCollection	MyWests = new WestCollection( );

        public class WestCollection: IEnumerable
        {
            Type_LatLonBoundingBox parent;
            public Type_LatLonBoundingBox Parent
			{
				set
				{
					parent = value;
				}
			}
			public WestEnumerator GetEnumerator() 
			{
				return new WestEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class WestEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LatLonBoundingBox parent;
			public WestEnumerator(Type_LatLonBoundingBox par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.WestCount );
			}
			public Type_LongitudeCoordinate  Current 
			{
				get 
				{
					return(parent.GetWestAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // West collection

		#region East Documentation
		public static string GetEastAnnoDocumentation()
		{
			return "";		
		}
		public static string GetEastDefault()
		{
			return "";		
		}
		#endregion

		#region East accessor methods
		public static int GetEastMinCount()
		{
			return 1;
		}

		public static int EastMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetEastMaxCount()
		{
			return 1;
		}

		public static int EastMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetEastCount()
		{
			return DomChildCount(NodeType.Element, "", "East");
		}

		public int EastCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "East");
			}
		}

		public bool HasEast()
		{
			return HasDomChild(NodeType.Element, "", "East");
		}

		public Type_LongitudeCoordinate NewEast()
		{
			return new Type_LongitudeCoordinate(domNode.OwnerDocument.CreateElement("East", ""));
		}

		public Type_LongitudeCoordinate GetEastAt(int index)
		{
			return new Type_LongitudeCoordinate(GetDomChildAt(NodeType.Element, "", "East", index));
		}

		public XmlNode GetStartingEastCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "East" );
		}

		public XmlNode GetAdvancedEastCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "East", curNode );
		}

		public Type_LongitudeCoordinate GetEastValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_LongitudeCoordinate( curNode );
		}


		public Type_LongitudeCoordinate GetEast()
		{
			return GetEastAt(0);
		}

		public Type_LongitudeCoordinate East
		{
			get
			{
				return GetEastAt(0);
			}
		}

		public void RemoveEastAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "East", index);
		}

		public void RemoveEast()
		{
			RemoveEastAt(0);
		}

		public XmlNode AddEast(Type_LongitudeCoordinate newValue)
		{
			return AppendDomElement("", "East", newValue);
		}

		public void InsertEastAt(Type_LongitudeCoordinate newValue, int index)
		{
			InsertDomElementAt("", "East", index, newValue);
		}

		public void ReplaceEastAt(Type_LongitudeCoordinate newValue, int index)
		{
			ReplaceDomElementAt("", "East", index, newValue);
		}
		#endregion // East accessor methods

		#region East collection
        public EastCollection	MyEasts = new EastCollection( );

        public class EastCollection: IEnumerable
        {
            Type_LatLonBoundingBox parent;
            public Type_LatLonBoundingBox Parent
			{
				set
				{
					parent = value;
				}
			}
			public EastEnumerator GetEnumerator() 
			{
				return new EastEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class EastEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LatLonBoundingBox parent;
			public EastEnumerator(Type_LatLonBoundingBox par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.EastCount );
			}
			public Type_LongitudeCoordinate  Current 
			{
				get 
				{
					return(parent.GetEastAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // East collection

        private void SetCollectionParents()
        {
            MyNorths.Parent = this; 
            MySouths.Parent = this; 
            MyWests.Parent = this; 
            MyEasts.Parent = this; 
	}
}
}
