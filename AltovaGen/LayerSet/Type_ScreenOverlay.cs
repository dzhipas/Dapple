//
// Type_ScreenOverlay.cs
//
// This file was generated by XMLSpy 2007r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LayerSet
{
	public class Type_ScreenOverlay : Altova.Xml.Node
	{
		#region Documentation
		public static string GetAnnoDocumentation() { return ""; }
		#endregion

		#region Forward constructors

		public Type_ScreenOverlay() : base() { SetCollectionParents(); }

		public Type_ScreenOverlay(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public Type_ScreenOverlay(XmlNode node) : base(node) { SetCollectionParents(); }
		public Type_ScreenOverlay(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public Type_ScreenOverlay(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "ShowAtStartup" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "ShowAtStartup", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Name" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Name", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ImageUri" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ImageUri", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Alignment" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Alignment", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "StartX" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "StartX", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "StartY" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "StartY", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Width" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Width", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Height" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Height", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Opacity" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Opacity", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ShowHeader" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ShowHeader", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ClickableUrl" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ClickableUrl", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "Type_ScreenOverlay");
		}


		#region ShowAtStartup Documentation
		public static string GetShowAtStartupAnnoDocumentation()
		{
			return "";		
		}
		public static string GetShowAtStartupDefault()
		{
			return "";		
		}
		#endregion

		#region ShowAtStartup accessor methods
		public static int GetShowAtStartupMinCount()
		{
			return 1;
		}

		public static int ShowAtStartupMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetShowAtStartupMaxCount()
		{
			return 1;
		}

		public static int ShowAtStartupMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetShowAtStartupCount()
		{
			return DomChildCount(NodeType.Attribute, "", "ShowAtStartup");
		}

		public int ShowAtStartupCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "ShowAtStartup");
			}
		}

		public bool HasShowAtStartup()
		{
			return HasDomChild(NodeType.Attribute, "", "ShowAtStartup");
		}

		public SchemaBoolean NewShowAtStartup()
		{
			return new SchemaBoolean();
		}

		public SchemaBoolean GetShowAtStartupAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "ShowAtStartup", index)));
		}

		public XmlNode GetStartingShowAtStartupCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "ShowAtStartup" );
		}

		public XmlNode GetAdvancedShowAtStartupCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "ShowAtStartup", curNode );
		}

		public SchemaBoolean GetShowAtStartupValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaBoolean( curNode.Value );
		}


		public SchemaBoolean GetShowAtStartup()
		{
			return GetShowAtStartupAt(0);
		}

		public SchemaBoolean ShowAtStartup
		{
			get
			{
				return GetShowAtStartupAt(0);
			}
		}

		public void RemoveShowAtStartupAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "ShowAtStartup", index);
		}

		public void RemoveShowAtStartup()
		{
			RemoveShowAtStartupAt(0);
		}

		public XmlNode AddShowAtStartup(SchemaBoolean newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "ShowAtStartup", newValue.ToString());
			return null;
		}

		public void InsertShowAtStartupAt(SchemaBoolean newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "ShowAtStartup", index, newValue.ToString());
		}

		public void ReplaceShowAtStartupAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "ShowAtStartup", index, newValue.ToString());
		}
		#endregion // ShowAtStartup accessor methods

		#region ShowAtStartup collection
        public ShowAtStartupCollection	MyShowAtStartups = new ShowAtStartupCollection( );

        public class ShowAtStartupCollection: IEnumerable
        {
            Type_ScreenOverlay parent;
            public Type_ScreenOverlay Parent
			{
				set
				{
					parent = value;
				}
			}
			public ShowAtStartupEnumerator GetEnumerator() 
			{
				return new ShowAtStartupEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ShowAtStartupEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ScreenOverlay parent;
			public ShowAtStartupEnumerator(Type_ScreenOverlay par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ShowAtStartupCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetShowAtStartupAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ShowAtStartup collection

		#region Name Documentation
		public static string GetNameAnnoDocumentation()
		{
			return "";		
		}
		public static string GetNameDefault()
		{
			return "";		
		}
		#endregion

		#region Name accessor methods
		public static int GetNameMinCount()
		{
			return 1;
		}

		public static int NameMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetNameMaxCount()
		{
			return 1;
		}

		public static int NameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameCount()
		{
			return DomChildCount(NodeType.Element, "", "Name");
		}

		public int NameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Name");
			}
		}

		public bool HasName()
		{
			return HasDomChild(NodeType.Element, "", "Name");
		}

		public SchemaString NewName()
		{
			return new SchemaString();
		}

		public SchemaString GetNameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Name", index)));
		}

		public XmlNode GetStartingNameCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Name" );
		}

		public XmlNode GetAdvancedNameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Name", curNode );
		}

		public SchemaString GetNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetName()
		{
			return GetNameAt(0);
		}

		public SchemaString Name
		{
			get
			{
				return GetNameAt(0);
			}
		}

		public void RemoveNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Name", index);
		}

		public void RemoveName()
		{
			RemoveNameAt(0);
		}

		public XmlNode AddName(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "Name", newValue.ToString());
			return null;
		}

		public void InsertNameAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "Name", index, newValue.ToString());
		}

		public void ReplaceNameAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Name", index, newValue.ToString());
		}
		#endregion // Name accessor methods

		#region Name collection
        public NameCollection	MyNames = new NameCollection( );

        public class NameCollection: IEnumerable
        {
            Type_ScreenOverlay parent;
            public Type_ScreenOverlay Parent
			{
				set
				{
					parent = value;
				}
			}
			public NameEnumerator GetEnumerator() 
			{
				return new NameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NameEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ScreenOverlay parent;
			public NameEnumerator(Type_ScreenOverlay par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NameCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Name collection

		#region ImageUri Documentation
		public static string GetImageUriAnnoDocumentation()
		{
			return "";		
		}
		public static string GetImageUriDefault()
		{
			return "";		
		}
		#endregion

		#region ImageUri accessor methods
		public static int GetImageUriMinCount()
		{
			return 1;
		}

		public static int ImageUriMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetImageUriMaxCount()
		{
			return 1;
		}

		public static int ImageUriMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetImageUriCount()
		{
			return DomChildCount(NodeType.Element, "", "ImageUri");
		}

		public int ImageUriCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ImageUri");
			}
		}

		public bool HasImageUri()
		{
			return HasDomChild(NodeType.Element, "", "ImageUri");
		}

		public SchemaString NewImageUri()
		{
			return new SchemaString();
		}

		public SchemaString GetImageUriAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "ImageUri", index)));
		}

		public XmlNode GetStartingImageUriCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ImageUri" );
		}

		public XmlNode GetAdvancedImageUriCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ImageUri", curNode );
		}

		public SchemaString GetImageUriValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetImageUri()
		{
			return GetImageUriAt(0);
		}

		public SchemaString ImageUri
		{
			get
			{
				return GetImageUriAt(0);
			}
		}

		public void RemoveImageUriAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ImageUri", index);
		}

		public void RemoveImageUri()
		{
			RemoveImageUriAt(0);
		}

		public XmlNode AddImageUri(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "ImageUri", newValue.ToString());
			return null;
		}

		public void InsertImageUriAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "ImageUri", index, newValue.ToString());
		}

		public void ReplaceImageUriAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "ImageUri", index, newValue.ToString());
		}
		#endregion // ImageUri accessor methods

		#region ImageUri collection
        public ImageUriCollection	MyImageUris = new ImageUriCollection( );

        public class ImageUriCollection: IEnumerable
        {
            Type_ScreenOverlay parent;
            public Type_ScreenOverlay Parent
			{
				set
				{
					parent = value;
				}
			}
			public ImageUriEnumerator GetEnumerator() 
			{
				return new ImageUriEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ImageUriEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ScreenOverlay parent;
			public ImageUriEnumerator(Type_ScreenOverlay par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ImageUriCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetImageUriAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ImageUri collection

		#region Alignment Documentation
		public static string GetAlignmentAnnoDocumentation()
		{
			return "";		
		}
		public static string GetAlignmentDefault()
		{
			return "";		
		}
		#endregion

		#region Alignment accessor methods
		public static int GetAlignmentMinCount()
		{
			return 1;
		}

		public static int AlignmentMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetAlignmentMaxCount()
		{
			return 1;
		}

		public static int AlignmentMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetAlignmentCount()
		{
			return DomChildCount(NodeType.Element, "", "Alignment");
		}

		public int AlignmentCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Alignment");
			}
		}

		public bool HasAlignment()
		{
			return HasDomChild(NodeType.Element, "", "Alignment");
		}

		public SchemaString NewAlignment()
		{
			return new SchemaString();
		}

		public SchemaString GetAlignmentAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Alignment", index)));
		}

		public XmlNode GetStartingAlignmentCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Alignment" );
		}

		public XmlNode GetAdvancedAlignmentCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Alignment", curNode );
		}

		public SchemaString GetAlignmentValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetAlignment()
		{
			return GetAlignmentAt(0);
		}

		public SchemaString Alignment
		{
			get
			{
				return GetAlignmentAt(0);
			}
		}

		public void RemoveAlignmentAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Alignment", index);
		}

		public void RemoveAlignment()
		{
			RemoveAlignmentAt(0);
		}

		public XmlNode AddAlignment(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "Alignment", newValue.ToString());
			return null;
		}

		public void InsertAlignmentAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "Alignment", index, newValue.ToString());
		}

		public void ReplaceAlignmentAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Alignment", index, newValue.ToString());
		}
		#endregion // Alignment accessor methods

		#region Alignment collection
        public AlignmentCollection	MyAlignments = new AlignmentCollection( );

        public class AlignmentCollection: IEnumerable
        {
            Type_ScreenOverlay parent;
            public Type_ScreenOverlay Parent
			{
				set
				{
					parent = value;
				}
			}
			public AlignmentEnumerator GetEnumerator() 
			{
				return new AlignmentEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class AlignmentEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ScreenOverlay parent;
			public AlignmentEnumerator(Type_ScreenOverlay par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.AlignmentCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetAlignmentAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Alignment collection

		#region StartX Documentation
		public static string GetStartXAnnoDocumentation()
		{
			return "";		
		}
		public static string GetStartXDefault()
		{
			return "";		
		}
		#endregion

		#region StartX accessor methods
		public static int GetStartXMinCount()
		{
			return 1;
		}

		public static int StartXMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetStartXMaxCount()
		{
			return 1;
		}

		public static int StartXMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetStartXCount()
		{
			return DomChildCount(NodeType.Element, "", "StartX");
		}

		public int StartXCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "StartX");
			}
		}

		public bool HasStartX()
		{
			return HasDomChild(NodeType.Element, "", "StartX");
		}

		public SchemaLong NewStartX()
		{
			return new SchemaLong();
		}

		public SchemaLong GetStartXAt(int index)
		{
			return new SchemaLong(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "StartX", index)));
		}

		public XmlNode GetStartingStartXCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "StartX" );
		}

		public XmlNode GetAdvancedStartXCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "StartX", curNode );
		}

		public SchemaLong GetStartXValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaLong( curNode.InnerText );
		}


		public SchemaLong GetStartX()
		{
			return GetStartXAt(0);
		}

		public SchemaLong StartX
		{
			get
			{
				return GetStartXAt(0);
			}
		}

		public void RemoveStartXAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "StartX", index);
		}

		public void RemoveStartX()
		{
			RemoveStartXAt(0);
		}

		public XmlNode AddStartX(SchemaLong newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "StartX", newValue.ToString());
			return null;
		}

		public void InsertStartXAt(SchemaLong newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "StartX", index, newValue.ToString());
		}

		public void ReplaceStartXAt(SchemaLong newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "StartX", index, newValue.ToString());
		}
		#endregion // StartX accessor methods

		#region StartX collection
        public StartXCollection	MyStartXs = new StartXCollection( );

        public class StartXCollection: IEnumerable
        {
            Type_ScreenOverlay parent;
            public Type_ScreenOverlay Parent
			{
				set
				{
					parent = value;
				}
			}
			public StartXEnumerator GetEnumerator() 
			{
				return new StartXEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class StartXEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ScreenOverlay parent;
			public StartXEnumerator(Type_ScreenOverlay par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.StartXCount );
			}
			public SchemaLong  Current 
			{
				get 
				{
					return(parent.GetStartXAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // StartX collection

		#region StartY Documentation
		public static string GetStartYAnnoDocumentation()
		{
			return "";		
		}
		public static string GetStartYDefault()
		{
			return "";		
		}
		#endregion

		#region StartY accessor methods
		public static int GetStartYMinCount()
		{
			return 1;
		}

		public static int StartYMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetStartYMaxCount()
		{
			return 1;
		}

		public static int StartYMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetStartYCount()
		{
			return DomChildCount(NodeType.Element, "", "StartY");
		}

		public int StartYCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "StartY");
			}
		}

		public bool HasStartY()
		{
			return HasDomChild(NodeType.Element, "", "StartY");
		}

		public SchemaLong NewStartY()
		{
			return new SchemaLong();
		}

		public SchemaLong GetStartYAt(int index)
		{
			return new SchemaLong(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "StartY", index)));
		}

		public XmlNode GetStartingStartYCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "StartY" );
		}

		public XmlNode GetAdvancedStartYCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "StartY", curNode );
		}

		public SchemaLong GetStartYValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaLong( curNode.InnerText );
		}


		public SchemaLong GetStartY()
		{
			return GetStartYAt(0);
		}

		public SchemaLong StartY
		{
			get
			{
				return GetStartYAt(0);
			}
		}

		public void RemoveStartYAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "StartY", index);
		}

		public void RemoveStartY()
		{
			RemoveStartYAt(0);
		}

		public XmlNode AddStartY(SchemaLong newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "StartY", newValue.ToString());
			return null;
		}

		public void InsertStartYAt(SchemaLong newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "StartY", index, newValue.ToString());
		}

		public void ReplaceStartYAt(SchemaLong newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "StartY", index, newValue.ToString());
		}
		#endregion // StartY accessor methods

		#region StartY collection
        public StartYCollection	MyStartYs = new StartYCollection( );

        public class StartYCollection: IEnumerable
        {
            Type_ScreenOverlay parent;
            public Type_ScreenOverlay Parent
			{
				set
				{
					parent = value;
				}
			}
			public StartYEnumerator GetEnumerator() 
			{
				return new StartYEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class StartYEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ScreenOverlay parent;
			public StartYEnumerator(Type_ScreenOverlay par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.StartYCount );
			}
			public SchemaLong  Current 
			{
				get 
				{
					return(parent.GetStartYAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // StartY collection

		#region Width Documentation
		public static string GetWidthAnnoDocumentation()
		{
			return "";		
		}
		public static string GetWidthDefault()
		{
			return "";		
		}
		#endregion

		#region Width accessor methods
		public static int GetWidthMinCount()
		{
			return 1;
		}

		public static int WidthMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetWidthMaxCount()
		{
			return 1;
		}

		public static int WidthMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetWidthCount()
		{
			return DomChildCount(NodeType.Element, "", "Width");
		}

		public int WidthCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Width");
			}
		}

		public bool HasWidth()
		{
			return HasDomChild(NodeType.Element, "", "Width");
		}

		public SchemaLong NewWidth()
		{
			return new SchemaLong();
		}

		public SchemaLong GetWidthAt(int index)
		{
			return new SchemaLong(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Width", index)));
		}

		public XmlNode GetStartingWidthCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Width" );
		}

		public XmlNode GetAdvancedWidthCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Width", curNode );
		}

		public SchemaLong GetWidthValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaLong( curNode.InnerText );
		}


		public SchemaLong GetWidth()
		{
			return GetWidthAt(0);
		}

		public SchemaLong Width
		{
			get
			{
				return GetWidthAt(0);
			}
		}

		public void RemoveWidthAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Width", index);
		}

		public void RemoveWidth()
		{
			RemoveWidthAt(0);
		}

		public XmlNode AddWidth(SchemaLong newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "Width", newValue.ToString());
			return null;
		}

		public void InsertWidthAt(SchemaLong newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "Width", index, newValue.ToString());
		}

		public void ReplaceWidthAt(SchemaLong newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Width", index, newValue.ToString());
		}
		#endregion // Width accessor methods

		#region Width collection
        public WidthCollection	MyWidths = new WidthCollection( );

        public class WidthCollection: IEnumerable
        {
            Type_ScreenOverlay parent;
            public Type_ScreenOverlay Parent
			{
				set
				{
					parent = value;
				}
			}
			public WidthEnumerator GetEnumerator() 
			{
				return new WidthEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class WidthEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ScreenOverlay parent;
			public WidthEnumerator(Type_ScreenOverlay par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.WidthCount );
			}
			public SchemaLong  Current 
			{
				get 
				{
					return(parent.GetWidthAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Width collection

		#region Height Documentation
		public static string GetHeightAnnoDocumentation()
		{
			return "";		
		}
		public static string GetHeightDefault()
		{
			return "";		
		}
		#endregion

		#region Height accessor methods
		public static int GetHeightMinCount()
		{
			return 1;
		}

		public static int HeightMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetHeightMaxCount()
		{
			return 1;
		}

		public static int HeightMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetHeightCount()
		{
			return DomChildCount(NodeType.Element, "", "Height");
		}

		public int HeightCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Height");
			}
		}

		public bool HasHeight()
		{
			return HasDomChild(NodeType.Element, "", "Height");
		}

		public SchemaLong NewHeight()
		{
			return new SchemaLong();
		}

		public SchemaLong GetHeightAt(int index)
		{
			return new SchemaLong(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Height", index)));
		}

		public XmlNode GetStartingHeightCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Height" );
		}

		public XmlNode GetAdvancedHeightCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Height", curNode );
		}

		public SchemaLong GetHeightValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaLong( curNode.InnerText );
		}


		public SchemaLong GetHeight()
		{
			return GetHeightAt(0);
		}

		public SchemaLong Height
		{
			get
			{
				return GetHeightAt(0);
			}
		}

		public void RemoveHeightAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Height", index);
		}

		public void RemoveHeight()
		{
			RemoveHeightAt(0);
		}

		public XmlNode AddHeight(SchemaLong newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "Height", newValue.ToString());
			return null;
		}

		public void InsertHeightAt(SchemaLong newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "Height", index, newValue.ToString());
		}

		public void ReplaceHeightAt(SchemaLong newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Height", index, newValue.ToString());
		}
		#endregion // Height accessor methods

		#region Height collection
        public HeightCollection	MyHeights = new HeightCollection( );

        public class HeightCollection: IEnumerable
        {
            Type_ScreenOverlay parent;
            public Type_ScreenOverlay Parent
			{
				set
				{
					parent = value;
				}
			}
			public HeightEnumerator GetEnumerator() 
			{
				return new HeightEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class HeightEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ScreenOverlay parent;
			public HeightEnumerator(Type_ScreenOverlay par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.HeightCount );
			}
			public SchemaLong  Current 
			{
				get 
				{
					return(parent.GetHeightAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Height collection

		#region Opacity Documentation
		public static string GetOpacityAnnoDocumentation()
		{
			return "";		
		}
		public static string GetOpacityDefault()
		{
			return "";		
		}
		#endregion

		#region Opacity accessor methods
		public static int GetOpacityMinCount()
		{
			return 1;
		}

		public static int OpacityMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetOpacityMaxCount()
		{
			return 1;
		}

		public static int OpacityMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetOpacityCount()
		{
			return DomChildCount(NodeType.Element, "", "Opacity");
		}

		public int OpacityCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Opacity");
			}
		}

		public bool HasOpacity()
		{
			return HasDomChild(NodeType.Element, "", "Opacity");
		}

		public SchemaLong NewOpacity()
		{
			return new SchemaLong();
		}

		public SchemaLong GetOpacityAt(int index)
		{
			return new SchemaLong(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Opacity", index)));
		}

		public XmlNode GetStartingOpacityCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Opacity" );
		}

		public XmlNode GetAdvancedOpacityCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Opacity", curNode );
		}

		public SchemaLong GetOpacityValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaLong( curNode.InnerText );
		}


		public SchemaLong GetOpacity()
		{
			return GetOpacityAt(0);
		}

		public SchemaLong Opacity
		{
			get
			{
				return GetOpacityAt(0);
			}
		}

		public void RemoveOpacityAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Opacity", index);
		}

		public void RemoveOpacity()
		{
			RemoveOpacityAt(0);
		}

		public XmlNode AddOpacity(SchemaLong newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "Opacity", newValue.ToString());
			return null;
		}

		public void InsertOpacityAt(SchemaLong newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "Opacity", index, newValue.ToString());
		}

		public void ReplaceOpacityAt(SchemaLong newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Opacity", index, newValue.ToString());
		}
		#endregion // Opacity accessor methods

		#region Opacity collection
        public OpacityCollection	MyOpacitys = new OpacityCollection( );

        public class OpacityCollection: IEnumerable
        {
            Type_ScreenOverlay parent;
            public Type_ScreenOverlay Parent
			{
				set
				{
					parent = value;
				}
			}
			public OpacityEnumerator GetEnumerator() 
			{
				return new OpacityEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class OpacityEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ScreenOverlay parent;
			public OpacityEnumerator(Type_ScreenOverlay par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.OpacityCount );
			}
			public SchemaLong  Current 
			{
				get 
				{
					return(parent.GetOpacityAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Opacity collection

		#region ShowHeader Documentation
		public static string GetShowHeaderAnnoDocumentation()
		{
			return "";		
		}
		public static string GetShowHeaderDefault()
		{
			return "";		
		}
		#endregion

		#region ShowHeader accessor methods
		public static int GetShowHeaderMinCount()
		{
			return 0;
		}

		public static int ShowHeaderMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetShowHeaderMaxCount()
		{
			return 1;
		}

		public static int ShowHeaderMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetShowHeaderCount()
		{
			return DomChildCount(NodeType.Element, "", "ShowHeader");
		}

		public int ShowHeaderCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ShowHeader");
			}
		}

		public bool HasShowHeader()
		{
			return HasDomChild(NodeType.Element, "", "ShowHeader");
		}

		public SchemaBoolean NewShowHeader()
		{
			return new SchemaBoolean();
		}

		public SchemaBoolean GetShowHeaderAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "ShowHeader", index)));
		}

		public XmlNode GetStartingShowHeaderCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ShowHeader" );
		}

		public XmlNode GetAdvancedShowHeaderCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ShowHeader", curNode );
		}

		public SchemaBoolean GetShowHeaderValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaBoolean( curNode.InnerText );
		}


		public SchemaBoolean GetShowHeader()
		{
			return GetShowHeaderAt(0);
		}

		public SchemaBoolean ShowHeader
		{
			get
			{
				return GetShowHeaderAt(0);
			}
		}

		public void RemoveShowHeaderAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ShowHeader", index);
		}

		public void RemoveShowHeader()
		{
			RemoveShowHeaderAt(0);
		}

		public XmlNode AddShowHeader(SchemaBoolean newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "ShowHeader", newValue.ToString());
			return null;
		}

		public void InsertShowHeaderAt(SchemaBoolean newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "ShowHeader", index, newValue.ToString());
		}

		public void ReplaceShowHeaderAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "ShowHeader", index, newValue.ToString());
		}
		#endregion // ShowHeader accessor methods

		#region ShowHeader collection
        public ShowHeaderCollection	MyShowHeaders = new ShowHeaderCollection( );

        public class ShowHeaderCollection: IEnumerable
        {
            Type_ScreenOverlay parent;
            public Type_ScreenOverlay Parent
			{
				set
				{
					parent = value;
				}
			}
			public ShowHeaderEnumerator GetEnumerator() 
			{
				return new ShowHeaderEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ShowHeaderEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ScreenOverlay parent;
			public ShowHeaderEnumerator(Type_ScreenOverlay par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ShowHeaderCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetShowHeaderAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ShowHeader collection

		#region ClickableUrl Documentation
		public static string GetClickableUrlAnnoDocumentation()
		{
			return "";		
		}
		public static string GetClickableUrlDefault()
		{
			return "";		
		}
		#endregion

		#region ClickableUrl accessor methods
		public static int GetClickableUrlMinCount()
		{
			return 0;
		}

		public static int ClickableUrlMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetClickableUrlMaxCount()
		{
			return 1;
		}

		public static int ClickableUrlMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetClickableUrlCount()
		{
			return DomChildCount(NodeType.Element, "", "ClickableUrl");
		}

		public int ClickableUrlCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ClickableUrl");
			}
		}

		public bool HasClickableUrl()
		{
			return HasDomChild(NodeType.Element, "", "ClickableUrl");
		}

		public SchemaString NewClickableUrl()
		{
			return new SchemaString();
		}

		public SchemaString GetClickableUrlAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "ClickableUrl", index)));
		}

		public XmlNode GetStartingClickableUrlCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ClickableUrl" );
		}

		public XmlNode GetAdvancedClickableUrlCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ClickableUrl", curNode );
		}

		public SchemaString GetClickableUrlValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetClickableUrl()
		{
			return GetClickableUrlAt(0);
		}

		public SchemaString ClickableUrl
		{
			get
			{
				return GetClickableUrlAt(0);
			}
		}

		public void RemoveClickableUrlAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ClickableUrl", index);
		}

		public void RemoveClickableUrl()
		{
			RemoveClickableUrlAt(0);
		}

		public XmlNode AddClickableUrl(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "ClickableUrl", newValue.ToString());
			return null;
		}

		public void InsertClickableUrlAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "ClickableUrl", index, newValue.ToString());
		}

		public void ReplaceClickableUrlAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "ClickableUrl", index, newValue.ToString());
		}
		#endregion // ClickableUrl accessor methods

		#region ClickableUrl collection
        public ClickableUrlCollection	MyClickableUrls = new ClickableUrlCollection( );

        public class ClickableUrlCollection: IEnumerable
        {
            Type_ScreenOverlay parent;
            public Type_ScreenOverlay Parent
			{
				set
				{
					parent = value;
				}
			}
			public ClickableUrlEnumerator GetEnumerator() 
			{
				return new ClickableUrlEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ClickableUrlEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ScreenOverlay parent;
			public ClickableUrlEnumerator(Type_ScreenOverlay par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ClickableUrlCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetClickableUrlAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ClickableUrl collection

        private void SetCollectionParents()
        {
            MyShowAtStartups.Parent = this; 
            MyNames.Parent = this; 
            MyImageUris.Parent = this; 
            MyAlignments.Parent = this; 
            MyStartXs.Parent = this; 
            MyStartYs.Parent = this; 
            MyWidths.Parent = this; 
            MyHeights.Parent = this; 
            MyOpacitys.Parent = this; 
            MyShowHeaders.Parent = this; 
            MyClickableUrls.Parent = this; 
	}
}
}
