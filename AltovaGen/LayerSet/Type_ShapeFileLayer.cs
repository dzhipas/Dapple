//
// Type_ShapeFileLayer.cs
//
// This file was generated by XMLSpy 2007r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LayerSet
{
	public class Type_ShapeFileLayer : Altova.Xml.Node
	{
		#region Documentation
		public static string GetAnnoDocumentation() { return ""; }
		#endregion

		#region Forward constructors

		public Type_ShapeFileLayer() : base() { SetCollectionParents(); }

		public Type_ShapeFileLayer(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public Type_ShapeFileLayer(XmlNode node) : base(node) { SetCollectionParents(); }
		public Type_ShapeFileLayer(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public Type_ShapeFileLayer(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "ShowAtStartup" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "ShowAtStartup", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Name" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Name", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "DistanceAboveSurface" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "DistanceAboveSurface", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "MasterFilePath" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "MasterFilePath", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "MinimumViewAltitude" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "MinimumViewAltitude", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "MaximumViewAltitude" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "MaximumViewAltitude", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ShowPoints" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ShowPoints", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ShowBoundaries" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ShowBoundaries", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ShowFilledRegions" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ShowFilledRegions", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ScalarKey" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ScalarKey", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ShowScalarValues" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ShowScalarValues", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "DisplayFont" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "DisplayFont", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_DisplayFont(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "RGBColor" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "RGBColor", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_RGBColor(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "WinColorName" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "WinColorName", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ExtendedInformation" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ExtendedInformation", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_ExtendedInformation(DOMNode).AdjustPrefix();
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "Type_ShapeFileLayer");
		}


		#region ShowAtStartup Documentation
		public static string GetShowAtStartupAnnoDocumentation()
		{
			return "";		
		}
		public static string GetShowAtStartupDefault()
		{
			return "";		
		}
		#endregion

		#region ShowAtStartup accessor methods
		public static int GetShowAtStartupMinCount()
		{
			return 1;
		}

		public static int ShowAtStartupMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetShowAtStartupMaxCount()
		{
			return 1;
		}

		public static int ShowAtStartupMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetShowAtStartupCount()
		{
			return DomChildCount(NodeType.Attribute, "", "ShowAtStartup");
		}

		public int ShowAtStartupCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "ShowAtStartup");
			}
		}

		public bool HasShowAtStartup()
		{
			return HasDomChild(NodeType.Attribute, "", "ShowAtStartup");
		}

		public SchemaBoolean NewShowAtStartup()
		{
			return new SchemaBoolean();
		}

		public SchemaBoolean GetShowAtStartupAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "ShowAtStartup", index)));
		}

		public XmlNode GetStartingShowAtStartupCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "ShowAtStartup" );
		}

		public XmlNode GetAdvancedShowAtStartupCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "ShowAtStartup", curNode );
		}

		public SchemaBoolean GetShowAtStartupValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaBoolean( curNode.Value );
		}


		public SchemaBoolean GetShowAtStartup()
		{
			return GetShowAtStartupAt(0);
		}

		public SchemaBoolean ShowAtStartup
		{
			get
			{
				return GetShowAtStartupAt(0);
			}
		}

		public void RemoveShowAtStartupAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "ShowAtStartup", index);
		}

		public void RemoveShowAtStartup()
		{
			RemoveShowAtStartupAt(0);
		}

		public XmlNode AddShowAtStartup(SchemaBoolean newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "ShowAtStartup", newValue.ToString());
			return null;
		}

		public void InsertShowAtStartupAt(SchemaBoolean newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "ShowAtStartup", index, newValue.ToString());
		}

		public void ReplaceShowAtStartupAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "ShowAtStartup", index, newValue.ToString());
		}
		#endregion // ShowAtStartup accessor methods

		#region ShowAtStartup collection
        public ShowAtStartupCollection	MyShowAtStartups = new ShowAtStartupCollection( );

        public class ShowAtStartupCollection: IEnumerable
        {
            Type_ShapeFileLayer parent;
            public Type_ShapeFileLayer Parent
			{
				set
				{
					parent = value;
				}
			}
			public ShowAtStartupEnumerator GetEnumerator() 
			{
				return new ShowAtStartupEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ShowAtStartupEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ShapeFileLayer parent;
			public ShowAtStartupEnumerator(Type_ShapeFileLayer par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ShowAtStartupCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetShowAtStartupAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ShowAtStartup collection

		#region Name Documentation
		public static string GetNameAnnoDocumentation()
		{
			return "";		
		}
		public static string GetNameDefault()
		{
			return "";		
		}
		#endregion

		#region Name accessor methods
		public static int GetNameMinCount()
		{
			return 1;
		}

		public static int NameMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetNameMaxCount()
		{
			return 1;
		}

		public static int NameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameCount()
		{
			return DomChildCount(NodeType.Element, "", "Name");
		}

		public int NameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Name");
			}
		}

		public bool HasName()
		{
			return HasDomChild(NodeType.Element, "", "Name");
		}

		public SchemaString NewName()
		{
			return new SchemaString();
		}

		public SchemaString GetNameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Name", index)));
		}

		public XmlNode GetStartingNameCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Name" );
		}

		public XmlNode GetAdvancedNameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Name", curNode );
		}

		public SchemaString GetNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetName()
		{
			return GetNameAt(0);
		}

		public SchemaString Name
		{
			get
			{
				return GetNameAt(0);
			}
		}

		public void RemoveNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Name", index);
		}

		public void RemoveName()
		{
			RemoveNameAt(0);
		}

		public XmlNode AddName(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "Name", newValue.ToString());
			return null;
		}

		public void InsertNameAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "Name", index, newValue.ToString());
		}

		public void ReplaceNameAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Name", index, newValue.ToString());
		}
		#endregion // Name accessor methods

		#region Name collection
        public NameCollection	MyNames = new NameCollection( );

        public class NameCollection: IEnumerable
        {
            Type_ShapeFileLayer parent;
            public Type_ShapeFileLayer Parent
			{
				set
				{
					parent = value;
				}
			}
			public NameEnumerator GetEnumerator() 
			{
				return new NameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NameEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ShapeFileLayer parent;
			public NameEnumerator(Type_ShapeFileLayer par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NameCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Name collection

		#region DistanceAboveSurface Documentation
		public static string GetDistanceAboveSurfaceAnnoDocumentation()
		{
			return "";		
		}
		public static string GetDistanceAboveSurfaceDefault()
		{
			return "";		
		}
		#endregion

		#region DistanceAboveSurface accessor methods
		public static int GetDistanceAboveSurfaceMinCount()
		{
			return 1;
		}

		public static int DistanceAboveSurfaceMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetDistanceAboveSurfaceMaxCount()
		{
			return 1;
		}

		public static int DistanceAboveSurfaceMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDistanceAboveSurfaceCount()
		{
			return DomChildCount(NodeType.Element, "", "DistanceAboveSurface");
		}

		public int DistanceAboveSurfaceCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "DistanceAboveSurface");
			}
		}

		public bool HasDistanceAboveSurface()
		{
			return HasDomChild(NodeType.Element, "", "DistanceAboveSurface");
		}

		public SchemaDouble NewDistanceAboveSurface()
		{
			return new SchemaDouble();
		}

		public SchemaDouble GetDistanceAboveSurfaceAt(int index)
		{
			return new SchemaDouble(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "DistanceAboveSurface", index)));
		}

		public XmlNode GetStartingDistanceAboveSurfaceCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "DistanceAboveSurface" );
		}

		public XmlNode GetAdvancedDistanceAboveSurfaceCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "DistanceAboveSurface", curNode );
		}

		public SchemaDouble GetDistanceAboveSurfaceValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDouble( curNode.InnerText );
		}


		public SchemaDouble GetDistanceAboveSurface()
		{
			return GetDistanceAboveSurfaceAt(0);
		}

		public SchemaDouble DistanceAboveSurface
		{
			get
			{
				return GetDistanceAboveSurfaceAt(0);
			}
		}

		public void RemoveDistanceAboveSurfaceAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "DistanceAboveSurface", index);
		}

		public void RemoveDistanceAboveSurface()
		{
			RemoveDistanceAboveSurfaceAt(0);
		}

		public XmlNode AddDistanceAboveSurface(SchemaDouble newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "DistanceAboveSurface", newValue.ToString());
			return null;
		}

		public void InsertDistanceAboveSurfaceAt(SchemaDouble newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "DistanceAboveSurface", index, newValue.ToString());
		}

		public void ReplaceDistanceAboveSurfaceAt(SchemaDouble newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "DistanceAboveSurface", index, newValue.ToString());
		}
		#endregion // DistanceAboveSurface accessor methods

		#region DistanceAboveSurface collection
        public DistanceAboveSurfaceCollection	MyDistanceAboveSurfaces = new DistanceAboveSurfaceCollection( );

        public class DistanceAboveSurfaceCollection: IEnumerable
        {
            Type_ShapeFileLayer parent;
            public Type_ShapeFileLayer Parent
			{
				set
				{
					parent = value;
				}
			}
			public DistanceAboveSurfaceEnumerator GetEnumerator() 
			{
				return new DistanceAboveSurfaceEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class DistanceAboveSurfaceEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ShapeFileLayer parent;
			public DistanceAboveSurfaceEnumerator(Type_ShapeFileLayer par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.DistanceAboveSurfaceCount );
			}
			public SchemaDouble  Current 
			{
				get 
				{
					return(parent.GetDistanceAboveSurfaceAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // DistanceAboveSurface collection

		#region MasterFilePath Documentation
		public static string GetMasterFilePathAnnoDocumentation()
		{
			return "";		
		}
		public static string GetMasterFilePathDefault()
		{
			return "";		
		}
		#endregion

		#region MasterFilePath accessor methods
		public static int GetMasterFilePathMinCount()
		{
			return 1;
		}

		public static int MasterFilePathMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetMasterFilePathMaxCount()
		{
			return 1;
		}

		public static int MasterFilePathMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetMasterFilePathCount()
		{
			return DomChildCount(NodeType.Element, "", "MasterFilePath");
		}

		public int MasterFilePathCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "MasterFilePath");
			}
		}

		public bool HasMasterFilePath()
		{
			return HasDomChild(NodeType.Element, "", "MasterFilePath");
		}

		public SchemaString NewMasterFilePath()
		{
			return new SchemaString();
		}

		public SchemaString GetMasterFilePathAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "MasterFilePath", index)));
		}

		public XmlNode GetStartingMasterFilePathCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "MasterFilePath" );
		}

		public XmlNode GetAdvancedMasterFilePathCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "MasterFilePath", curNode );
		}

		public SchemaString GetMasterFilePathValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetMasterFilePath()
		{
			return GetMasterFilePathAt(0);
		}

		public SchemaString MasterFilePath
		{
			get
			{
				return GetMasterFilePathAt(0);
			}
		}

		public void RemoveMasterFilePathAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "MasterFilePath", index);
		}

		public void RemoveMasterFilePath()
		{
			RemoveMasterFilePathAt(0);
		}

		public XmlNode AddMasterFilePath(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "MasterFilePath", newValue.ToString());
			return null;
		}

		public void InsertMasterFilePathAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "MasterFilePath", index, newValue.ToString());
		}

		public void ReplaceMasterFilePathAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "MasterFilePath", index, newValue.ToString());
		}
		#endregion // MasterFilePath accessor methods

		#region MasterFilePath collection
        public MasterFilePathCollection	MyMasterFilePaths = new MasterFilePathCollection( );

        public class MasterFilePathCollection: IEnumerable
        {
            Type_ShapeFileLayer parent;
            public Type_ShapeFileLayer Parent
			{
				set
				{
					parent = value;
				}
			}
			public MasterFilePathEnumerator GetEnumerator() 
			{
				return new MasterFilePathEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class MasterFilePathEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ShapeFileLayer parent;
			public MasterFilePathEnumerator(Type_ShapeFileLayer par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.MasterFilePathCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetMasterFilePathAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // MasterFilePath collection

		#region MinimumViewAltitude Documentation
		public static string GetMinimumViewAltitudeAnnoDocumentation()
		{
			return "";		
		}
		public static string GetMinimumViewAltitudeDefault()
		{
			return "";		
		}
		#endregion

		#region MinimumViewAltitude accessor methods
		public static int GetMinimumViewAltitudeMinCount()
		{
			return 1;
		}

		public static int MinimumViewAltitudeMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetMinimumViewAltitudeMaxCount()
		{
			return 1;
		}

		public static int MinimumViewAltitudeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetMinimumViewAltitudeCount()
		{
			return DomChildCount(NodeType.Element, "", "MinimumViewAltitude");
		}

		public int MinimumViewAltitudeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "MinimumViewAltitude");
			}
		}

		public bool HasMinimumViewAltitude()
		{
			return HasDomChild(NodeType.Element, "", "MinimumViewAltitude");
		}

		public SchemaDouble NewMinimumViewAltitude()
		{
			return new SchemaDouble();
		}

		public SchemaDouble GetMinimumViewAltitudeAt(int index)
		{
			return new SchemaDouble(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "MinimumViewAltitude", index)));
		}

		public XmlNode GetStartingMinimumViewAltitudeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "MinimumViewAltitude" );
		}

		public XmlNode GetAdvancedMinimumViewAltitudeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "MinimumViewAltitude", curNode );
		}

		public SchemaDouble GetMinimumViewAltitudeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDouble( curNode.InnerText );
		}


		public SchemaDouble GetMinimumViewAltitude()
		{
			return GetMinimumViewAltitudeAt(0);
		}

		public SchemaDouble MinimumViewAltitude
		{
			get
			{
				return GetMinimumViewAltitudeAt(0);
			}
		}

		public void RemoveMinimumViewAltitudeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "MinimumViewAltitude", index);
		}

		public void RemoveMinimumViewAltitude()
		{
			RemoveMinimumViewAltitudeAt(0);
		}

		public XmlNode AddMinimumViewAltitude(SchemaDouble newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "MinimumViewAltitude", newValue.ToString());
			return null;
		}

		public void InsertMinimumViewAltitudeAt(SchemaDouble newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "MinimumViewAltitude", index, newValue.ToString());
		}

		public void ReplaceMinimumViewAltitudeAt(SchemaDouble newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "MinimumViewAltitude", index, newValue.ToString());
		}
		#endregion // MinimumViewAltitude accessor methods

		#region MinimumViewAltitude collection
        public MinimumViewAltitudeCollection	MyMinimumViewAltitudes = new MinimumViewAltitudeCollection( );

        public class MinimumViewAltitudeCollection: IEnumerable
        {
            Type_ShapeFileLayer parent;
            public Type_ShapeFileLayer Parent
			{
				set
				{
					parent = value;
				}
			}
			public MinimumViewAltitudeEnumerator GetEnumerator() 
			{
				return new MinimumViewAltitudeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class MinimumViewAltitudeEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ShapeFileLayer parent;
			public MinimumViewAltitudeEnumerator(Type_ShapeFileLayer par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.MinimumViewAltitudeCount );
			}
			public SchemaDouble  Current 
			{
				get 
				{
					return(parent.GetMinimumViewAltitudeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // MinimumViewAltitude collection

		#region MaximumViewAltitude Documentation
		public static string GetMaximumViewAltitudeAnnoDocumentation()
		{
			return "";		
		}
		public static string GetMaximumViewAltitudeDefault()
		{
			return "";		
		}
		#endregion

		#region MaximumViewAltitude accessor methods
		public static int GetMaximumViewAltitudeMinCount()
		{
			return 1;
		}

		public static int MaximumViewAltitudeMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetMaximumViewAltitudeMaxCount()
		{
			return 1;
		}

		public static int MaximumViewAltitudeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetMaximumViewAltitudeCount()
		{
			return DomChildCount(NodeType.Element, "", "MaximumViewAltitude");
		}

		public int MaximumViewAltitudeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "MaximumViewAltitude");
			}
		}

		public bool HasMaximumViewAltitude()
		{
			return HasDomChild(NodeType.Element, "", "MaximumViewAltitude");
		}

		public SchemaDouble NewMaximumViewAltitude()
		{
			return new SchemaDouble();
		}

		public SchemaDouble GetMaximumViewAltitudeAt(int index)
		{
			return new SchemaDouble(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "MaximumViewAltitude", index)));
		}

		public XmlNode GetStartingMaximumViewAltitudeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "MaximumViewAltitude" );
		}

		public XmlNode GetAdvancedMaximumViewAltitudeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "MaximumViewAltitude", curNode );
		}

		public SchemaDouble GetMaximumViewAltitudeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDouble( curNode.InnerText );
		}


		public SchemaDouble GetMaximumViewAltitude()
		{
			return GetMaximumViewAltitudeAt(0);
		}

		public SchemaDouble MaximumViewAltitude
		{
			get
			{
				return GetMaximumViewAltitudeAt(0);
			}
		}

		public void RemoveMaximumViewAltitudeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "MaximumViewAltitude", index);
		}

		public void RemoveMaximumViewAltitude()
		{
			RemoveMaximumViewAltitudeAt(0);
		}

		public XmlNode AddMaximumViewAltitude(SchemaDouble newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "MaximumViewAltitude", newValue.ToString());
			return null;
		}

		public void InsertMaximumViewAltitudeAt(SchemaDouble newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "MaximumViewAltitude", index, newValue.ToString());
		}

		public void ReplaceMaximumViewAltitudeAt(SchemaDouble newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "MaximumViewAltitude", index, newValue.ToString());
		}
		#endregion // MaximumViewAltitude accessor methods

		#region MaximumViewAltitude collection
        public MaximumViewAltitudeCollection	MyMaximumViewAltitudes = new MaximumViewAltitudeCollection( );

        public class MaximumViewAltitudeCollection: IEnumerable
        {
            Type_ShapeFileLayer parent;
            public Type_ShapeFileLayer Parent
			{
				set
				{
					parent = value;
				}
			}
			public MaximumViewAltitudeEnumerator GetEnumerator() 
			{
				return new MaximumViewAltitudeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class MaximumViewAltitudeEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ShapeFileLayer parent;
			public MaximumViewAltitudeEnumerator(Type_ShapeFileLayer par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.MaximumViewAltitudeCount );
			}
			public SchemaDouble  Current 
			{
				get 
				{
					return(parent.GetMaximumViewAltitudeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // MaximumViewAltitude collection

		#region ShowPoints Documentation
		public static string GetShowPointsAnnoDocumentation()
		{
			return "";		
		}
		public static string GetShowPointsDefault()
		{
			return "";		
		}
		#endregion

		#region ShowPoints accessor methods
		public static int GetShowPointsMinCount()
		{
			return 0;
		}

		public static int ShowPointsMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetShowPointsMaxCount()
		{
			return 1;
		}

		public static int ShowPointsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetShowPointsCount()
		{
			return DomChildCount(NodeType.Element, "", "ShowPoints");
		}

		public int ShowPointsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ShowPoints");
			}
		}

		public bool HasShowPoints()
		{
			return HasDomChild(NodeType.Element, "", "ShowPoints");
		}

		public SchemaBoolean NewShowPoints()
		{
			return new SchemaBoolean();
		}

		public SchemaBoolean GetShowPointsAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "ShowPoints", index)));
		}

		public XmlNode GetStartingShowPointsCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ShowPoints" );
		}

		public XmlNode GetAdvancedShowPointsCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ShowPoints", curNode );
		}

		public SchemaBoolean GetShowPointsValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaBoolean( curNode.InnerText );
		}


		public SchemaBoolean GetShowPoints()
		{
			return GetShowPointsAt(0);
		}

		public SchemaBoolean ShowPoints
		{
			get
			{
				return GetShowPointsAt(0);
			}
		}

		public void RemoveShowPointsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ShowPoints", index);
		}

		public void RemoveShowPoints()
		{
			RemoveShowPointsAt(0);
		}

		public XmlNode AddShowPoints(SchemaBoolean newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "ShowPoints", newValue.ToString());
			return null;
		}

		public void InsertShowPointsAt(SchemaBoolean newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "ShowPoints", index, newValue.ToString());
		}

		public void ReplaceShowPointsAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "ShowPoints", index, newValue.ToString());
		}
		#endregion // ShowPoints accessor methods

		#region ShowPoints collection
        public ShowPointsCollection	MyShowPointss = new ShowPointsCollection( );

        public class ShowPointsCollection: IEnumerable
        {
            Type_ShapeFileLayer parent;
            public Type_ShapeFileLayer Parent
			{
				set
				{
					parent = value;
				}
			}
			public ShowPointsEnumerator GetEnumerator() 
			{
				return new ShowPointsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ShowPointsEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ShapeFileLayer parent;
			public ShowPointsEnumerator(Type_ShapeFileLayer par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ShowPointsCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetShowPointsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ShowPoints collection

		#region ShowBoundaries Documentation
		public static string GetShowBoundariesAnnoDocumentation()
		{
			return "";		
		}
		public static string GetShowBoundariesDefault()
		{
			return "";		
		}
		#endregion

		#region ShowBoundaries accessor methods
		public static int GetShowBoundariesMinCount()
		{
			return 0;
		}

		public static int ShowBoundariesMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetShowBoundariesMaxCount()
		{
			return 1;
		}

		public static int ShowBoundariesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetShowBoundariesCount()
		{
			return DomChildCount(NodeType.Element, "", "ShowBoundaries");
		}

		public int ShowBoundariesCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ShowBoundaries");
			}
		}

		public bool HasShowBoundaries()
		{
			return HasDomChild(NodeType.Element, "", "ShowBoundaries");
		}

		public SchemaBoolean NewShowBoundaries()
		{
			return new SchemaBoolean();
		}

		public SchemaBoolean GetShowBoundariesAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "ShowBoundaries", index)));
		}

		public XmlNode GetStartingShowBoundariesCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ShowBoundaries" );
		}

		public XmlNode GetAdvancedShowBoundariesCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ShowBoundaries", curNode );
		}

		public SchemaBoolean GetShowBoundariesValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaBoolean( curNode.InnerText );
		}


		public SchemaBoolean GetShowBoundaries()
		{
			return GetShowBoundariesAt(0);
		}

		public SchemaBoolean ShowBoundaries
		{
			get
			{
				return GetShowBoundariesAt(0);
			}
		}

		public void RemoveShowBoundariesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ShowBoundaries", index);
		}

		public void RemoveShowBoundaries()
		{
			RemoveShowBoundariesAt(0);
		}

		public XmlNode AddShowBoundaries(SchemaBoolean newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "ShowBoundaries", newValue.ToString());
			return null;
		}

		public void InsertShowBoundariesAt(SchemaBoolean newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "ShowBoundaries", index, newValue.ToString());
		}

		public void ReplaceShowBoundariesAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "ShowBoundaries", index, newValue.ToString());
		}
		#endregion // ShowBoundaries accessor methods

		#region ShowBoundaries collection
        public ShowBoundariesCollection	MyShowBoundariess = new ShowBoundariesCollection( );

        public class ShowBoundariesCollection: IEnumerable
        {
            Type_ShapeFileLayer parent;
            public Type_ShapeFileLayer Parent
			{
				set
				{
					parent = value;
				}
			}
			public ShowBoundariesEnumerator GetEnumerator() 
			{
				return new ShowBoundariesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ShowBoundariesEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ShapeFileLayer parent;
			public ShowBoundariesEnumerator(Type_ShapeFileLayer par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ShowBoundariesCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetShowBoundariesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ShowBoundaries collection

		#region ShowFilledRegions Documentation
		public static string GetShowFilledRegionsAnnoDocumentation()
		{
			return "";		
		}
		public static string GetShowFilledRegionsDefault()
		{
			return "";		
		}
		#endregion

		#region ShowFilledRegions accessor methods
		public static int GetShowFilledRegionsMinCount()
		{
			return 0;
		}

		public static int ShowFilledRegionsMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetShowFilledRegionsMaxCount()
		{
			return 1;
		}

		public static int ShowFilledRegionsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetShowFilledRegionsCount()
		{
			return DomChildCount(NodeType.Element, "", "ShowFilledRegions");
		}

		public int ShowFilledRegionsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ShowFilledRegions");
			}
		}

		public bool HasShowFilledRegions()
		{
			return HasDomChild(NodeType.Element, "", "ShowFilledRegions");
		}

		public SchemaBoolean NewShowFilledRegions()
		{
			return new SchemaBoolean();
		}

		public SchemaBoolean GetShowFilledRegionsAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "ShowFilledRegions", index)));
		}

		public XmlNode GetStartingShowFilledRegionsCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ShowFilledRegions" );
		}

		public XmlNode GetAdvancedShowFilledRegionsCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ShowFilledRegions", curNode );
		}

		public SchemaBoolean GetShowFilledRegionsValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaBoolean( curNode.InnerText );
		}


		public SchemaBoolean GetShowFilledRegions()
		{
			return GetShowFilledRegionsAt(0);
		}

		public SchemaBoolean ShowFilledRegions
		{
			get
			{
				return GetShowFilledRegionsAt(0);
			}
		}

		public void RemoveShowFilledRegionsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ShowFilledRegions", index);
		}

		public void RemoveShowFilledRegions()
		{
			RemoveShowFilledRegionsAt(0);
		}

		public XmlNode AddShowFilledRegions(SchemaBoolean newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "ShowFilledRegions", newValue.ToString());
			return null;
		}

		public void InsertShowFilledRegionsAt(SchemaBoolean newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "ShowFilledRegions", index, newValue.ToString());
		}

		public void ReplaceShowFilledRegionsAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "ShowFilledRegions", index, newValue.ToString());
		}
		#endregion // ShowFilledRegions accessor methods

		#region ShowFilledRegions collection
        public ShowFilledRegionsCollection	MyShowFilledRegionss = new ShowFilledRegionsCollection( );

        public class ShowFilledRegionsCollection: IEnumerable
        {
            Type_ShapeFileLayer parent;
            public Type_ShapeFileLayer Parent
			{
				set
				{
					parent = value;
				}
			}
			public ShowFilledRegionsEnumerator GetEnumerator() 
			{
				return new ShowFilledRegionsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ShowFilledRegionsEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ShapeFileLayer parent;
			public ShowFilledRegionsEnumerator(Type_ShapeFileLayer par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ShowFilledRegionsCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetShowFilledRegionsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ShowFilledRegions collection

		#region ScalarKey Documentation
		public static string GetScalarKeyAnnoDocumentation()
		{
			return "";		
		}
		public static string GetScalarKeyDefault()
		{
			return "";		
		}
		#endregion

		#region ScalarKey accessor methods
		public static int GetScalarKeyMinCount()
		{
			return 0;
		}

		public static int ScalarKeyMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetScalarKeyMaxCount()
		{
			return 1;
		}

		public static int ScalarKeyMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetScalarKeyCount()
		{
			return DomChildCount(NodeType.Element, "", "ScalarKey");
		}

		public int ScalarKeyCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ScalarKey");
			}
		}

		public bool HasScalarKey()
		{
			return HasDomChild(NodeType.Element, "", "ScalarKey");
		}

		public SchemaString NewScalarKey()
		{
			return new SchemaString();
		}

		public SchemaString GetScalarKeyAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "ScalarKey", index)));
		}

		public XmlNode GetStartingScalarKeyCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ScalarKey" );
		}

		public XmlNode GetAdvancedScalarKeyCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ScalarKey", curNode );
		}

		public SchemaString GetScalarKeyValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetScalarKey()
		{
			return GetScalarKeyAt(0);
		}

		public SchemaString ScalarKey
		{
			get
			{
				return GetScalarKeyAt(0);
			}
		}

		public void RemoveScalarKeyAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ScalarKey", index);
		}

		public void RemoveScalarKey()
		{
			RemoveScalarKeyAt(0);
		}

		public XmlNode AddScalarKey(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "ScalarKey", newValue.ToString());
			return null;
		}

		public void InsertScalarKeyAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "ScalarKey", index, newValue.ToString());
		}

		public void ReplaceScalarKeyAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "ScalarKey", index, newValue.ToString());
		}
		#endregion // ScalarKey accessor methods

		#region ScalarKey collection
        public ScalarKeyCollection	MyScalarKeys = new ScalarKeyCollection( );

        public class ScalarKeyCollection: IEnumerable
        {
            Type_ShapeFileLayer parent;
            public Type_ShapeFileLayer Parent
			{
				set
				{
					parent = value;
				}
			}
			public ScalarKeyEnumerator GetEnumerator() 
			{
				return new ScalarKeyEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ScalarKeyEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ShapeFileLayer parent;
			public ScalarKeyEnumerator(Type_ShapeFileLayer par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ScalarKeyCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetScalarKeyAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ScalarKey collection

		#region ShowScalarValues Documentation
		public static string GetShowScalarValuesAnnoDocumentation()
		{
			return "";		
		}
		public static string GetShowScalarValuesDefault()
		{
			return "";		
		}
		#endregion

		#region ShowScalarValues accessor methods
		public static int GetShowScalarValuesMinCount()
		{
			return 0;
		}

		public static int ShowScalarValuesMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetShowScalarValuesMaxCount()
		{
			return 1;
		}

		public static int ShowScalarValuesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetShowScalarValuesCount()
		{
			return DomChildCount(NodeType.Element, "", "ShowScalarValues");
		}

		public int ShowScalarValuesCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ShowScalarValues");
			}
		}

		public bool HasShowScalarValues()
		{
			return HasDomChild(NodeType.Element, "", "ShowScalarValues");
		}

		public SchemaBoolean NewShowScalarValues()
		{
			return new SchemaBoolean();
		}

		public SchemaBoolean GetShowScalarValuesAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "ShowScalarValues", index)));
		}

		public XmlNode GetStartingShowScalarValuesCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ShowScalarValues" );
		}

		public XmlNode GetAdvancedShowScalarValuesCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ShowScalarValues", curNode );
		}

		public SchemaBoolean GetShowScalarValuesValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaBoolean( curNode.InnerText );
		}


		public SchemaBoolean GetShowScalarValues()
		{
			return GetShowScalarValuesAt(0);
		}

		public SchemaBoolean ShowScalarValues
		{
			get
			{
				return GetShowScalarValuesAt(0);
			}
		}

		public void RemoveShowScalarValuesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ShowScalarValues", index);
		}

		public void RemoveShowScalarValues()
		{
			RemoveShowScalarValuesAt(0);
		}

		public XmlNode AddShowScalarValues(SchemaBoolean newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "ShowScalarValues", newValue.ToString());
			return null;
		}

		public void InsertShowScalarValuesAt(SchemaBoolean newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "ShowScalarValues", index, newValue.ToString());
		}

		public void ReplaceShowScalarValuesAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "ShowScalarValues", index, newValue.ToString());
		}
		#endregion // ShowScalarValues accessor methods

		#region ShowScalarValues collection
        public ShowScalarValuesCollection	MyShowScalarValuess = new ShowScalarValuesCollection( );

        public class ShowScalarValuesCollection: IEnumerable
        {
            Type_ShapeFileLayer parent;
            public Type_ShapeFileLayer Parent
			{
				set
				{
					parent = value;
				}
			}
			public ShowScalarValuesEnumerator GetEnumerator() 
			{
				return new ShowScalarValuesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ShowScalarValuesEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ShapeFileLayer parent;
			public ShowScalarValuesEnumerator(Type_ShapeFileLayer par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ShowScalarValuesCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetShowScalarValuesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ShowScalarValues collection

		#region DisplayFont Documentation
		public static string GetDisplayFontAnnoDocumentation()
		{
			return "";		
		}
		public static string GetDisplayFontDefault()
		{
			return "";		
		}
		#endregion

		#region DisplayFont accessor methods
		public static int GetDisplayFontMinCount()
		{
			return 0;
		}

		public static int DisplayFontMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetDisplayFontMaxCount()
		{
			return 1;
		}

		public static int DisplayFontMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDisplayFontCount()
		{
			return DomChildCount(NodeType.Element, "", "DisplayFont");
		}

		public int DisplayFontCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "DisplayFont");
			}
		}

		public bool HasDisplayFont()
		{
			return HasDomChild(NodeType.Element, "", "DisplayFont");
		}

		public Type_DisplayFont NewDisplayFont()
		{
			return new Type_DisplayFont(domNode.OwnerDocument.CreateElement("DisplayFont", ""));
		}

		public Type_DisplayFont GetDisplayFontAt(int index)
		{
			return new Type_DisplayFont(GetDomChildAt(NodeType.Element, "", "DisplayFont", index));
		}

		public XmlNode GetStartingDisplayFontCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "DisplayFont" );
		}

		public XmlNode GetAdvancedDisplayFontCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "DisplayFont", curNode );
		}

		public Type_DisplayFont GetDisplayFontValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_DisplayFont( curNode );
		}


		public Type_DisplayFont GetDisplayFont()
		{
			return GetDisplayFontAt(0);
		}

		public Type_DisplayFont DisplayFont
		{
			get
			{
				return GetDisplayFontAt(0);
			}
		}

		public void RemoveDisplayFontAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "DisplayFont", index);
		}

		public void RemoveDisplayFont()
		{
			RemoveDisplayFontAt(0);
		}

		public XmlNode AddDisplayFont(Type_DisplayFont newValue)
		{
			return AppendDomElement("", "DisplayFont", newValue);
		}

		public void InsertDisplayFontAt(Type_DisplayFont newValue, int index)
		{
			InsertDomElementAt("", "DisplayFont", index, newValue);
		}

		public void ReplaceDisplayFontAt(Type_DisplayFont newValue, int index)
		{
			ReplaceDomElementAt("", "DisplayFont", index, newValue);
		}
		#endregion // DisplayFont accessor methods

		#region DisplayFont collection
        public DisplayFontCollection	MyDisplayFonts = new DisplayFontCollection( );

        public class DisplayFontCollection: IEnumerable
        {
            Type_ShapeFileLayer parent;
            public Type_ShapeFileLayer Parent
			{
				set
				{
					parent = value;
				}
			}
			public DisplayFontEnumerator GetEnumerator() 
			{
				return new DisplayFontEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class DisplayFontEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ShapeFileLayer parent;
			public DisplayFontEnumerator(Type_ShapeFileLayer par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.DisplayFontCount );
			}
			public Type_DisplayFont  Current 
			{
				get 
				{
					return(parent.GetDisplayFontAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // DisplayFont collection

		#region RGBColor Documentation
		public static string GetRGBColorAnnoDocumentation()
		{
			return "";		
		}
		public static string GetRGBColorDefault()
		{
			return "";		
		}
		#endregion

		#region RGBColor accessor methods
		public static int GetRGBColorMinCount()
		{
			return 0;
		}

		public static int RGBColorMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetRGBColorMaxCount()
		{
			return 1;
		}

		public static int RGBColorMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRGBColorCount()
		{
			return DomChildCount(NodeType.Element, "", "RGBColor");
		}

		public int RGBColorCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "RGBColor");
			}
		}

		public bool HasRGBColor()
		{
			return HasDomChild(NodeType.Element, "", "RGBColor");
		}

		public Type_RGBColor NewRGBColor()
		{
			return new Type_RGBColor(domNode.OwnerDocument.CreateElement("RGBColor", ""));
		}

		public Type_RGBColor GetRGBColorAt(int index)
		{
			return new Type_RGBColor(GetDomChildAt(NodeType.Element, "", "RGBColor", index));
		}

		public XmlNode GetStartingRGBColorCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "RGBColor" );
		}

		public XmlNode GetAdvancedRGBColorCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "RGBColor", curNode );
		}

		public Type_RGBColor GetRGBColorValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_RGBColor( curNode );
		}


		public Type_RGBColor GetRGBColor()
		{
			return GetRGBColorAt(0);
		}

		public Type_RGBColor RGBColor
		{
			get
			{
				return GetRGBColorAt(0);
			}
		}

		public void RemoveRGBColorAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "RGBColor", index);
		}

		public void RemoveRGBColor()
		{
			RemoveRGBColorAt(0);
		}

		public XmlNode AddRGBColor(Type_RGBColor newValue)
		{
			return AppendDomElement("", "RGBColor", newValue);
		}

		public void InsertRGBColorAt(Type_RGBColor newValue, int index)
		{
			InsertDomElementAt("", "RGBColor", index, newValue);
		}

		public void ReplaceRGBColorAt(Type_RGBColor newValue, int index)
		{
			ReplaceDomElementAt("", "RGBColor", index, newValue);
		}
		#endregion // RGBColor accessor methods

		#region RGBColor collection
        public RGBColorCollection	MyRGBColors = new RGBColorCollection( );

        public class RGBColorCollection: IEnumerable
        {
            Type_ShapeFileLayer parent;
            public Type_ShapeFileLayer Parent
			{
				set
				{
					parent = value;
				}
			}
			public RGBColorEnumerator GetEnumerator() 
			{
				return new RGBColorEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class RGBColorEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ShapeFileLayer parent;
			public RGBColorEnumerator(Type_ShapeFileLayer par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.RGBColorCount );
			}
			public Type_RGBColor  Current 
			{
				get 
				{
					return(parent.GetRGBColorAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // RGBColor collection

		#region WinColorName Documentation
		public static string GetWinColorNameAnnoDocumentation()
		{
			return "";		
		}
		public static string GetWinColorNameDefault()
		{
			return "";		
		}
		#endregion

		#region WinColorName accessor methods
		public static int GetWinColorNameMinCount()
		{
			return 0;
		}

		public static int WinColorNameMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetWinColorNameMaxCount()
		{
			return 1;
		}

		public static int WinColorNameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetWinColorNameCount()
		{
			return DomChildCount(NodeType.Element, "", "WinColorName");
		}

		public int WinColorNameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "WinColorName");
			}
		}

		public bool HasWinColorName()
		{
			return HasDomChild(NodeType.Element, "", "WinColorName");
		}

		public SchemaString NewWinColorName()
		{
			return new SchemaString();
		}

		public SchemaString GetWinColorNameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "WinColorName", index)));
		}

		public XmlNode GetStartingWinColorNameCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "WinColorName" );
		}

		public XmlNode GetAdvancedWinColorNameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "WinColorName", curNode );
		}

		public SchemaString GetWinColorNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetWinColorName()
		{
			return GetWinColorNameAt(0);
		}

		public SchemaString WinColorName
		{
			get
			{
				return GetWinColorNameAt(0);
			}
		}

		public void RemoveWinColorNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "WinColorName", index);
		}

		public void RemoveWinColorName()
		{
			RemoveWinColorNameAt(0);
		}

		public XmlNode AddWinColorName(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "WinColorName", newValue.ToString());
			return null;
		}

		public void InsertWinColorNameAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "WinColorName", index, newValue.ToString());
		}

		public void ReplaceWinColorNameAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "WinColorName", index, newValue.ToString());
		}
		#endregion // WinColorName accessor methods

		#region WinColorName collection
        public WinColorNameCollection	MyWinColorNames = new WinColorNameCollection( );

        public class WinColorNameCollection: IEnumerable
        {
            Type_ShapeFileLayer parent;
            public Type_ShapeFileLayer Parent
			{
				set
				{
					parent = value;
				}
			}
			public WinColorNameEnumerator GetEnumerator() 
			{
				return new WinColorNameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class WinColorNameEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ShapeFileLayer parent;
			public WinColorNameEnumerator(Type_ShapeFileLayer par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.WinColorNameCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetWinColorNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // WinColorName collection

		#region ExtendedInformation Documentation
		public static string GetExtendedInformationAnnoDocumentation()
		{
			return "";		
		}
		public static string GetExtendedInformationDefault()
		{
			return "";		
		}
		#endregion

		#region ExtendedInformation accessor methods
		public static int GetExtendedInformationMinCount()
		{
			return 0;
		}

		public static int ExtendedInformationMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetExtendedInformationMaxCount()
		{
			return 1;
		}

		public static int ExtendedInformationMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetExtendedInformationCount()
		{
			return DomChildCount(NodeType.Element, "", "ExtendedInformation");
		}

		public int ExtendedInformationCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ExtendedInformation");
			}
		}

		public bool HasExtendedInformation()
		{
			return HasDomChild(NodeType.Element, "", "ExtendedInformation");
		}

		public Type_ExtendedInformation NewExtendedInformation()
		{
			return new Type_ExtendedInformation(domNode.OwnerDocument.CreateElement("ExtendedInformation", ""));
		}

		public Type_ExtendedInformation GetExtendedInformationAt(int index)
		{
			return new Type_ExtendedInformation(GetDomChildAt(NodeType.Element, "", "ExtendedInformation", index));
		}

		public XmlNode GetStartingExtendedInformationCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ExtendedInformation" );
		}

		public XmlNode GetAdvancedExtendedInformationCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ExtendedInformation", curNode );
		}

		public Type_ExtendedInformation GetExtendedInformationValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_ExtendedInformation( curNode );
		}


		public Type_ExtendedInformation GetExtendedInformation()
		{
			return GetExtendedInformationAt(0);
		}

		public Type_ExtendedInformation ExtendedInformation
		{
			get
			{
				return GetExtendedInformationAt(0);
			}
		}

		public void RemoveExtendedInformationAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ExtendedInformation", index);
		}

		public void RemoveExtendedInformation()
		{
			RemoveExtendedInformationAt(0);
		}

		public XmlNode AddExtendedInformation(Type_ExtendedInformation newValue)
		{
			return AppendDomElement("", "ExtendedInformation", newValue);
		}

		public void InsertExtendedInformationAt(Type_ExtendedInformation newValue, int index)
		{
			InsertDomElementAt("", "ExtendedInformation", index, newValue);
		}

		public void ReplaceExtendedInformationAt(Type_ExtendedInformation newValue, int index)
		{
			ReplaceDomElementAt("", "ExtendedInformation", index, newValue);
		}
		#endregion // ExtendedInformation accessor methods

		#region ExtendedInformation collection
        public ExtendedInformationCollection	MyExtendedInformations = new ExtendedInformationCollection( );

        public class ExtendedInformationCollection: IEnumerable
        {
            Type_ShapeFileLayer parent;
            public Type_ShapeFileLayer Parent
			{
				set
				{
					parent = value;
				}
			}
			public ExtendedInformationEnumerator GetEnumerator() 
			{
				return new ExtendedInformationEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ExtendedInformationEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ShapeFileLayer parent;
			public ExtendedInformationEnumerator(Type_ShapeFileLayer par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ExtendedInformationCount );
			}
			public Type_ExtendedInformation  Current 
			{
				get 
				{
					return(parent.GetExtendedInformationAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ExtendedInformation collection

        private void SetCollectionParents()
        {
            MyShowAtStartups.Parent = this; 
            MyNames.Parent = this; 
            MyDistanceAboveSurfaces.Parent = this; 
            MyMasterFilePaths.Parent = this; 
            MyMinimumViewAltitudes.Parent = this; 
            MyMaximumViewAltitudes.Parent = this; 
            MyShowPointss.Parent = this; 
            MyShowBoundariess.Parent = this; 
            MyShowFilledRegionss.Parent = this; 
            MyScalarKeys.Parent = this; 
            MyShowScalarValuess.Parent = this; 
            MyDisplayFonts.Parent = this; 
            MyRGBColors.Parent = this; 
            MyWinColorNames.Parent = this; 
            MyExtendedInformations.Parent = this; 
	}
}
}
