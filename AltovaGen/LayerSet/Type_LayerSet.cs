//
// Type_LayerSet.cs
//
// This file was generated by XMLSpy 2007r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LayerSet
{
	public class Type_LayerSet : Altova.Xml.Node
	{
		#region Documentation
		public static string GetAnnoDocumentation() { return ""; }
		#endregion

		#region Forward constructors

		public Type_LayerSet() : base() { SetCollectionParents(); }

		public Type_LayerSet(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public Type_LayerSet(XmlNode node) : base(node) { SetCollectionParents(); }
		public Type_LayerSet(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public Type_LayerSet(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "Name" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "Name", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "ShowOnlyOneLayer" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "ShowOnlyOneLayer", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "ShowAtStartup" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "ShowAtStartup", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "redirect" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "redirect", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "Refresh" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "Refresh", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ChildLayerSet" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ChildLayerSet", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_LayerSet(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ImageLayer" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ImageLayer", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_ImageLayer(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "QuadTileSet" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "QuadTileSet", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_QuadTileSet(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ShapeFileLayer" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ShapeFileLayer", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_ShapeFileLayer(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "MeshLayer" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "MeshLayer", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_MeshLayer(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ModelFeature" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ModelFeature", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_ModelFeature(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "PathList" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "PathList", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_PathList(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Icon" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Icon", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_Icon(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ScreenOverlay" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ScreenOverlay", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_ScreenOverlay(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "TiledPlacenameSet" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "TiledPlacenameSet", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_TiledPlacenameSet(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "TiledWFSPlacenameSet" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "TiledWFSPlacenameSet", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_TiledWFSPlacenameSet(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ExtendedInformation" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ExtendedInformation", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_ExtendedInformation(DOMNode).AdjustPrefix();
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "Type_LayerSet");
		}


		#region Name Documentation
		public static string GetNameAnnoDocumentation()
		{
			return "";		
		}
		public static string GetNameDefault()
		{
			return "";		
		}
		#endregion

		#region Name accessor methods
		public static int GetNameMinCount()
		{
			return 0;
		}

		public static int NameMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetNameMaxCount()
		{
			return 1;
		}

		public static int NameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameCount()
		{
			return DomChildCount(NodeType.Attribute, "", "Name");
		}

		public int NameCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "Name");
			}
		}

		public bool HasName()
		{
			return HasDomChild(NodeType.Attribute, "", "Name");
		}

		public NameType2 NewName()
		{
			return new NameType2();
		}

		public NameType2 GetNameAt(int index)
		{
			return new NameType2(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "Name", index)));
		}

		public XmlNode GetStartingNameCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "Name" );
		}

		public XmlNode GetAdvancedNameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "Name", curNode );
		}

		public NameType2 GetNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new NameType2( curNode.Value );
		}


		public NameType2 GetName()
		{
			return GetNameAt(0);
		}

		public NameType2 Name
		{
			get
			{
				return GetNameAt(0);
			}
		}

		public void RemoveNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "Name", index);
		}

		public void RemoveName()
		{
			RemoveNameAt(0);
		}

		public XmlNode AddName(NameType2 newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "Name", newValue.ToString());
			return null;
		}

		public void InsertNameAt(NameType2 newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "Name", index, newValue.ToString());
		}

		public void ReplaceNameAt(NameType2 newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "Name", index, newValue.ToString());
		}
		#endregion // Name accessor methods

		#region Name collection
        public NameCollection	MyNames = new NameCollection( );

        public class NameCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public NameEnumerator GetEnumerator() 
			{
				return new NameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NameEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public NameEnumerator(Type_LayerSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NameCount );
			}
			public NameType2  Current 
			{
				get 
				{
					return(parent.GetNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Name collection

		#region ShowOnlyOneLayer Documentation
		public static string GetShowOnlyOneLayerAnnoDocumentation()
		{
			return "";		
		}
		public static string GetShowOnlyOneLayerDefault()
		{
			return "";		
		}
		#endregion

		#region ShowOnlyOneLayer accessor methods
		public static int GetShowOnlyOneLayerMinCount()
		{
			return 0;
		}

		public static int ShowOnlyOneLayerMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetShowOnlyOneLayerMaxCount()
		{
			return 1;
		}

		public static int ShowOnlyOneLayerMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetShowOnlyOneLayerCount()
		{
			return DomChildCount(NodeType.Attribute, "", "ShowOnlyOneLayer");
		}

		public int ShowOnlyOneLayerCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "ShowOnlyOneLayer");
			}
		}

		public bool HasShowOnlyOneLayer()
		{
			return HasDomChild(NodeType.Attribute, "", "ShowOnlyOneLayer");
		}

		public SchemaBoolean NewShowOnlyOneLayer()
		{
			return new SchemaBoolean();
		}

		public SchemaBoolean GetShowOnlyOneLayerAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "ShowOnlyOneLayer", index)));
		}

		public XmlNode GetStartingShowOnlyOneLayerCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "ShowOnlyOneLayer" );
		}

		public XmlNode GetAdvancedShowOnlyOneLayerCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "ShowOnlyOneLayer", curNode );
		}

		public SchemaBoolean GetShowOnlyOneLayerValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaBoolean( curNode.Value );
		}


		public SchemaBoolean GetShowOnlyOneLayer()
		{
			return GetShowOnlyOneLayerAt(0);
		}

		public SchemaBoolean ShowOnlyOneLayer
		{
			get
			{
				return GetShowOnlyOneLayerAt(0);
			}
		}

		public void RemoveShowOnlyOneLayerAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "ShowOnlyOneLayer", index);
		}

		public void RemoveShowOnlyOneLayer()
		{
			RemoveShowOnlyOneLayerAt(0);
		}

		public XmlNode AddShowOnlyOneLayer(SchemaBoolean newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "ShowOnlyOneLayer", newValue.ToString());
			return null;
		}

		public void InsertShowOnlyOneLayerAt(SchemaBoolean newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "ShowOnlyOneLayer", index, newValue.ToString());
		}

		public void ReplaceShowOnlyOneLayerAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "ShowOnlyOneLayer", index, newValue.ToString());
		}
		#endregion // ShowOnlyOneLayer accessor methods

		#region ShowOnlyOneLayer collection
        public ShowOnlyOneLayerCollection	MyShowOnlyOneLayers = new ShowOnlyOneLayerCollection( );

        public class ShowOnlyOneLayerCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public ShowOnlyOneLayerEnumerator GetEnumerator() 
			{
				return new ShowOnlyOneLayerEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ShowOnlyOneLayerEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public ShowOnlyOneLayerEnumerator(Type_LayerSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ShowOnlyOneLayerCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetShowOnlyOneLayerAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ShowOnlyOneLayer collection

		#region ShowAtStartup Documentation
		public static string GetShowAtStartupAnnoDocumentation()
		{
			return "";		
		}
		public static string GetShowAtStartupDefault()
		{
			return "";		
		}
		#endregion

		#region ShowAtStartup accessor methods
		public static int GetShowAtStartupMinCount()
		{
			return 0;
		}

		public static int ShowAtStartupMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetShowAtStartupMaxCount()
		{
			return 1;
		}

		public static int ShowAtStartupMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetShowAtStartupCount()
		{
			return DomChildCount(NodeType.Attribute, "", "ShowAtStartup");
		}

		public int ShowAtStartupCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "ShowAtStartup");
			}
		}

		public bool HasShowAtStartup()
		{
			return HasDomChild(NodeType.Attribute, "", "ShowAtStartup");
		}

		public SchemaBoolean NewShowAtStartup()
		{
			return new SchemaBoolean();
		}

		public SchemaBoolean GetShowAtStartupAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "ShowAtStartup", index)));
		}

		public XmlNode GetStartingShowAtStartupCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "ShowAtStartup" );
		}

		public XmlNode GetAdvancedShowAtStartupCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "ShowAtStartup", curNode );
		}

		public SchemaBoolean GetShowAtStartupValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaBoolean( curNode.Value );
		}


		public SchemaBoolean GetShowAtStartup()
		{
			return GetShowAtStartupAt(0);
		}

		public SchemaBoolean ShowAtStartup
		{
			get
			{
				return GetShowAtStartupAt(0);
			}
		}

		public void RemoveShowAtStartupAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "ShowAtStartup", index);
		}

		public void RemoveShowAtStartup()
		{
			RemoveShowAtStartupAt(0);
		}

		public XmlNode AddShowAtStartup(SchemaBoolean newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "ShowAtStartup", newValue.ToString());
			return null;
		}

		public void InsertShowAtStartupAt(SchemaBoolean newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "ShowAtStartup", index, newValue.ToString());
		}

		public void ReplaceShowAtStartupAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "ShowAtStartup", index, newValue.ToString());
		}
		#endregion // ShowAtStartup accessor methods

		#region ShowAtStartup collection
        public ShowAtStartupCollection	MyShowAtStartups = new ShowAtStartupCollection( );

        public class ShowAtStartupCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public ShowAtStartupEnumerator GetEnumerator() 
			{
				return new ShowAtStartupEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ShowAtStartupEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public ShowAtStartupEnumerator(Type_LayerSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ShowAtStartupCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetShowAtStartupAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ShowAtStartup collection

		#region redirect Documentation
		public static string GetredirectAnnoDocumentation()
		{
			return "";		
		}
		public static string GetredirectDefault()
		{
			return "";		
		}
		#endregion

		#region redirect accessor methods
		public static int GetredirectMinCount()
		{
			return 0;
		}

		public static int redirectMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetredirectMaxCount()
		{
			return 1;
		}

		public static int redirectMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetredirectCount()
		{
			return DomChildCount(NodeType.Attribute, "", "redirect");
		}

		public int redirectCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "redirect");
			}
		}

		public bool Hasredirect()
		{
			return HasDomChild(NodeType.Attribute, "", "redirect");
		}

		public SchemaString Newredirect()
		{
			return new SchemaString();
		}

		public SchemaString GetredirectAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "redirect", index)));
		}

		public XmlNode GetStartingredirectCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "redirect" );
		}

		public XmlNode GetAdvancedredirectCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "redirect", curNode );
		}

		public SchemaString GetredirectValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString Getredirect()
		{
			return GetredirectAt(0);
		}

		public SchemaString redirect
		{
			get
			{
				return GetredirectAt(0);
			}
		}

		public void RemoveredirectAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "redirect", index);
		}

		public void Removeredirect()
		{
			RemoveredirectAt(0);
		}

		public XmlNode Addredirect(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "redirect", newValue.ToString());
			return null;
		}

		public void InsertredirectAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "redirect", index, newValue.ToString());
		}

		public void ReplaceredirectAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "redirect", index, newValue.ToString());
		}
		#endregion // redirect accessor methods

		#region redirect collection
        public redirectCollection	Myredirects = new redirectCollection( );

        public class redirectCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public redirectEnumerator GetEnumerator() 
			{
				return new redirectEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class redirectEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public redirectEnumerator(Type_LayerSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.redirectCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetredirectAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // redirect collection

		#region Refresh Documentation
		public static string GetRefreshAnnoDocumentation()
		{
			return "";		
		}
		public static string GetRefreshDefault()
		{
			return "";		
		}
		#endregion

		#region Refresh accessor methods
		public static int GetRefreshMinCount()
		{
			return 0;
		}

		public static int RefreshMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetRefreshMaxCount()
		{
			return 1;
		}

		public static int RefreshMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRefreshCount()
		{
			return DomChildCount(NodeType.Attribute, "", "Refresh");
		}

		public int RefreshCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "Refresh");
			}
		}

		public bool HasRefresh()
		{
			return HasDomChild(NodeType.Attribute, "", "Refresh");
		}

		public SchemaString NewRefresh()
		{
			return new SchemaString();
		}

		public SchemaString GetRefreshAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "Refresh", index)));
		}

		public XmlNode GetStartingRefreshCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "Refresh" );
		}

		public XmlNode GetAdvancedRefreshCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "Refresh", curNode );
		}

		public SchemaString GetRefreshValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString GetRefresh()
		{
			return GetRefreshAt(0);
		}

		public SchemaString Refresh
		{
			get
			{
				return GetRefreshAt(0);
			}
		}

		public void RemoveRefreshAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "Refresh", index);
		}

		public void RemoveRefresh()
		{
			RemoveRefreshAt(0);
		}

		public XmlNode AddRefresh(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "Refresh", newValue.ToString());
			return null;
		}

		public void InsertRefreshAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "Refresh", index, newValue.ToString());
		}

		public void ReplaceRefreshAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "Refresh", index, newValue.ToString());
		}
		#endregion // Refresh accessor methods

		#region Refresh collection
        public RefreshCollection	MyRefreshs = new RefreshCollection( );

        public class RefreshCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public RefreshEnumerator GetEnumerator() 
			{
				return new RefreshEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class RefreshEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public RefreshEnumerator(Type_LayerSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.RefreshCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetRefreshAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Refresh collection

		#region ChildLayerSet Documentation
		public static string GetChildLayerSetAnnoDocumentation()
		{
			return "";		
		}
		public static string GetChildLayerSetDefault()
		{
			return "";		
		}
		#endregion

		#region ChildLayerSet accessor methods
		public static int GetChildLayerSetMinCount()
		{
			return 0;
		}

		public static int ChildLayerSetMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetChildLayerSetMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int ChildLayerSetMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetChildLayerSetCount()
		{
			return DomChildCount(NodeType.Element, "", "ChildLayerSet");
		}

		public int ChildLayerSetCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ChildLayerSet");
			}
		}

		public bool HasChildLayerSet()
		{
			return HasDomChild(NodeType.Element, "", "ChildLayerSet");
		}

		public Type_LayerSet NewChildLayerSet()
		{
			return new Type_LayerSet(domNode.OwnerDocument.CreateElement("ChildLayerSet", ""));
		}

		public Type_LayerSet GetChildLayerSetAt(int index)
		{
			return new Type_LayerSet(GetDomChildAt(NodeType.Element, "", "ChildLayerSet", index));
		}

		public XmlNode GetStartingChildLayerSetCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ChildLayerSet" );
		}

		public XmlNode GetAdvancedChildLayerSetCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ChildLayerSet", curNode );
		}

		public Type_LayerSet GetChildLayerSetValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_LayerSet( curNode );
		}


		public Type_LayerSet GetChildLayerSet()
		{
			return GetChildLayerSetAt(0);
		}

		public Type_LayerSet ChildLayerSet
		{
			get
			{
				return GetChildLayerSetAt(0);
			}
		}

		public void RemoveChildLayerSetAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ChildLayerSet", index);
		}

		public void RemoveChildLayerSet()
		{
			while (HasChildLayerSet())
				RemoveChildLayerSetAt(0);
		}

		public XmlNode AddChildLayerSet(Type_LayerSet newValue)
		{
			return AppendDomElement("", "ChildLayerSet", newValue);
		}

		public void InsertChildLayerSetAt(Type_LayerSet newValue, int index)
		{
			InsertDomElementAt("", "ChildLayerSet", index, newValue);
		}

		public void ReplaceChildLayerSetAt(Type_LayerSet newValue, int index)
		{
			ReplaceDomElementAt("", "ChildLayerSet", index, newValue);
		}
		#endregion // ChildLayerSet accessor methods

		#region ChildLayerSet collection
        public ChildLayerSetCollection	MyChildLayerSets = new ChildLayerSetCollection( );

        public class ChildLayerSetCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public ChildLayerSetEnumerator GetEnumerator() 
			{
				return new ChildLayerSetEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ChildLayerSetEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public ChildLayerSetEnumerator(Type_LayerSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ChildLayerSetCount );
			}
			public Type_LayerSet  Current 
			{
				get 
				{
					return(parent.GetChildLayerSetAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ChildLayerSet collection

		#region ImageLayer Documentation
		public static string GetImageLayerAnnoDocumentation()
		{
			return "";		
		}
		public static string GetImageLayerDefault()
		{
			return "";		
		}
		#endregion

		#region ImageLayer accessor methods
		public static int GetImageLayerMinCount()
		{
			return 0;
		}

		public static int ImageLayerMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetImageLayerMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int ImageLayerMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetImageLayerCount()
		{
			return DomChildCount(NodeType.Element, "", "ImageLayer");
		}

		public int ImageLayerCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ImageLayer");
			}
		}

		public bool HasImageLayer()
		{
			return HasDomChild(NodeType.Element, "", "ImageLayer");
		}

		public Type_ImageLayer NewImageLayer()
		{
			return new Type_ImageLayer(domNode.OwnerDocument.CreateElement("ImageLayer", ""));
		}

		public Type_ImageLayer GetImageLayerAt(int index)
		{
			return new Type_ImageLayer(GetDomChildAt(NodeType.Element, "", "ImageLayer", index));
		}

		public XmlNode GetStartingImageLayerCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ImageLayer" );
		}

		public XmlNode GetAdvancedImageLayerCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ImageLayer", curNode );
		}

		public Type_ImageLayer GetImageLayerValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_ImageLayer( curNode );
		}


		public Type_ImageLayer GetImageLayer()
		{
			return GetImageLayerAt(0);
		}

		public Type_ImageLayer ImageLayer
		{
			get
			{
				return GetImageLayerAt(0);
			}
		}

		public void RemoveImageLayerAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ImageLayer", index);
		}

		public void RemoveImageLayer()
		{
			while (HasImageLayer())
				RemoveImageLayerAt(0);
		}

		public XmlNode AddImageLayer(Type_ImageLayer newValue)
		{
			return AppendDomElement("", "ImageLayer", newValue);
		}

		public void InsertImageLayerAt(Type_ImageLayer newValue, int index)
		{
			InsertDomElementAt("", "ImageLayer", index, newValue);
		}

		public void ReplaceImageLayerAt(Type_ImageLayer newValue, int index)
		{
			ReplaceDomElementAt("", "ImageLayer", index, newValue);
		}
		#endregion // ImageLayer accessor methods

		#region ImageLayer collection
        public ImageLayerCollection	MyImageLayers = new ImageLayerCollection( );

        public class ImageLayerCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public ImageLayerEnumerator GetEnumerator() 
			{
				return new ImageLayerEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ImageLayerEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public ImageLayerEnumerator(Type_LayerSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ImageLayerCount );
			}
			public Type_ImageLayer  Current 
			{
				get 
				{
					return(parent.GetImageLayerAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ImageLayer collection

		#region QuadTileSet Documentation
		public static string GetQuadTileSetAnnoDocumentation()
		{
			return "";		
		}
		public static string GetQuadTileSetDefault()
		{
			return "";		
		}
		#endregion

		#region QuadTileSet accessor methods
		public static int GetQuadTileSetMinCount()
		{
			return 0;
		}

		public static int QuadTileSetMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetQuadTileSetMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int QuadTileSetMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetQuadTileSetCount()
		{
			return DomChildCount(NodeType.Element, "", "QuadTileSet");
		}

		public int QuadTileSetCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "QuadTileSet");
			}
		}

		public bool HasQuadTileSet()
		{
			return HasDomChild(NodeType.Element, "", "QuadTileSet");
		}

		public Type_QuadTileSet NewQuadTileSet()
		{
			return new Type_QuadTileSet(domNode.OwnerDocument.CreateElement("QuadTileSet", ""));
		}

		public Type_QuadTileSet GetQuadTileSetAt(int index)
		{
			return new Type_QuadTileSet(GetDomChildAt(NodeType.Element, "", "QuadTileSet", index));
		}

		public XmlNode GetStartingQuadTileSetCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "QuadTileSet" );
		}

		public XmlNode GetAdvancedQuadTileSetCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "QuadTileSet", curNode );
		}

		public Type_QuadTileSet GetQuadTileSetValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_QuadTileSet( curNode );
		}


		public Type_QuadTileSet GetQuadTileSet()
		{
			return GetQuadTileSetAt(0);
		}

		public Type_QuadTileSet QuadTileSet
		{
			get
			{
				return GetQuadTileSetAt(0);
			}
		}

		public void RemoveQuadTileSetAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "QuadTileSet", index);
		}

		public void RemoveQuadTileSet()
		{
			while (HasQuadTileSet())
				RemoveQuadTileSetAt(0);
		}

		public XmlNode AddQuadTileSet(Type_QuadTileSet newValue)
		{
			return AppendDomElement("", "QuadTileSet", newValue);
		}

		public void InsertQuadTileSetAt(Type_QuadTileSet newValue, int index)
		{
			InsertDomElementAt("", "QuadTileSet", index, newValue);
		}

		public void ReplaceQuadTileSetAt(Type_QuadTileSet newValue, int index)
		{
			ReplaceDomElementAt("", "QuadTileSet", index, newValue);
		}
		#endregion // QuadTileSet accessor methods

		#region QuadTileSet collection
        public QuadTileSetCollection	MyQuadTileSets = new QuadTileSetCollection( );

        public class QuadTileSetCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public QuadTileSetEnumerator GetEnumerator() 
			{
				return new QuadTileSetEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class QuadTileSetEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public QuadTileSetEnumerator(Type_LayerSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.QuadTileSetCount );
			}
			public Type_QuadTileSet  Current 
			{
				get 
				{
					return(parent.GetQuadTileSetAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // QuadTileSet collection

		#region ShapeFileLayer Documentation
		public static string GetShapeFileLayerAnnoDocumentation()
		{
			return "";		
		}
		public static string GetShapeFileLayerDefault()
		{
			return "";		
		}
		#endregion

		#region ShapeFileLayer accessor methods
		public static int GetShapeFileLayerMinCount()
		{
			return 0;
		}

		public static int ShapeFileLayerMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetShapeFileLayerMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int ShapeFileLayerMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetShapeFileLayerCount()
		{
			return DomChildCount(NodeType.Element, "", "ShapeFileLayer");
		}

		public int ShapeFileLayerCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ShapeFileLayer");
			}
		}

		public bool HasShapeFileLayer()
		{
			return HasDomChild(NodeType.Element, "", "ShapeFileLayer");
		}

		public Type_ShapeFileLayer NewShapeFileLayer()
		{
			return new Type_ShapeFileLayer(domNode.OwnerDocument.CreateElement("ShapeFileLayer", ""));
		}

		public Type_ShapeFileLayer GetShapeFileLayerAt(int index)
		{
			return new Type_ShapeFileLayer(GetDomChildAt(NodeType.Element, "", "ShapeFileLayer", index));
		}

		public XmlNode GetStartingShapeFileLayerCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ShapeFileLayer" );
		}

		public XmlNode GetAdvancedShapeFileLayerCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ShapeFileLayer", curNode );
		}

		public Type_ShapeFileLayer GetShapeFileLayerValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_ShapeFileLayer( curNode );
		}


		public Type_ShapeFileLayer GetShapeFileLayer()
		{
			return GetShapeFileLayerAt(0);
		}

		public Type_ShapeFileLayer ShapeFileLayer
		{
			get
			{
				return GetShapeFileLayerAt(0);
			}
		}

		public void RemoveShapeFileLayerAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ShapeFileLayer", index);
		}

		public void RemoveShapeFileLayer()
		{
			while (HasShapeFileLayer())
				RemoveShapeFileLayerAt(0);
		}

		public XmlNode AddShapeFileLayer(Type_ShapeFileLayer newValue)
		{
			return AppendDomElement("", "ShapeFileLayer", newValue);
		}

		public void InsertShapeFileLayerAt(Type_ShapeFileLayer newValue, int index)
		{
			InsertDomElementAt("", "ShapeFileLayer", index, newValue);
		}

		public void ReplaceShapeFileLayerAt(Type_ShapeFileLayer newValue, int index)
		{
			ReplaceDomElementAt("", "ShapeFileLayer", index, newValue);
		}
		#endregion // ShapeFileLayer accessor methods

		#region ShapeFileLayer collection
        public ShapeFileLayerCollection	MyShapeFileLayers = new ShapeFileLayerCollection( );

        public class ShapeFileLayerCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public ShapeFileLayerEnumerator GetEnumerator() 
			{
				return new ShapeFileLayerEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ShapeFileLayerEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public ShapeFileLayerEnumerator(Type_LayerSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ShapeFileLayerCount );
			}
			public Type_ShapeFileLayer  Current 
			{
				get 
				{
					return(parent.GetShapeFileLayerAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ShapeFileLayer collection

		#region MeshLayer Documentation
		public static string GetMeshLayerAnnoDocumentation()
		{
			return "";		
		}
		public static string GetMeshLayerDefault()
		{
			return "";		
		}
		#endregion

		#region MeshLayer accessor methods
		public static int GetMeshLayerMinCount()
		{
			return 0;
		}

		public static int MeshLayerMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetMeshLayerMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int MeshLayerMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetMeshLayerCount()
		{
			return DomChildCount(NodeType.Element, "", "MeshLayer");
		}

		public int MeshLayerCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "MeshLayer");
			}
		}

		public bool HasMeshLayer()
		{
			return HasDomChild(NodeType.Element, "", "MeshLayer");
		}

		public Type_MeshLayer NewMeshLayer()
		{
			return new Type_MeshLayer(domNode.OwnerDocument.CreateElement("MeshLayer", ""));
		}

		public Type_MeshLayer GetMeshLayerAt(int index)
		{
			return new Type_MeshLayer(GetDomChildAt(NodeType.Element, "", "MeshLayer", index));
		}

		public XmlNode GetStartingMeshLayerCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "MeshLayer" );
		}

		public XmlNode GetAdvancedMeshLayerCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "MeshLayer", curNode );
		}

		public Type_MeshLayer GetMeshLayerValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_MeshLayer( curNode );
		}


		public Type_MeshLayer GetMeshLayer()
		{
			return GetMeshLayerAt(0);
		}

		public Type_MeshLayer MeshLayer
		{
			get
			{
				return GetMeshLayerAt(0);
			}
		}

		public void RemoveMeshLayerAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "MeshLayer", index);
		}

		public void RemoveMeshLayer()
		{
			while (HasMeshLayer())
				RemoveMeshLayerAt(0);
		}

		public XmlNode AddMeshLayer(Type_MeshLayer newValue)
		{
			return AppendDomElement("", "MeshLayer", newValue);
		}

		public void InsertMeshLayerAt(Type_MeshLayer newValue, int index)
		{
			InsertDomElementAt("", "MeshLayer", index, newValue);
		}

		public void ReplaceMeshLayerAt(Type_MeshLayer newValue, int index)
		{
			ReplaceDomElementAt("", "MeshLayer", index, newValue);
		}
		#endregion // MeshLayer accessor methods

		#region MeshLayer collection
        public MeshLayerCollection	MyMeshLayers = new MeshLayerCollection( );

        public class MeshLayerCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public MeshLayerEnumerator GetEnumerator() 
			{
				return new MeshLayerEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class MeshLayerEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public MeshLayerEnumerator(Type_LayerSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.MeshLayerCount );
			}
			public Type_MeshLayer  Current 
			{
				get 
				{
					return(parent.GetMeshLayerAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // MeshLayer collection

		#region ModelFeature Documentation
		public static string GetModelFeatureAnnoDocumentation()
		{
			return "";		
		}
		public static string GetModelFeatureDefault()
		{
			return "";		
		}
		#endregion

		#region ModelFeature accessor methods
		public static int GetModelFeatureMinCount()
		{
			return 0;
		}

		public static int ModelFeatureMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetModelFeatureMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int ModelFeatureMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetModelFeatureCount()
		{
			return DomChildCount(NodeType.Element, "", "ModelFeature");
		}

		public int ModelFeatureCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ModelFeature");
			}
		}

		public bool HasModelFeature()
		{
			return HasDomChild(NodeType.Element, "", "ModelFeature");
		}

		public Type_ModelFeature NewModelFeature()
		{
			return new Type_ModelFeature(domNode.OwnerDocument.CreateElement("ModelFeature", ""));
		}

		public Type_ModelFeature GetModelFeatureAt(int index)
		{
			return new Type_ModelFeature(GetDomChildAt(NodeType.Element, "", "ModelFeature", index));
		}

		public XmlNode GetStartingModelFeatureCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ModelFeature" );
		}

		public XmlNode GetAdvancedModelFeatureCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ModelFeature", curNode );
		}

		public Type_ModelFeature GetModelFeatureValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_ModelFeature( curNode );
		}


		public Type_ModelFeature GetModelFeature()
		{
			return GetModelFeatureAt(0);
		}

		public Type_ModelFeature ModelFeature
		{
			get
			{
				return GetModelFeatureAt(0);
			}
		}

		public void RemoveModelFeatureAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ModelFeature", index);
		}

		public void RemoveModelFeature()
		{
			while (HasModelFeature())
				RemoveModelFeatureAt(0);
		}

		public XmlNode AddModelFeature(Type_ModelFeature newValue)
		{
			return AppendDomElement("", "ModelFeature", newValue);
		}

		public void InsertModelFeatureAt(Type_ModelFeature newValue, int index)
		{
			InsertDomElementAt("", "ModelFeature", index, newValue);
		}

		public void ReplaceModelFeatureAt(Type_ModelFeature newValue, int index)
		{
			ReplaceDomElementAt("", "ModelFeature", index, newValue);
		}
		#endregion // ModelFeature accessor methods

		#region ModelFeature collection
        public ModelFeatureCollection	MyModelFeatures = new ModelFeatureCollection( );

        public class ModelFeatureCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public ModelFeatureEnumerator GetEnumerator() 
			{
				return new ModelFeatureEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ModelFeatureEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public ModelFeatureEnumerator(Type_LayerSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ModelFeatureCount );
			}
			public Type_ModelFeature  Current 
			{
				get 
				{
					return(parent.GetModelFeatureAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ModelFeature collection

		#region PathList Documentation
		public static string GetPathListAnnoDocumentation()
		{
			return "";		
		}
		public static string GetPathListDefault()
		{
			return "";		
		}
		#endregion

		#region PathList accessor methods
		public static int GetPathListMinCount()
		{
			return 0;
		}

		public static int PathListMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetPathListMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int PathListMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetPathListCount()
		{
			return DomChildCount(NodeType.Element, "", "PathList");
		}

		public int PathListCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "PathList");
			}
		}

		public bool HasPathList()
		{
			return HasDomChild(NodeType.Element, "", "PathList");
		}

		public Type_PathList NewPathList()
		{
			return new Type_PathList(domNode.OwnerDocument.CreateElement("PathList", ""));
		}

		public Type_PathList GetPathListAt(int index)
		{
			return new Type_PathList(GetDomChildAt(NodeType.Element, "", "PathList", index));
		}

		public XmlNode GetStartingPathListCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "PathList" );
		}

		public XmlNode GetAdvancedPathListCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "PathList", curNode );
		}

		public Type_PathList GetPathListValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_PathList( curNode );
		}


		public Type_PathList GetPathList()
		{
			return GetPathListAt(0);
		}

		public Type_PathList PathList
		{
			get
			{
				return GetPathListAt(0);
			}
		}

		public void RemovePathListAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "PathList", index);
		}

		public void RemovePathList()
		{
			while (HasPathList())
				RemovePathListAt(0);
		}

		public XmlNode AddPathList(Type_PathList newValue)
		{
			return AppendDomElement("", "PathList", newValue);
		}

		public void InsertPathListAt(Type_PathList newValue, int index)
		{
			InsertDomElementAt("", "PathList", index, newValue);
		}

		public void ReplacePathListAt(Type_PathList newValue, int index)
		{
			ReplaceDomElementAt("", "PathList", index, newValue);
		}
		#endregion // PathList accessor methods

		#region PathList collection
        public PathListCollection	MyPathLists = new PathListCollection( );

        public class PathListCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public PathListEnumerator GetEnumerator() 
			{
				return new PathListEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PathListEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public PathListEnumerator(Type_LayerSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PathListCount );
			}
			public Type_PathList  Current 
			{
				get 
				{
					return(parent.GetPathListAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // PathList collection

		#region Icon Documentation
		public static string GetIconAnnoDocumentation()
		{
			return "";		
		}
		public static string GetIconDefault()
		{
			return "";		
		}
		#endregion

		#region Icon accessor methods
		public static int GetIconMinCount()
		{
			return 0;
		}

		public static int IconMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetIconMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int IconMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetIconCount()
		{
			return DomChildCount(NodeType.Element, "", "Icon");
		}

		public int IconCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Icon");
			}
		}

		public bool HasIcon()
		{
			return HasDomChild(NodeType.Element, "", "Icon");
		}

		public Type_Icon NewIcon()
		{
			return new Type_Icon(domNode.OwnerDocument.CreateElement("Icon", ""));
		}

		public Type_Icon GetIconAt(int index)
		{
			return new Type_Icon(GetDomChildAt(NodeType.Element, "", "Icon", index));
		}

		public XmlNode GetStartingIconCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Icon" );
		}

		public XmlNode GetAdvancedIconCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Icon", curNode );
		}

		public Type_Icon GetIconValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_Icon( curNode );
		}


		public Type_Icon GetIcon()
		{
			return GetIconAt(0);
		}

		public Type_Icon Icon
		{
			get
			{
				return GetIconAt(0);
			}
		}

		public void RemoveIconAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Icon", index);
		}

		public void RemoveIcon()
		{
			while (HasIcon())
				RemoveIconAt(0);
		}

		public XmlNode AddIcon(Type_Icon newValue)
		{
			return AppendDomElement("", "Icon", newValue);
		}

		public void InsertIconAt(Type_Icon newValue, int index)
		{
			InsertDomElementAt("", "Icon", index, newValue);
		}

		public void ReplaceIconAt(Type_Icon newValue, int index)
		{
			ReplaceDomElementAt("", "Icon", index, newValue);
		}
		#endregion // Icon accessor methods

		#region Icon collection
        public IconCollection	MyIcons = new IconCollection( );

        public class IconCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public IconEnumerator GetEnumerator() 
			{
				return new IconEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class IconEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public IconEnumerator(Type_LayerSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.IconCount );
			}
			public Type_Icon  Current 
			{
				get 
				{
					return(parent.GetIconAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Icon collection

		#region ScreenOverlay Documentation
		public static string GetScreenOverlayAnnoDocumentation()
		{
			return "";		
		}
		public static string GetScreenOverlayDefault()
		{
			return "";		
		}
		#endregion

		#region ScreenOverlay accessor methods
		public static int GetScreenOverlayMinCount()
		{
			return 0;
		}

		public static int ScreenOverlayMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetScreenOverlayMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int ScreenOverlayMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetScreenOverlayCount()
		{
			return DomChildCount(NodeType.Element, "", "ScreenOverlay");
		}

		public int ScreenOverlayCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ScreenOverlay");
			}
		}

		public bool HasScreenOverlay()
		{
			return HasDomChild(NodeType.Element, "", "ScreenOverlay");
		}

		public Type_ScreenOverlay NewScreenOverlay()
		{
			return new Type_ScreenOverlay(domNode.OwnerDocument.CreateElement("ScreenOverlay", ""));
		}

		public Type_ScreenOverlay GetScreenOverlayAt(int index)
		{
			return new Type_ScreenOverlay(GetDomChildAt(NodeType.Element, "", "ScreenOverlay", index));
		}

		public XmlNode GetStartingScreenOverlayCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ScreenOverlay" );
		}

		public XmlNode GetAdvancedScreenOverlayCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ScreenOverlay", curNode );
		}

		public Type_ScreenOverlay GetScreenOverlayValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_ScreenOverlay( curNode );
		}


		public Type_ScreenOverlay GetScreenOverlay()
		{
			return GetScreenOverlayAt(0);
		}

		public Type_ScreenOverlay ScreenOverlay
		{
			get
			{
				return GetScreenOverlayAt(0);
			}
		}

		public void RemoveScreenOverlayAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ScreenOverlay", index);
		}

		public void RemoveScreenOverlay()
		{
			while (HasScreenOverlay())
				RemoveScreenOverlayAt(0);
		}

		public XmlNode AddScreenOverlay(Type_ScreenOverlay newValue)
		{
			return AppendDomElement("", "ScreenOverlay", newValue);
		}

		public void InsertScreenOverlayAt(Type_ScreenOverlay newValue, int index)
		{
			InsertDomElementAt("", "ScreenOverlay", index, newValue);
		}

		public void ReplaceScreenOverlayAt(Type_ScreenOverlay newValue, int index)
		{
			ReplaceDomElementAt("", "ScreenOverlay", index, newValue);
		}
		#endregion // ScreenOverlay accessor methods

		#region ScreenOverlay collection
        public ScreenOverlayCollection	MyScreenOverlays = new ScreenOverlayCollection( );

        public class ScreenOverlayCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public ScreenOverlayEnumerator GetEnumerator() 
			{
				return new ScreenOverlayEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ScreenOverlayEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public ScreenOverlayEnumerator(Type_LayerSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ScreenOverlayCount );
			}
			public Type_ScreenOverlay  Current 
			{
				get 
				{
					return(parent.GetScreenOverlayAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ScreenOverlay collection

		#region TiledPlacenameSet Documentation
		public static string GetTiledPlacenameSetAnnoDocumentation()
		{
			return "";		
		}
		public static string GetTiledPlacenameSetDefault()
		{
			return "";		
		}
		#endregion

		#region TiledPlacenameSet accessor methods
		public static int GetTiledPlacenameSetMinCount()
		{
			return 0;
		}

		public static int TiledPlacenameSetMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetTiledPlacenameSetMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int TiledPlacenameSetMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetTiledPlacenameSetCount()
		{
			return DomChildCount(NodeType.Element, "", "TiledPlacenameSet");
		}

		public int TiledPlacenameSetCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "TiledPlacenameSet");
			}
		}

		public bool HasTiledPlacenameSet()
		{
			return HasDomChild(NodeType.Element, "", "TiledPlacenameSet");
		}

		public Type_TiledPlacenameSet NewTiledPlacenameSet()
		{
			return new Type_TiledPlacenameSet(domNode.OwnerDocument.CreateElement("TiledPlacenameSet", ""));
		}

		public Type_TiledPlacenameSet GetTiledPlacenameSetAt(int index)
		{
			return new Type_TiledPlacenameSet(GetDomChildAt(NodeType.Element, "", "TiledPlacenameSet", index));
		}

		public XmlNode GetStartingTiledPlacenameSetCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "TiledPlacenameSet" );
		}

		public XmlNode GetAdvancedTiledPlacenameSetCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "TiledPlacenameSet", curNode );
		}

		public Type_TiledPlacenameSet GetTiledPlacenameSetValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_TiledPlacenameSet( curNode );
		}


		public Type_TiledPlacenameSet GetTiledPlacenameSet()
		{
			return GetTiledPlacenameSetAt(0);
		}

		public Type_TiledPlacenameSet TiledPlacenameSet
		{
			get
			{
				return GetTiledPlacenameSetAt(0);
			}
		}

		public void RemoveTiledPlacenameSetAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "TiledPlacenameSet", index);
		}

		public void RemoveTiledPlacenameSet()
		{
			while (HasTiledPlacenameSet())
				RemoveTiledPlacenameSetAt(0);
		}

		public XmlNode AddTiledPlacenameSet(Type_TiledPlacenameSet newValue)
		{
			return AppendDomElement("", "TiledPlacenameSet", newValue);
		}

		public void InsertTiledPlacenameSetAt(Type_TiledPlacenameSet newValue, int index)
		{
			InsertDomElementAt("", "TiledPlacenameSet", index, newValue);
		}

		public void ReplaceTiledPlacenameSetAt(Type_TiledPlacenameSet newValue, int index)
		{
			ReplaceDomElementAt("", "TiledPlacenameSet", index, newValue);
		}
		#endregion // TiledPlacenameSet accessor methods

		#region TiledPlacenameSet collection
        public TiledPlacenameSetCollection	MyTiledPlacenameSets = new TiledPlacenameSetCollection( );

        public class TiledPlacenameSetCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public TiledPlacenameSetEnumerator GetEnumerator() 
			{
				return new TiledPlacenameSetEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class TiledPlacenameSetEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public TiledPlacenameSetEnumerator(Type_LayerSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.TiledPlacenameSetCount );
			}
			public Type_TiledPlacenameSet  Current 
			{
				get 
				{
					return(parent.GetTiledPlacenameSetAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // TiledPlacenameSet collection

		#region TiledWFSPlacenameSet Documentation
		public static string GetTiledWFSPlacenameSetAnnoDocumentation()
		{
			return "";		
		}
		public static string GetTiledWFSPlacenameSetDefault()
		{
			return "";		
		}
		#endregion

		#region TiledWFSPlacenameSet accessor methods
		public static int GetTiledWFSPlacenameSetMinCount()
		{
			return 0;
		}

		public static int TiledWFSPlacenameSetMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetTiledWFSPlacenameSetMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int TiledWFSPlacenameSetMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetTiledWFSPlacenameSetCount()
		{
			return DomChildCount(NodeType.Element, "", "TiledWFSPlacenameSet");
		}

		public int TiledWFSPlacenameSetCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "TiledWFSPlacenameSet");
			}
		}

		public bool HasTiledWFSPlacenameSet()
		{
			return HasDomChild(NodeType.Element, "", "TiledWFSPlacenameSet");
		}

		public Type_TiledWFSPlacenameSet NewTiledWFSPlacenameSet()
		{
			return new Type_TiledWFSPlacenameSet(domNode.OwnerDocument.CreateElement("TiledWFSPlacenameSet", ""));
		}

		public Type_TiledWFSPlacenameSet GetTiledWFSPlacenameSetAt(int index)
		{
			return new Type_TiledWFSPlacenameSet(GetDomChildAt(NodeType.Element, "", "TiledWFSPlacenameSet", index));
		}

		public XmlNode GetStartingTiledWFSPlacenameSetCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "TiledWFSPlacenameSet" );
		}

		public XmlNode GetAdvancedTiledWFSPlacenameSetCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "TiledWFSPlacenameSet", curNode );
		}

		public Type_TiledWFSPlacenameSet GetTiledWFSPlacenameSetValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_TiledWFSPlacenameSet( curNode );
		}


		public Type_TiledWFSPlacenameSet GetTiledWFSPlacenameSet()
		{
			return GetTiledWFSPlacenameSetAt(0);
		}

		public Type_TiledWFSPlacenameSet TiledWFSPlacenameSet
		{
			get
			{
				return GetTiledWFSPlacenameSetAt(0);
			}
		}

		public void RemoveTiledWFSPlacenameSetAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "TiledWFSPlacenameSet", index);
		}

		public void RemoveTiledWFSPlacenameSet()
		{
			while (HasTiledWFSPlacenameSet())
				RemoveTiledWFSPlacenameSetAt(0);
		}

		public XmlNode AddTiledWFSPlacenameSet(Type_TiledWFSPlacenameSet newValue)
		{
			return AppendDomElement("", "TiledWFSPlacenameSet", newValue);
		}

		public void InsertTiledWFSPlacenameSetAt(Type_TiledWFSPlacenameSet newValue, int index)
		{
			InsertDomElementAt("", "TiledWFSPlacenameSet", index, newValue);
		}

		public void ReplaceTiledWFSPlacenameSetAt(Type_TiledWFSPlacenameSet newValue, int index)
		{
			ReplaceDomElementAt("", "TiledWFSPlacenameSet", index, newValue);
		}
		#endregion // TiledWFSPlacenameSet accessor methods

		#region TiledWFSPlacenameSet collection
        public TiledWFSPlacenameSetCollection	MyTiledWFSPlacenameSets = new TiledWFSPlacenameSetCollection( );

        public class TiledWFSPlacenameSetCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public TiledWFSPlacenameSetEnumerator GetEnumerator() 
			{
				return new TiledWFSPlacenameSetEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class TiledWFSPlacenameSetEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public TiledWFSPlacenameSetEnumerator(Type_LayerSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.TiledWFSPlacenameSetCount );
			}
			public Type_TiledWFSPlacenameSet  Current 
			{
				get 
				{
					return(parent.GetTiledWFSPlacenameSetAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // TiledWFSPlacenameSet collection

		#region ExtendedInformation Documentation
		public static string GetExtendedInformationAnnoDocumentation()
		{
			return "";		
		}
		public static string GetExtendedInformationDefault()
		{
			return "";		
		}
		#endregion

		#region ExtendedInformation accessor methods
		public static int GetExtendedInformationMinCount()
		{
			return 0;
		}

		public static int ExtendedInformationMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetExtendedInformationMaxCount()
		{
			return 1;
		}

		public static int ExtendedInformationMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetExtendedInformationCount()
		{
			return DomChildCount(NodeType.Element, "", "ExtendedInformation");
		}

		public int ExtendedInformationCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ExtendedInformation");
			}
		}

		public bool HasExtendedInformation()
		{
			return HasDomChild(NodeType.Element, "", "ExtendedInformation");
		}

		public Type_ExtendedInformation NewExtendedInformation()
		{
			return new Type_ExtendedInformation(domNode.OwnerDocument.CreateElement("ExtendedInformation", ""));
		}

		public Type_ExtendedInformation GetExtendedInformationAt(int index)
		{
			return new Type_ExtendedInformation(GetDomChildAt(NodeType.Element, "", "ExtendedInformation", index));
		}

		public XmlNode GetStartingExtendedInformationCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ExtendedInformation" );
		}

		public XmlNode GetAdvancedExtendedInformationCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ExtendedInformation", curNode );
		}

		public Type_ExtendedInformation GetExtendedInformationValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_ExtendedInformation( curNode );
		}


		public Type_ExtendedInformation GetExtendedInformation()
		{
			return GetExtendedInformationAt(0);
		}

		public Type_ExtendedInformation ExtendedInformation
		{
			get
			{
				return GetExtendedInformationAt(0);
			}
		}

		public void RemoveExtendedInformationAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ExtendedInformation", index);
		}

		public void RemoveExtendedInformation()
		{
			RemoveExtendedInformationAt(0);
		}

		public XmlNode AddExtendedInformation(Type_ExtendedInformation newValue)
		{
			return AppendDomElement("", "ExtendedInformation", newValue);
		}

		public void InsertExtendedInformationAt(Type_ExtendedInformation newValue, int index)
		{
			InsertDomElementAt("", "ExtendedInformation", index, newValue);
		}

		public void ReplaceExtendedInformationAt(Type_ExtendedInformation newValue, int index)
		{
			ReplaceDomElementAt("", "ExtendedInformation", index, newValue);
		}
		#endregion // ExtendedInformation accessor methods

		#region ExtendedInformation collection
        public ExtendedInformationCollection	MyExtendedInformations = new ExtendedInformationCollection( );

        public class ExtendedInformationCollection: IEnumerable
        {
            Type_LayerSet parent;
            public Type_LayerSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public ExtendedInformationEnumerator GetEnumerator() 
			{
				return new ExtendedInformationEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ExtendedInformationEnumerator: IEnumerator 
        {
			int nIndex;
			Type_LayerSet parent;
			public ExtendedInformationEnumerator(Type_LayerSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ExtendedInformationCount );
			}
			public Type_ExtendedInformation  Current 
			{
				get 
				{
					return(parent.GetExtendedInformationAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ExtendedInformation collection

        private void SetCollectionParents()
        {
            MyNames.Parent = this; 
            MyShowOnlyOneLayers.Parent = this; 
            MyShowAtStartups.Parent = this; 
            Myredirects.Parent = this; 
            MyRefreshs.Parent = this; 
            MyChildLayerSets.Parent = this; 
            MyImageLayers.Parent = this; 
            MyQuadTileSets.Parent = this; 
            MyShapeFileLayers.Parent = this; 
            MyMeshLayers.Parent = this; 
            MyModelFeatures.Parent = this; 
            MyPathLists.Parent = this; 
            MyIcons.Parent = this; 
            MyScreenOverlays.Parent = this; 
            MyTiledPlacenameSets.Parent = this; 
            MyTiledWFSPlacenameSets.Parent = this; 
            MyExtendedInformations.Parent = this; 
	}
}
}
