//
// Type_TiledWFSPlacenameSet.cs
//
// This file was generated by XMLSpy 2007r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LayerSet
{
	public class Type_TiledWFSPlacenameSet : Altova.Xml.Node
	{
		#region Documentation
		public static string GetAnnoDocumentation() { return ""; }
		#endregion

		#region Forward constructors

		public Type_TiledWFSPlacenameSet() : base() { SetCollectionParents(); }

		public Type_TiledWFSPlacenameSet(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public Type_TiledWFSPlacenameSet(XmlNode node) : base(node) { SetCollectionParents(); }
		public Type_TiledWFSPlacenameSet(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public Type_TiledWFSPlacenameSet(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "ShowAtStartup" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "ShowAtStartup", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "Name" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "Name", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "DistanceAboveSurface" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "DistanceAboveSurface", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "MinimumDisplayAltitude" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "MinimumDisplayAltitude", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "MaximumDisplayAltitude" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "MaximumDisplayAltitude", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "WFSBaseURL" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "WFSBaseURL", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "TypeName" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "TypeName", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "LabelField" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "LabelField", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "DisplayFont" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "DisplayFont", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_DisplayFont(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "RGBColor" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "RGBColor", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_RGBColor(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "WinColorName" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "WinColorName", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "IconFilePath" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "IconFilePath", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ExtendedInformation" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ExtendedInformation", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_ExtendedInformation(DOMNode).AdjustPrefix();
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "Type_TiledWFSPlacenameSet");
		}


		#region ShowAtStartup Documentation
		public static string GetShowAtStartupAnnoDocumentation()
		{
			return "";		
		}
		public static string GetShowAtStartupDefault()
		{
			return "";		
		}
		#endregion

		#region ShowAtStartup accessor methods
		public static int GetShowAtStartupMinCount()
		{
			return 1;
		}

		public static int ShowAtStartupMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetShowAtStartupMaxCount()
		{
			return 1;
		}

		public static int ShowAtStartupMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetShowAtStartupCount()
		{
			return DomChildCount(NodeType.Attribute, "", "ShowAtStartup");
		}

		public int ShowAtStartupCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "ShowAtStartup");
			}
		}

		public bool HasShowAtStartup()
		{
			return HasDomChild(NodeType.Attribute, "", "ShowAtStartup");
		}

		public SchemaBoolean NewShowAtStartup()
		{
			return new SchemaBoolean();
		}

		public SchemaBoolean GetShowAtStartupAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "ShowAtStartup", index)));
		}

		public XmlNode GetStartingShowAtStartupCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "ShowAtStartup" );
		}

		public XmlNode GetAdvancedShowAtStartupCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "ShowAtStartup", curNode );
		}

		public SchemaBoolean GetShowAtStartupValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaBoolean( curNode.Value );
		}


		public SchemaBoolean GetShowAtStartup()
		{
			return GetShowAtStartupAt(0);
		}

		public SchemaBoolean ShowAtStartup
		{
			get
			{
				return GetShowAtStartupAt(0);
			}
		}

		public void RemoveShowAtStartupAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "ShowAtStartup", index);
		}

		public void RemoveShowAtStartup()
		{
			RemoveShowAtStartupAt(0);
		}

		public XmlNode AddShowAtStartup(SchemaBoolean newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "ShowAtStartup", newValue.ToString());
			return null;
		}

		public void InsertShowAtStartupAt(SchemaBoolean newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "ShowAtStartup", index, newValue.ToString());
		}

		public void ReplaceShowAtStartupAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "ShowAtStartup", index, newValue.ToString());
		}
		#endregion // ShowAtStartup accessor methods

		#region ShowAtStartup collection
        public ShowAtStartupCollection	MyShowAtStartups = new ShowAtStartupCollection( );

        public class ShowAtStartupCollection: IEnumerable
        {
            Type_TiledWFSPlacenameSet parent;
            public Type_TiledWFSPlacenameSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public ShowAtStartupEnumerator GetEnumerator() 
			{
				return new ShowAtStartupEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ShowAtStartupEnumerator: IEnumerator 
        {
			int nIndex;
			Type_TiledWFSPlacenameSet parent;
			public ShowAtStartupEnumerator(Type_TiledWFSPlacenameSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ShowAtStartupCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetShowAtStartupAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ShowAtStartup collection

		#region Name Documentation
		public static string GetNameAnnoDocumentation()
		{
			return "";		
		}
		public static string GetNameDefault()
		{
			return "";		
		}
		#endregion

		#region Name accessor methods
		public static int GetNameMinCount()
		{
			return 1;
		}

		public static int NameMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetNameMaxCount()
		{
			return 1;
		}

		public static int NameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameCount()
		{
			return DomChildCount(NodeType.Element, "", "Name");
		}

		public int NameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Name");
			}
		}

		public bool HasName()
		{
			return HasDomChild(NodeType.Element, "", "Name");
		}

		public SchemaString NewName()
		{
			return new SchemaString();
		}

		public SchemaString GetNameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Name", index)));
		}

		public XmlNode GetStartingNameCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Name" );
		}

		public XmlNode GetAdvancedNameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Name", curNode );
		}

		public SchemaString GetNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetName()
		{
			return GetNameAt(0);
		}

		public SchemaString Name
		{
			get
			{
				return GetNameAt(0);
			}
		}

		public void RemoveNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Name", index);
		}

		public void RemoveName()
		{
			RemoveNameAt(0);
		}

		public XmlNode AddName(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "Name", newValue.ToString());
			return null;
		}

		public void InsertNameAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "Name", index, newValue.ToString());
		}

		public void ReplaceNameAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Name", index, newValue.ToString());
		}
		#endregion // Name accessor methods

		#region Name collection
        public NameCollection	MyNames = new NameCollection( );

        public class NameCollection: IEnumerable
        {
            Type_TiledWFSPlacenameSet parent;
            public Type_TiledWFSPlacenameSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public NameEnumerator GetEnumerator() 
			{
				return new NameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NameEnumerator: IEnumerator 
        {
			int nIndex;
			Type_TiledWFSPlacenameSet parent;
			public NameEnumerator(Type_TiledWFSPlacenameSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NameCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Name collection

		#region DistanceAboveSurface Documentation
		public static string GetDistanceAboveSurfaceAnnoDocumentation()
		{
			return "";		
		}
		public static string GetDistanceAboveSurfaceDefault()
		{
			return "";		
		}
		#endregion

		#region DistanceAboveSurface accessor methods
		public static int GetDistanceAboveSurfaceMinCount()
		{
			return 1;
		}

		public static int DistanceAboveSurfaceMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetDistanceAboveSurfaceMaxCount()
		{
			return 1;
		}

		public static int DistanceAboveSurfaceMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDistanceAboveSurfaceCount()
		{
			return DomChildCount(NodeType.Element, "", "DistanceAboveSurface");
		}

		public int DistanceAboveSurfaceCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "DistanceAboveSurface");
			}
		}

		public bool HasDistanceAboveSurface()
		{
			return HasDomChild(NodeType.Element, "", "DistanceAboveSurface");
		}

		public SchemaDouble NewDistanceAboveSurface()
		{
			return new SchemaDouble();
		}

		public SchemaDouble GetDistanceAboveSurfaceAt(int index)
		{
			return new SchemaDouble(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "DistanceAboveSurface", index)));
		}

		public XmlNode GetStartingDistanceAboveSurfaceCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "DistanceAboveSurface" );
		}

		public XmlNode GetAdvancedDistanceAboveSurfaceCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "DistanceAboveSurface", curNode );
		}

		public SchemaDouble GetDistanceAboveSurfaceValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDouble( curNode.InnerText );
		}


		public SchemaDouble GetDistanceAboveSurface()
		{
			return GetDistanceAboveSurfaceAt(0);
		}

		public SchemaDouble DistanceAboveSurface
		{
			get
			{
				return GetDistanceAboveSurfaceAt(0);
			}
		}

		public void RemoveDistanceAboveSurfaceAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "DistanceAboveSurface", index);
		}

		public void RemoveDistanceAboveSurface()
		{
			RemoveDistanceAboveSurfaceAt(0);
		}

		public XmlNode AddDistanceAboveSurface(SchemaDouble newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "DistanceAboveSurface", newValue.ToString());
			return null;
		}

		public void InsertDistanceAboveSurfaceAt(SchemaDouble newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "DistanceAboveSurface", index, newValue.ToString());
		}

		public void ReplaceDistanceAboveSurfaceAt(SchemaDouble newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "DistanceAboveSurface", index, newValue.ToString());
		}
		#endregion // DistanceAboveSurface accessor methods

		#region DistanceAboveSurface collection
        public DistanceAboveSurfaceCollection	MyDistanceAboveSurfaces = new DistanceAboveSurfaceCollection( );

        public class DistanceAboveSurfaceCollection: IEnumerable
        {
            Type_TiledWFSPlacenameSet parent;
            public Type_TiledWFSPlacenameSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public DistanceAboveSurfaceEnumerator GetEnumerator() 
			{
				return new DistanceAboveSurfaceEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class DistanceAboveSurfaceEnumerator: IEnumerator 
        {
			int nIndex;
			Type_TiledWFSPlacenameSet parent;
			public DistanceAboveSurfaceEnumerator(Type_TiledWFSPlacenameSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.DistanceAboveSurfaceCount );
			}
			public SchemaDouble  Current 
			{
				get 
				{
					return(parent.GetDistanceAboveSurfaceAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // DistanceAboveSurface collection

		#region MinimumDisplayAltitude Documentation
		public static string GetMinimumDisplayAltitudeAnnoDocumentation()
		{
			return "";		
		}
		public static string GetMinimumDisplayAltitudeDefault()
		{
			return "";		
		}
		#endregion

		#region MinimumDisplayAltitude accessor methods
		public static int GetMinimumDisplayAltitudeMinCount()
		{
			return 1;
		}

		public static int MinimumDisplayAltitudeMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetMinimumDisplayAltitudeMaxCount()
		{
			return 1;
		}

		public static int MinimumDisplayAltitudeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetMinimumDisplayAltitudeCount()
		{
			return DomChildCount(NodeType.Element, "", "MinimumDisplayAltitude");
		}

		public int MinimumDisplayAltitudeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "MinimumDisplayAltitude");
			}
		}

		public bool HasMinimumDisplayAltitude()
		{
			return HasDomChild(NodeType.Element, "", "MinimumDisplayAltitude");
		}

		public MinimumDisplayAltitudeType2 NewMinimumDisplayAltitude()
		{
			return new MinimumDisplayAltitudeType2();
		}

		public MinimumDisplayAltitudeType2 GetMinimumDisplayAltitudeAt(int index)
		{
			return new MinimumDisplayAltitudeType2(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "MinimumDisplayAltitude", index)));
		}

		public XmlNode GetStartingMinimumDisplayAltitudeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "MinimumDisplayAltitude" );
		}

		public XmlNode GetAdvancedMinimumDisplayAltitudeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "MinimumDisplayAltitude", curNode );
		}

		public MinimumDisplayAltitudeType2 GetMinimumDisplayAltitudeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new MinimumDisplayAltitudeType2( curNode.InnerText );
		}


		public MinimumDisplayAltitudeType2 GetMinimumDisplayAltitude()
		{
			return GetMinimumDisplayAltitudeAt(0);
		}

		public MinimumDisplayAltitudeType2 MinimumDisplayAltitude
		{
			get
			{
				return GetMinimumDisplayAltitudeAt(0);
			}
		}

		public void RemoveMinimumDisplayAltitudeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "MinimumDisplayAltitude", index);
		}

		public void RemoveMinimumDisplayAltitude()
		{
			RemoveMinimumDisplayAltitudeAt(0);
		}

		public XmlNode AddMinimumDisplayAltitude(MinimumDisplayAltitudeType2 newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "MinimumDisplayAltitude", newValue.ToString());
			return null;
		}

		public void InsertMinimumDisplayAltitudeAt(MinimumDisplayAltitudeType2 newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "MinimumDisplayAltitude", index, newValue.ToString());
		}

		public void ReplaceMinimumDisplayAltitudeAt(MinimumDisplayAltitudeType2 newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "MinimumDisplayAltitude", index, newValue.ToString());
		}
		#endregion // MinimumDisplayAltitude accessor methods

		#region MinimumDisplayAltitude collection
        public MinimumDisplayAltitudeCollection	MyMinimumDisplayAltitudes = new MinimumDisplayAltitudeCollection( );

        public class MinimumDisplayAltitudeCollection: IEnumerable
        {
            Type_TiledWFSPlacenameSet parent;
            public Type_TiledWFSPlacenameSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public MinimumDisplayAltitudeEnumerator GetEnumerator() 
			{
				return new MinimumDisplayAltitudeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class MinimumDisplayAltitudeEnumerator: IEnumerator 
        {
			int nIndex;
			Type_TiledWFSPlacenameSet parent;
			public MinimumDisplayAltitudeEnumerator(Type_TiledWFSPlacenameSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.MinimumDisplayAltitudeCount );
			}
			public MinimumDisplayAltitudeType2  Current 
			{
				get 
				{
					return(parent.GetMinimumDisplayAltitudeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // MinimumDisplayAltitude collection

		#region MaximumDisplayAltitude Documentation
		public static string GetMaximumDisplayAltitudeAnnoDocumentation()
		{
			return "";		
		}
		public static string GetMaximumDisplayAltitudeDefault()
		{
			return "";		
		}
		#endregion

		#region MaximumDisplayAltitude accessor methods
		public static int GetMaximumDisplayAltitudeMinCount()
		{
			return 1;
		}

		public static int MaximumDisplayAltitudeMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetMaximumDisplayAltitudeMaxCount()
		{
			return 1;
		}

		public static int MaximumDisplayAltitudeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetMaximumDisplayAltitudeCount()
		{
			return DomChildCount(NodeType.Element, "", "MaximumDisplayAltitude");
		}

		public int MaximumDisplayAltitudeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "MaximumDisplayAltitude");
			}
		}

		public bool HasMaximumDisplayAltitude()
		{
			return HasDomChild(NodeType.Element, "", "MaximumDisplayAltitude");
		}

		public MaximumDisplayAltitudeType2 NewMaximumDisplayAltitude()
		{
			return new MaximumDisplayAltitudeType2();
		}

		public MaximumDisplayAltitudeType2 GetMaximumDisplayAltitudeAt(int index)
		{
			return new MaximumDisplayAltitudeType2(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "MaximumDisplayAltitude", index)));
		}

		public XmlNode GetStartingMaximumDisplayAltitudeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "MaximumDisplayAltitude" );
		}

		public XmlNode GetAdvancedMaximumDisplayAltitudeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "MaximumDisplayAltitude", curNode );
		}

		public MaximumDisplayAltitudeType2 GetMaximumDisplayAltitudeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new MaximumDisplayAltitudeType2( curNode.InnerText );
		}


		public MaximumDisplayAltitudeType2 GetMaximumDisplayAltitude()
		{
			return GetMaximumDisplayAltitudeAt(0);
		}

		public MaximumDisplayAltitudeType2 MaximumDisplayAltitude
		{
			get
			{
				return GetMaximumDisplayAltitudeAt(0);
			}
		}

		public void RemoveMaximumDisplayAltitudeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "MaximumDisplayAltitude", index);
		}

		public void RemoveMaximumDisplayAltitude()
		{
			RemoveMaximumDisplayAltitudeAt(0);
		}

		public XmlNode AddMaximumDisplayAltitude(MaximumDisplayAltitudeType2 newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "MaximumDisplayAltitude", newValue.ToString());
			return null;
		}

		public void InsertMaximumDisplayAltitudeAt(MaximumDisplayAltitudeType2 newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "MaximumDisplayAltitude", index, newValue.ToString());
		}

		public void ReplaceMaximumDisplayAltitudeAt(MaximumDisplayAltitudeType2 newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "MaximumDisplayAltitude", index, newValue.ToString());
		}
		#endregion // MaximumDisplayAltitude accessor methods

		#region MaximumDisplayAltitude collection
        public MaximumDisplayAltitudeCollection	MyMaximumDisplayAltitudes = new MaximumDisplayAltitudeCollection( );

        public class MaximumDisplayAltitudeCollection: IEnumerable
        {
            Type_TiledWFSPlacenameSet parent;
            public Type_TiledWFSPlacenameSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public MaximumDisplayAltitudeEnumerator GetEnumerator() 
			{
				return new MaximumDisplayAltitudeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class MaximumDisplayAltitudeEnumerator: IEnumerator 
        {
			int nIndex;
			Type_TiledWFSPlacenameSet parent;
			public MaximumDisplayAltitudeEnumerator(Type_TiledWFSPlacenameSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.MaximumDisplayAltitudeCount );
			}
			public MaximumDisplayAltitudeType2  Current 
			{
				get 
				{
					return(parent.GetMaximumDisplayAltitudeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // MaximumDisplayAltitude collection

		#region WFSBaseURL Documentation
		public static string GetWFSBaseURLAnnoDocumentation()
		{
			return "";		
		}
		public static string GetWFSBaseURLDefault()
		{
			return "";		
		}
		#endregion

		#region WFSBaseURL accessor methods
		public static int GetWFSBaseURLMinCount()
		{
			return 1;
		}

		public static int WFSBaseURLMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetWFSBaseURLMaxCount()
		{
			return 1;
		}

		public static int WFSBaseURLMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetWFSBaseURLCount()
		{
			return DomChildCount(NodeType.Element, "", "WFSBaseURL");
		}

		public int WFSBaseURLCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "WFSBaseURL");
			}
		}

		public bool HasWFSBaseURL()
		{
			return HasDomChild(NodeType.Element, "", "WFSBaseURL");
		}

		public SchemaString NewWFSBaseURL()
		{
			return new SchemaString();
		}

		public SchemaString GetWFSBaseURLAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "WFSBaseURL", index)));
		}

		public XmlNode GetStartingWFSBaseURLCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "WFSBaseURL" );
		}

		public XmlNode GetAdvancedWFSBaseURLCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "WFSBaseURL", curNode );
		}

		public SchemaString GetWFSBaseURLValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetWFSBaseURL()
		{
			return GetWFSBaseURLAt(0);
		}

		public SchemaString WFSBaseURL
		{
			get
			{
				return GetWFSBaseURLAt(0);
			}
		}

		public void RemoveWFSBaseURLAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "WFSBaseURL", index);
		}

		public void RemoveWFSBaseURL()
		{
			RemoveWFSBaseURLAt(0);
		}

		public XmlNode AddWFSBaseURL(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "WFSBaseURL", newValue.ToString());
			return null;
		}

		public void InsertWFSBaseURLAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "WFSBaseURL", index, newValue.ToString());
		}

		public void ReplaceWFSBaseURLAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "WFSBaseURL", index, newValue.ToString());
		}
		#endregion // WFSBaseURL accessor methods

		#region WFSBaseURL collection
        public WFSBaseURLCollection	MyWFSBaseURLs = new WFSBaseURLCollection( );

        public class WFSBaseURLCollection: IEnumerable
        {
            Type_TiledWFSPlacenameSet parent;
            public Type_TiledWFSPlacenameSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public WFSBaseURLEnumerator GetEnumerator() 
			{
				return new WFSBaseURLEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class WFSBaseURLEnumerator: IEnumerator 
        {
			int nIndex;
			Type_TiledWFSPlacenameSet parent;
			public WFSBaseURLEnumerator(Type_TiledWFSPlacenameSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.WFSBaseURLCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetWFSBaseURLAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // WFSBaseURL collection

		#region TypeName Documentation
		public static string GetTypeNameAnnoDocumentation()
		{
			return "";		
		}
		public static string GetTypeNameDefault()
		{
			return "";		
		}
		#endregion

		#region TypeName accessor methods
		public static int GetTypeNameMinCount()
		{
			return 1;
		}

		public static int TypeNameMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetTypeNameMaxCount()
		{
			return 1;
		}

		public static int TypeNameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTypeNameCount()
		{
			return DomChildCount(NodeType.Element, "", "TypeName");
		}

		public int TypeNameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "TypeName");
			}
		}

		public bool HasTypeName()
		{
			return HasDomChild(NodeType.Element, "", "TypeName");
		}

		public SchemaString NewTypeName()
		{
			return new SchemaString();
		}

		public SchemaString GetTypeNameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "TypeName", index)));
		}

		public XmlNode GetStartingTypeNameCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "TypeName" );
		}

		public XmlNode GetAdvancedTypeNameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "TypeName", curNode );
		}

		public SchemaString GetTypeNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetTypeName()
		{
			return GetTypeNameAt(0);
		}

		public SchemaString TypeName
		{
			get
			{
				return GetTypeNameAt(0);
			}
		}

		public void RemoveTypeNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "TypeName", index);
		}

		public void RemoveTypeName()
		{
			RemoveTypeNameAt(0);
		}

		public XmlNode AddTypeName(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "TypeName", newValue.ToString());
			return null;
		}

		public void InsertTypeNameAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "TypeName", index, newValue.ToString());
		}

		public void ReplaceTypeNameAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "TypeName", index, newValue.ToString());
		}
		#endregion // TypeName accessor methods

		#region TypeName collection
        public TypeNameCollection	MyTypeNames = new TypeNameCollection( );

        public class TypeNameCollection: IEnumerable
        {
            Type_TiledWFSPlacenameSet parent;
            public Type_TiledWFSPlacenameSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public TypeNameEnumerator GetEnumerator() 
			{
				return new TypeNameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class TypeNameEnumerator: IEnumerator 
        {
			int nIndex;
			Type_TiledWFSPlacenameSet parent;
			public TypeNameEnumerator(Type_TiledWFSPlacenameSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.TypeNameCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetTypeNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // TypeName collection

		#region LabelField Documentation
		public static string GetLabelFieldAnnoDocumentation()
		{
			return "";		
		}
		public static string GetLabelFieldDefault()
		{
			return "";		
		}
		#endregion

		#region LabelField accessor methods
		public static int GetLabelFieldMinCount()
		{
			return 1;
		}

		public static int LabelFieldMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetLabelFieldMaxCount()
		{
			return 1;
		}

		public static int LabelFieldMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLabelFieldCount()
		{
			return DomChildCount(NodeType.Element, "", "LabelField");
		}

		public int LabelFieldCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "LabelField");
			}
		}

		public bool HasLabelField()
		{
			return HasDomChild(NodeType.Element, "", "LabelField");
		}

		public SchemaString NewLabelField()
		{
			return new SchemaString();
		}

		public SchemaString GetLabelFieldAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "LabelField", index)));
		}

		public XmlNode GetStartingLabelFieldCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "LabelField" );
		}

		public XmlNode GetAdvancedLabelFieldCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "LabelField", curNode );
		}

		public SchemaString GetLabelFieldValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetLabelField()
		{
			return GetLabelFieldAt(0);
		}

		public SchemaString LabelField
		{
			get
			{
				return GetLabelFieldAt(0);
			}
		}

		public void RemoveLabelFieldAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "LabelField", index);
		}

		public void RemoveLabelField()
		{
			RemoveLabelFieldAt(0);
		}

		public XmlNode AddLabelField(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "LabelField", newValue.ToString());
			return null;
		}

		public void InsertLabelFieldAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "LabelField", index, newValue.ToString());
		}

		public void ReplaceLabelFieldAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "LabelField", index, newValue.ToString());
		}
		#endregion // LabelField accessor methods

		#region LabelField collection
        public LabelFieldCollection	MyLabelFields = new LabelFieldCollection( );

        public class LabelFieldCollection: IEnumerable
        {
            Type_TiledWFSPlacenameSet parent;
            public Type_TiledWFSPlacenameSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public LabelFieldEnumerator GetEnumerator() 
			{
				return new LabelFieldEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class LabelFieldEnumerator: IEnumerator 
        {
			int nIndex;
			Type_TiledWFSPlacenameSet parent;
			public LabelFieldEnumerator(Type_TiledWFSPlacenameSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.LabelFieldCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetLabelFieldAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // LabelField collection

		#region DisplayFont Documentation
		public static string GetDisplayFontAnnoDocumentation()
		{
			return "";		
		}
		public static string GetDisplayFontDefault()
		{
			return "";		
		}
		#endregion

		#region DisplayFont accessor methods
		public static int GetDisplayFontMinCount()
		{
			return 0;
		}

		public static int DisplayFontMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetDisplayFontMaxCount()
		{
			return 1;
		}

		public static int DisplayFontMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDisplayFontCount()
		{
			return DomChildCount(NodeType.Element, "", "DisplayFont");
		}

		public int DisplayFontCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "DisplayFont");
			}
		}

		public bool HasDisplayFont()
		{
			return HasDomChild(NodeType.Element, "", "DisplayFont");
		}

		public Type_DisplayFont NewDisplayFont()
		{
			return new Type_DisplayFont(domNode.OwnerDocument.CreateElement("DisplayFont", ""));
		}

		public Type_DisplayFont GetDisplayFontAt(int index)
		{
			return new Type_DisplayFont(GetDomChildAt(NodeType.Element, "", "DisplayFont", index));
		}

		public XmlNode GetStartingDisplayFontCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "DisplayFont" );
		}

		public XmlNode GetAdvancedDisplayFontCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "DisplayFont", curNode );
		}

		public Type_DisplayFont GetDisplayFontValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_DisplayFont( curNode );
		}


		public Type_DisplayFont GetDisplayFont()
		{
			return GetDisplayFontAt(0);
		}

		public Type_DisplayFont DisplayFont
		{
			get
			{
				return GetDisplayFontAt(0);
			}
		}

		public void RemoveDisplayFontAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "DisplayFont", index);
		}

		public void RemoveDisplayFont()
		{
			RemoveDisplayFontAt(0);
		}

		public XmlNode AddDisplayFont(Type_DisplayFont newValue)
		{
			return AppendDomElement("", "DisplayFont", newValue);
		}

		public void InsertDisplayFontAt(Type_DisplayFont newValue, int index)
		{
			InsertDomElementAt("", "DisplayFont", index, newValue);
		}

		public void ReplaceDisplayFontAt(Type_DisplayFont newValue, int index)
		{
			ReplaceDomElementAt("", "DisplayFont", index, newValue);
		}
		#endregion // DisplayFont accessor methods

		#region DisplayFont collection
        public DisplayFontCollection	MyDisplayFonts = new DisplayFontCollection( );

        public class DisplayFontCollection: IEnumerable
        {
            Type_TiledWFSPlacenameSet parent;
            public Type_TiledWFSPlacenameSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public DisplayFontEnumerator GetEnumerator() 
			{
				return new DisplayFontEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class DisplayFontEnumerator: IEnumerator 
        {
			int nIndex;
			Type_TiledWFSPlacenameSet parent;
			public DisplayFontEnumerator(Type_TiledWFSPlacenameSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.DisplayFontCount );
			}
			public Type_DisplayFont  Current 
			{
				get 
				{
					return(parent.GetDisplayFontAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // DisplayFont collection

		#region RGBColor Documentation
		public static string GetRGBColorAnnoDocumentation()
		{
			return "";		
		}
		public static string GetRGBColorDefault()
		{
			return "";		
		}
		#endregion

		#region RGBColor accessor methods
		public static int GetRGBColorMinCount()
		{
			return 0;
		}

		public static int RGBColorMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetRGBColorMaxCount()
		{
			return 1;
		}

		public static int RGBColorMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRGBColorCount()
		{
			return DomChildCount(NodeType.Element, "", "RGBColor");
		}

		public int RGBColorCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "RGBColor");
			}
		}

		public bool HasRGBColor()
		{
			return HasDomChild(NodeType.Element, "", "RGBColor");
		}

		public Type_RGBColor NewRGBColor()
		{
			return new Type_RGBColor(domNode.OwnerDocument.CreateElement("RGBColor", ""));
		}

		public Type_RGBColor GetRGBColorAt(int index)
		{
			return new Type_RGBColor(GetDomChildAt(NodeType.Element, "", "RGBColor", index));
		}

		public XmlNode GetStartingRGBColorCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "RGBColor" );
		}

		public XmlNode GetAdvancedRGBColorCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "RGBColor", curNode );
		}

		public Type_RGBColor GetRGBColorValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_RGBColor( curNode );
		}


		public Type_RGBColor GetRGBColor()
		{
			return GetRGBColorAt(0);
		}

		public Type_RGBColor RGBColor
		{
			get
			{
				return GetRGBColorAt(0);
			}
		}

		public void RemoveRGBColorAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "RGBColor", index);
		}

		public void RemoveRGBColor()
		{
			RemoveRGBColorAt(0);
		}

		public XmlNode AddRGBColor(Type_RGBColor newValue)
		{
			return AppendDomElement("", "RGBColor", newValue);
		}

		public void InsertRGBColorAt(Type_RGBColor newValue, int index)
		{
			InsertDomElementAt("", "RGBColor", index, newValue);
		}

		public void ReplaceRGBColorAt(Type_RGBColor newValue, int index)
		{
			ReplaceDomElementAt("", "RGBColor", index, newValue);
		}
		#endregion // RGBColor accessor methods

		#region RGBColor collection
        public RGBColorCollection	MyRGBColors = new RGBColorCollection( );

        public class RGBColorCollection: IEnumerable
        {
            Type_TiledWFSPlacenameSet parent;
            public Type_TiledWFSPlacenameSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public RGBColorEnumerator GetEnumerator() 
			{
				return new RGBColorEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class RGBColorEnumerator: IEnumerator 
        {
			int nIndex;
			Type_TiledWFSPlacenameSet parent;
			public RGBColorEnumerator(Type_TiledWFSPlacenameSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.RGBColorCount );
			}
			public Type_RGBColor  Current 
			{
				get 
				{
					return(parent.GetRGBColorAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // RGBColor collection

		#region WinColorName Documentation
		public static string GetWinColorNameAnnoDocumentation()
		{
			return "";		
		}
		public static string GetWinColorNameDefault()
		{
			return "";		
		}
		#endregion

		#region WinColorName accessor methods
		public static int GetWinColorNameMinCount()
		{
			return 0;
		}

		public static int WinColorNameMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetWinColorNameMaxCount()
		{
			return 1;
		}

		public static int WinColorNameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetWinColorNameCount()
		{
			return DomChildCount(NodeType.Element, "", "WinColorName");
		}

		public int WinColorNameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "WinColorName");
			}
		}

		public bool HasWinColorName()
		{
			return HasDomChild(NodeType.Element, "", "WinColorName");
		}

		public SchemaString NewWinColorName()
		{
			return new SchemaString();
		}

		public SchemaString GetWinColorNameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "WinColorName", index)));
		}

		public XmlNode GetStartingWinColorNameCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "WinColorName" );
		}

		public XmlNode GetAdvancedWinColorNameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "WinColorName", curNode );
		}

		public SchemaString GetWinColorNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetWinColorName()
		{
			return GetWinColorNameAt(0);
		}

		public SchemaString WinColorName
		{
			get
			{
				return GetWinColorNameAt(0);
			}
		}

		public void RemoveWinColorNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "WinColorName", index);
		}

		public void RemoveWinColorName()
		{
			RemoveWinColorNameAt(0);
		}

		public XmlNode AddWinColorName(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "WinColorName", newValue.ToString());
			return null;
		}

		public void InsertWinColorNameAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "WinColorName", index, newValue.ToString());
		}

		public void ReplaceWinColorNameAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "WinColorName", index, newValue.ToString());
		}
		#endregion // WinColorName accessor methods

		#region WinColorName collection
        public WinColorNameCollection	MyWinColorNames = new WinColorNameCollection( );

        public class WinColorNameCollection: IEnumerable
        {
            Type_TiledWFSPlacenameSet parent;
            public Type_TiledWFSPlacenameSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public WinColorNameEnumerator GetEnumerator() 
			{
				return new WinColorNameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class WinColorNameEnumerator: IEnumerator 
        {
			int nIndex;
			Type_TiledWFSPlacenameSet parent;
			public WinColorNameEnumerator(Type_TiledWFSPlacenameSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.WinColorNameCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetWinColorNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // WinColorName collection

		#region IconFilePath Documentation
		public static string GetIconFilePathAnnoDocumentation()
		{
			return "";		
		}
		public static string GetIconFilePathDefault()
		{
			return "";		
		}
		#endregion

		#region IconFilePath accessor methods
		public static int GetIconFilePathMinCount()
		{
			return 0;
		}

		public static int IconFilePathMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetIconFilePathMaxCount()
		{
			return 1;
		}

		public static int IconFilePathMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetIconFilePathCount()
		{
			return DomChildCount(NodeType.Element, "", "IconFilePath");
		}

		public int IconFilePathCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "IconFilePath");
			}
		}

		public bool HasIconFilePath()
		{
			return HasDomChild(NodeType.Element, "", "IconFilePath");
		}

		public SchemaString NewIconFilePath()
		{
			return new SchemaString();
		}

		public SchemaString GetIconFilePathAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "IconFilePath", index)));
		}

		public XmlNode GetStartingIconFilePathCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "IconFilePath" );
		}

		public XmlNode GetAdvancedIconFilePathCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "IconFilePath", curNode );
		}

		public SchemaString GetIconFilePathValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetIconFilePath()
		{
			return GetIconFilePathAt(0);
		}

		public SchemaString IconFilePath
		{
			get
			{
				return GetIconFilePathAt(0);
			}
		}

		public void RemoveIconFilePathAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "IconFilePath", index);
		}

		public void RemoveIconFilePath()
		{
			RemoveIconFilePathAt(0);
		}

		public XmlNode AddIconFilePath(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "IconFilePath", newValue.ToString());
			return null;
		}

		public void InsertIconFilePathAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "IconFilePath", index, newValue.ToString());
		}

		public void ReplaceIconFilePathAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "IconFilePath", index, newValue.ToString());
		}
		#endregion // IconFilePath accessor methods

		#region IconFilePath collection
        public IconFilePathCollection	MyIconFilePaths = new IconFilePathCollection( );

        public class IconFilePathCollection: IEnumerable
        {
            Type_TiledWFSPlacenameSet parent;
            public Type_TiledWFSPlacenameSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public IconFilePathEnumerator GetEnumerator() 
			{
				return new IconFilePathEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class IconFilePathEnumerator: IEnumerator 
        {
			int nIndex;
			Type_TiledWFSPlacenameSet parent;
			public IconFilePathEnumerator(Type_TiledWFSPlacenameSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.IconFilePathCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetIconFilePathAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // IconFilePath collection

		#region ExtendedInformation Documentation
		public static string GetExtendedInformationAnnoDocumentation()
		{
			return "";		
		}
		public static string GetExtendedInformationDefault()
		{
			return "";		
		}
		#endregion

		#region ExtendedInformation accessor methods
		public static int GetExtendedInformationMinCount()
		{
			return 0;
		}

		public static int ExtendedInformationMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetExtendedInformationMaxCount()
		{
			return 1;
		}

		public static int ExtendedInformationMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetExtendedInformationCount()
		{
			return DomChildCount(NodeType.Element, "", "ExtendedInformation");
		}

		public int ExtendedInformationCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ExtendedInformation");
			}
		}

		public bool HasExtendedInformation()
		{
			return HasDomChild(NodeType.Element, "", "ExtendedInformation");
		}

		public Type_ExtendedInformation NewExtendedInformation()
		{
			return new Type_ExtendedInformation(domNode.OwnerDocument.CreateElement("ExtendedInformation", ""));
		}

		public Type_ExtendedInformation GetExtendedInformationAt(int index)
		{
			return new Type_ExtendedInformation(GetDomChildAt(NodeType.Element, "", "ExtendedInformation", index));
		}

		public XmlNode GetStartingExtendedInformationCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ExtendedInformation" );
		}

		public XmlNode GetAdvancedExtendedInformationCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ExtendedInformation", curNode );
		}

		public Type_ExtendedInformation GetExtendedInformationValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_ExtendedInformation( curNode );
		}


		public Type_ExtendedInformation GetExtendedInformation()
		{
			return GetExtendedInformationAt(0);
		}

		public Type_ExtendedInformation ExtendedInformation
		{
			get
			{
				return GetExtendedInformationAt(0);
			}
		}

		public void RemoveExtendedInformationAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ExtendedInformation", index);
		}

		public void RemoveExtendedInformation()
		{
			RemoveExtendedInformationAt(0);
		}

		public XmlNode AddExtendedInformation(Type_ExtendedInformation newValue)
		{
			return AppendDomElement("", "ExtendedInformation", newValue);
		}

		public void InsertExtendedInformationAt(Type_ExtendedInformation newValue, int index)
		{
			InsertDomElementAt("", "ExtendedInformation", index, newValue);
		}

		public void ReplaceExtendedInformationAt(Type_ExtendedInformation newValue, int index)
		{
			ReplaceDomElementAt("", "ExtendedInformation", index, newValue);
		}
		#endregion // ExtendedInformation accessor methods

		#region ExtendedInformation collection
        public ExtendedInformationCollection	MyExtendedInformations = new ExtendedInformationCollection( );

        public class ExtendedInformationCollection: IEnumerable
        {
            Type_TiledWFSPlacenameSet parent;
            public Type_TiledWFSPlacenameSet Parent
			{
				set
				{
					parent = value;
				}
			}
			public ExtendedInformationEnumerator GetEnumerator() 
			{
				return new ExtendedInformationEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ExtendedInformationEnumerator: IEnumerator 
        {
			int nIndex;
			Type_TiledWFSPlacenameSet parent;
			public ExtendedInformationEnumerator(Type_TiledWFSPlacenameSet par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ExtendedInformationCount );
			}
			public Type_ExtendedInformation  Current 
			{
				get 
				{
					return(parent.GetExtendedInformationAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ExtendedInformation collection

        private void SetCollectionParents()
        {
            MyShowAtStartups.Parent = this; 
            MyNames.Parent = this; 
            MyDistanceAboveSurfaces.Parent = this; 
            MyMinimumDisplayAltitudes.Parent = this; 
            MyMaximumDisplayAltitudes.Parent = this; 
            MyWFSBaseURLs.Parent = this; 
            MyTypeNames.Parent = this; 
            MyLabelFields.Parent = this; 
            MyDisplayFonts.Parent = this; 
            MyRGBColors.Parent = this; 
            MyWinColorNames.Parent = this; 
            MyIconFilePaths.Parent = this; 
            MyExtendedInformations.Parent = this; 
	}
}
}
