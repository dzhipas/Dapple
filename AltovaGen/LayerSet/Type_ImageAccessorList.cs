//
// Type_ImageAccessorList.cs
//
// This file was generated by XMLSpy 2007r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LayerSet
{
	public class Type_ImageAccessorList : Altova.Xml.Node
	{
		#region Documentation
		public static string GetAnnoDocumentation() { return ""; }
		#endregion

		#region Forward constructors

		public Type_ImageAccessorList() : base() { SetCollectionParents(); }

		public Type_ImageAccessorList(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public Type_ImageAccessorList(XmlNode node) : base(node) { SetCollectionParents(); }
		public Type_ImageAccessorList(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public Type_ImageAccessorList(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "ImageAccessor" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "ImageAccessor", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_ImageAccessor(DOMNode).AdjustPrefix();
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "Type_ImageAccessorList");
		}


		#region ImageAccessor Documentation
		public static string GetImageAccessorAnnoDocumentation()
		{
			return "";		
		}
		public static string GetImageAccessorDefault()
		{
			return "";		
		}
		#endregion

		#region ImageAccessor accessor methods
		public static int GetImageAccessorMinCount()
		{
			return 1;
		}

		public static int ImageAccessorMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetImageAccessorMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int ImageAccessorMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetImageAccessorCount()
		{
			return DomChildCount(NodeType.Element, "", "ImageAccessor");
		}

		public int ImageAccessorCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ImageAccessor");
			}
		}

		public bool HasImageAccessor()
		{
			return HasDomChild(NodeType.Element, "", "ImageAccessor");
		}

		public Type_ImageAccessor NewImageAccessor()
		{
			return new Type_ImageAccessor(domNode.OwnerDocument.CreateElement("ImageAccessor", ""));
		}

		public Type_ImageAccessor GetImageAccessorAt(int index)
		{
			return new Type_ImageAccessor(GetDomChildAt(NodeType.Element, "", "ImageAccessor", index));
		}

		public XmlNode GetStartingImageAccessorCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ImageAccessor" );
		}

		public XmlNode GetAdvancedImageAccessorCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ImageAccessor", curNode );
		}

		public Type_ImageAccessor GetImageAccessorValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_ImageAccessor( curNode );
		}


		public Type_ImageAccessor GetImageAccessor()
		{
			return GetImageAccessorAt(0);
		}

		public Type_ImageAccessor ImageAccessor
		{
			get
			{
				return GetImageAccessorAt(0);
			}
		}

		public void RemoveImageAccessorAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ImageAccessor", index);
		}

		public void RemoveImageAccessor()
		{
			while (HasImageAccessor())
				RemoveImageAccessorAt(0);
		}

		public XmlNode AddImageAccessor(Type_ImageAccessor newValue)
		{
			return AppendDomElement("", "ImageAccessor", newValue);
		}

		public void InsertImageAccessorAt(Type_ImageAccessor newValue, int index)
		{
			InsertDomElementAt("", "ImageAccessor", index, newValue);
		}

		public void ReplaceImageAccessorAt(Type_ImageAccessor newValue, int index)
		{
			ReplaceDomElementAt("", "ImageAccessor", index, newValue);
		}
		#endregion // ImageAccessor accessor methods

		#region ImageAccessor collection
        public ImageAccessorCollection	MyImageAccessors = new ImageAccessorCollection( );

        public class ImageAccessorCollection: IEnumerable
        {
            Type_ImageAccessorList parent;
            public Type_ImageAccessorList Parent
			{
				set
				{
					parent = value;
				}
			}
			public ImageAccessorEnumerator GetEnumerator() 
			{
				return new ImageAccessorEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ImageAccessorEnumerator: IEnumerator 
        {
			int nIndex;
			Type_ImageAccessorList parent;
			public ImageAccessorEnumerator(Type_ImageAccessorList par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ImageAccessorCount );
			}
			public Type_ImageAccessor  Current 
			{
				get 
				{
					return(parent.GetImageAccessorAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ImageAccessor collection

        private void SetCollectionParents()
        {
            MyImageAccessors.Parent = this; 
	}
}
}
