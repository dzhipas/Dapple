//
// Type_Orientation.cs
//
// This file was generated by XMLSpy 2007r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LayerSet
{
	public class Type_Orientation : Altova.Xml.Node
	{
		#region Documentation
		public static string GetAnnoDocumentation() { return "Units are in degrees"; }
		#endregion

		#region Forward constructors

		public Type_Orientation() : base() { SetCollectionParents(); }

		public Type_Orientation(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public Type_Orientation(XmlNode node) : base(node) { SetCollectionParents(); }
		public Type_Orientation(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public Type_Orientation(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "RotationX" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "RotationX", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "RotationY" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "RotationY", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "RotationZ" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "RotationZ", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "Type_Orientation");
		}


		#region RotationX Documentation
		public static string GetRotationXAnnoDocumentation()
		{
			return "";		
		}
		public static string GetRotationXDefault()
		{
			return "";		
		}
		#endregion

		#region RotationX accessor methods
		public static int GetRotationXMinCount()
		{
			return 1;
		}

		public static int RotationXMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetRotationXMaxCount()
		{
			return 1;
		}

		public static int RotationXMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRotationXCount()
		{
			return DomChildCount(NodeType.Element, "", "RotationX");
		}

		public int RotationXCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "RotationX");
			}
		}

		public bool HasRotationX()
		{
			return HasDomChild(NodeType.Element, "", "RotationX");
		}

		public SchemaDouble NewRotationX()
		{
			return new SchemaDouble();
		}

		public SchemaDouble GetRotationXAt(int index)
		{
			return new SchemaDouble(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "RotationX", index)));
		}

		public XmlNode GetStartingRotationXCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "RotationX" );
		}

		public XmlNode GetAdvancedRotationXCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "RotationX", curNode );
		}

		public SchemaDouble GetRotationXValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDouble( curNode.InnerText );
		}


		public SchemaDouble GetRotationX()
		{
			return GetRotationXAt(0);
		}

		public SchemaDouble RotationX
		{
			get
			{
				return GetRotationXAt(0);
			}
		}

		public void RemoveRotationXAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "RotationX", index);
		}

		public void RemoveRotationX()
		{
			RemoveRotationXAt(0);
		}

		public XmlNode AddRotationX(SchemaDouble newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "RotationX", newValue.ToString());
			return null;
		}

		public void InsertRotationXAt(SchemaDouble newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "RotationX", index, newValue.ToString());
		}

		public void ReplaceRotationXAt(SchemaDouble newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "RotationX", index, newValue.ToString());
		}
		#endregion // RotationX accessor methods

		#region RotationX collection
        public RotationXCollection	MyRotationXs = new RotationXCollection( );

        public class RotationXCollection: IEnumerable
        {
            Type_Orientation parent;
            public Type_Orientation Parent
			{
				set
				{
					parent = value;
				}
			}
			public RotationXEnumerator GetEnumerator() 
			{
				return new RotationXEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class RotationXEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Orientation parent;
			public RotationXEnumerator(Type_Orientation par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.RotationXCount );
			}
			public SchemaDouble  Current 
			{
				get 
				{
					return(parent.GetRotationXAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // RotationX collection

		#region RotationY Documentation
		public static string GetRotationYAnnoDocumentation()
		{
			return "";		
		}
		public static string GetRotationYDefault()
		{
			return "";		
		}
		#endregion

		#region RotationY accessor methods
		public static int GetRotationYMinCount()
		{
			return 1;
		}

		public static int RotationYMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetRotationYMaxCount()
		{
			return 1;
		}

		public static int RotationYMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRotationYCount()
		{
			return DomChildCount(NodeType.Element, "", "RotationY");
		}

		public int RotationYCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "RotationY");
			}
		}

		public bool HasRotationY()
		{
			return HasDomChild(NodeType.Element, "", "RotationY");
		}

		public SchemaDouble NewRotationY()
		{
			return new SchemaDouble();
		}

		public SchemaDouble GetRotationYAt(int index)
		{
			return new SchemaDouble(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "RotationY", index)));
		}

		public XmlNode GetStartingRotationYCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "RotationY" );
		}

		public XmlNode GetAdvancedRotationYCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "RotationY", curNode );
		}

		public SchemaDouble GetRotationYValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDouble( curNode.InnerText );
		}


		public SchemaDouble GetRotationY()
		{
			return GetRotationYAt(0);
		}

		public SchemaDouble RotationY
		{
			get
			{
				return GetRotationYAt(0);
			}
		}

		public void RemoveRotationYAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "RotationY", index);
		}

		public void RemoveRotationY()
		{
			RemoveRotationYAt(0);
		}

		public XmlNode AddRotationY(SchemaDouble newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "RotationY", newValue.ToString());
			return null;
		}

		public void InsertRotationYAt(SchemaDouble newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "RotationY", index, newValue.ToString());
		}

		public void ReplaceRotationYAt(SchemaDouble newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "RotationY", index, newValue.ToString());
		}
		#endregion // RotationY accessor methods

		#region RotationY collection
        public RotationYCollection	MyRotationYs = new RotationYCollection( );

        public class RotationYCollection: IEnumerable
        {
            Type_Orientation parent;
            public Type_Orientation Parent
			{
				set
				{
					parent = value;
				}
			}
			public RotationYEnumerator GetEnumerator() 
			{
				return new RotationYEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class RotationYEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Orientation parent;
			public RotationYEnumerator(Type_Orientation par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.RotationYCount );
			}
			public SchemaDouble  Current 
			{
				get 
				{
					return(parent.GetRotationYAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // RotationY collection

		#region RotationZ Documentation
		public static string GetRotationZAnnoDocumentation()
		{
			return "";		
		}
		public static string GetRotationZDefault()
		{
			return "";		
		}
		#endregion

		#region RotationZ accessor methods
		public static int GetRotationZMinCount()
		{
			return 1;
		}

		public static int RotationZMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetRotationZMaxCount()
		{
			return 1;
		}

		public static int RotationZMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRotationZCount()
		{
			return DomChildCount(NodeType.Element, "", "RotationZ");
		}

		public int RotationZCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "RotationZ");
			}
		}

		public bool HasRotationZ()
		{
			return HasDomChild(NodeType.Element, "", "RotationZ");
		}

		public SchemaDouble NewRotationZ()
		{
			return new SchemaDouble();
		}

		public SchemaDouble GetRotationZAt(int index)
		{
			return new SchemaDouble(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "RotationZ", index)));
		}

		public XmlNode GetStartingRotationZCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "RotationZ" );
		}

		public XmlNode GetAdvancedRotationZCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "RotationZ", curNode );
		}

		public SchemaDouble GetRotationZValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDouble( curNode.InnerText );
		}


		public SchemaDouble GetRotationZ()
		{
			return GetRotationZAt(0);
		}

		public SchemaDouble RotationZ
		{
			get
			{
				return GetRotationZAt(0);
			}
		}

		public void RemoveRotationZAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "RotationZ", index);
		}

		public void RemoveRotationZ()
		{
			RemoveRotationZAt(0);
		}

		public XmlNode AddRotationZ(SchemaDouble newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "RotationZ", newValue.ToString());
			return null;
		}

		public void InsertRotationZAt(SchemaDouble newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "RotationZ", index, newValue.ToString());
		}

		public void ReplaceRotationZAt(SchemaDouble newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "RotationZ", index, newValue.ToString());
		}
		#endregion // RotationZ accessor methods

		#region RotationZ collection
        public RotationZCollection	MyRotationZs = new RotationZCollection( );

        public class RotationZCollection: IEnumerable
        {
            Type_Orientation parent;
            public Type_Orientation Parent
			{
				set
				{
					parent = value;
				}
			}
			public RotationZEnumerator GetEnumerator() 
			{
				return new RotationZEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class RotationZEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Orientation parent;
			public RotationZEnumerator(Type_Orientation par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.RotationZCount );
			}
			public SchemaDouble  Current 
			{
				get 
				{
					return(parent.GetRotationZAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // RotationZ collection

        private void SetCollectionParents()
        {
            MyRotationXs.Parent = this; 
            MyRotationYs.Parent = this; 
            MyRotationZs.Parent = this; 
	}
}
}
