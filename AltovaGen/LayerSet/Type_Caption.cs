//
// Type_Caption.cs
//
// This file was generated by XMLSpy 2007r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LayerSet
{
	public class Type_Caption : Altova.Xml.Node
	{
		#region Documentation
		public static string GetAnnoDocumentation() { return ""; }
		#endregion

		#region Forward constructors

		public Type_Caption() : base() { SetCollectionParents(); }

		public Type_Caption(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public Type_Caption(XmlNode node) : base(node) { SetCollectionParents(); }
		public Type_Caption(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public Type_Caption(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "CaptionText" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "CaptionText", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "DisplayFont" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "DisplayFont", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new Type_DisplayFont(DOMNode).AdjustPrefix();
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "Type_Caption");
		}


		#region CaptionText Documentation
		public static string GetCaptionTextAnnoDocumentation()
		{
			return "";		
		}
		public static string GetCaptionTextDefault()
		{
			return "";		
		}
		#endregion

		#region CaptionText accessor methods
		public static int GetCaptionTextMinCount()
		{
			return 1;
		}

		public static int CaptionTextMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetCaptionTextMaxCount()
		{
			return 1;
		}

		public static int CaptionTextMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCaptionTextCount()
		{
			return DomChildCount(NodeType.Element, "", "CaptionText");
		}

		public int CaptionTextCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CaptionText");
			}
		}

		public bool HasCaptionText()
		{
			return HasDomChild(NodeType.Element, "", "CaptionText");
		}

		public SchemaString NewCaptionText()
		{
			return new SchemaString();
		}

		public SchemaString GetCaptionTextAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "CaptionText", index)));
		}

		public XmlNode GetStartingCaptionTextCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "CaptionText" );
		}

		public XmlNode GetAdvancedCaptionTextCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "CaptionText", curNode );
		}

		public SchemaString GetCaptionTextValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetCaptionText()
		{
			return GetCaptionTextAt(0);
		}

		public SchemaString CaptionText
		{
			get
			{
				return GetCaptionTextAt(0);
			}
		}

		public void RemoveCaptionTextAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CaptionText", index);
		}

		public void RemoveCaptionText()
		{
			RemoveCaptionTextAt(0);
		}

		public XmlNode AddCaptionText(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Element, "", "CaptionText", newValue.ToString());
			return null;
		}

		public void InsertCaptionTextAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "CaptionText", index, newValue.ToString());
		}

		public void ReplaceCaptionTextAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "CaptionText", index, newValue.ToString());
		}
		#endregion // CaptionText accessor methods

		#region CaptionText collection
        public CaptionTextCollection	MyCaptionTexts = new CaptionTextCollection( );

        public class CaptionTextCollection: IEnumerable
        {
            Type_Caption parent;
            public Type_Caption Parent
			{
				set
				{
					parent = value;
				}
			}
			public CaptionTextEnumerator GetEnumerator() 
			{
				return new CaptionTextEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CaptionTextEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Caption parent;
			public CaptionTextEnumerator(Type_Caption par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CaptionTextCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetCaptionTextAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // CaptionText collection

		#region DisplayFont Documentation
		public static string GetDisplayFontAnnoDocumentation()
		{
			return "";		
		}
		public static string GetDisplayFontDefault()
		{
			return "";		
		}
		#endregion

		#region DisplayFont accessor methods
		public static int GetDisplayFontMinCount()
		{
			return 0;
		}

		public static int DisplayFontMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetDisplayFontMaxCount()
		{
			return 1;
		}

		public static int DisplayFontMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDisplayFontCount()
		{
			return DomChildCount(NodeType.Element, "", "DisplayFont");
		}

		public int DisplayFontCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "DisplayFont");
			}
		}

		public bool HasDisplayFont()
		{
			return HasDomChild(NodeType.Element, "", "DisplayFont");
		}

		public Type_DisplayFont NewDisplayFont()
		{
			return new Type_DisplayFont(domNode.OwnerDocument.CreateElement("DisplayFont", ""));
		}

		public Type_DisplayFont GetDisplayFontAt(int index)
		{
			return new Type_DisplayFont(GetDomChildAt(NodeType.Element, "", "DisplayFont", index));
		}

		public XmlNode GetStartingDisplayFontCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "DisplayFont" );
		}

		public XmlNode GetAdvancedDisplayFontCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "DisplayFont", curNode );
		}

		public Type_DisplayFont GetDisplayFontValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new Type_DisplayFont( curNode );
		}


		public Type_DisplayFont GetDisplayFont()
		{
			return GetDisplayFontAt(0);
		}

		public Type_DisplayFont DisplayFont
		{
			get
			{
				return GetDisplayFontAt(0);
			}
		}

		public void RemoveDisplayFontAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "DisplayFont", index);
		}

		public void RemoveDisplayFont()
		{
			RemoveDisplayFontAt(0);
		}

		public XmlNode AddDisplayFont(Type_DisplayFont newValue)
		{
			return AppendDomElement("", "DisplayFont", newValue);
		}

		public void InsertDisplayFontAt(Type_DisplayFont newValue, int index)
		{
			InsertDomElementAt("", "DisplayFont", index, newValue);
		}

		public void ReplaceDisplayFontAt(Type_DisplayFont newValue, int index)
		{
			ReplaceDomElementAt("", "DisplayFont", index, newValue);
		}
		#endregion // DisplayFont accessor methods

		#region DisplayFont collection
        public DisplayFontCollection	MyDisplayFonts = new DisplayFontCollection( );

        public class DisplayFontCollection: IEnumerable
        {
            Type_Caption parent;
            public Type_Caption Parent
			{
				set
				{
					parent = value;
				}
			}
			public DisplayFontEnumerator GetEnumerator() 
			{
				return new DisplayFontEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class DisplayFontEnumerator: IEnumerator 
        {
			int nIndex;
			Type_Caption parent;
			public DisplayFontEnumerator(Type_Caption par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.DisplayFontCount );
			}
			public Type_DisplayFont  Current 
			{
				get 
				{
					return(parent.GetDisplayFontAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // DisplayFont collection

        private void SetCollectionParents()
        {
            MyCaptionTexts.Parent = this; 
            MyDisplayFonts.Parent = this; 
	}
}
}
