//
// UserDefinedSymbolizationType.cs
//
// This file was generated by XMLSpy 2007r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace WMS_MS_Capabilities
{
	public class UserDefinedSymbolizationType : Altova.Xml.Node
	{
		#region Documentation
		public static string GetAnnoDocumentation() { return ""; }
		#endregion

		#region Forward constructors

		public UserDefinedSymbolizationType() : base() { SetCollectionParents(); }

		public UserDefinedSymbolizationType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public UserDefinedSymbolizationType(XmlNode node) : base(node) { SetCollectionParents(); }
		public UserDefinedSymbolizationType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public UserDefinedSymbolizationType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "SupportSLD" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "SupportSLD", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "UserLayer" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "UserLayer", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "UserStyle" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "UserStyle", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "RemoteWFS" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "RemoteWFS", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}

		public void SetXsiType()
		{
 			XmlElement el = (XmlElement) domNode;
			el.SetAttribute("type", "http://www.w3.org/2001/XMLSchema-instance", "UserDefinedSymbolization");
		}


		#region SupportSLD Documentation
		public static string GetSupportSLDAnnoDocumentation()
		{
			return "";		
		}
		public static string GetSupportSLDDefault()
		{
			return "0";		
		}
		#endregion

		#region SupportSLD accessor methods
		public static int GetSupportSLDMinCount()
		{
			return 0;
		}

		public static int SupportSLDMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetSupportSLDMaxCount()
		{
			return 1;
		}

		public static int SupportSLDMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetSupportSLDCount()
		{
			return DomChildCount(NodeType.Attribute, "", "SupportSLD");
		}

		public int SupportSLDCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "SupportSLD");
			}
		}

		public bool HasSupportSLD()
		{
			return HasDomChild(NodeType.Attribute, "", "SupportSLD");
		}

		public EnumerationType6 NewSupportSLD()
		{
			return new EnumerationType6();
		}

		public EnumerationType6 GetSupportSLDAt(int index)
		{
			return new EnumerationType6(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "SupportSLD", index)));
		}

		public XmlNode GetStartingSupportSLDCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "SupportSLD" );
		}

		public XmlNode GetAdvancedSupportSLDCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "SupportSLD", curNode );
		}

		public EnumerationType6 GetSupportSLDValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new EnumerationType6( curNode.Value );
		}


		public EnumerationType6 GetSupportSLD()
		{
			return GetSupportSLDAt(0);
		}

		public EnumerationType6 SupportSLD
		{
			get
			{
				return GetSupportSLDAt(0);
			}
		}

		public void RemoveSupportSLDAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "SupportSLD", index);
		}

		public void RemoveSupportSLD()
		{
			RemoveSupportSLDAt(0);
		}

		public XmlNode AddSupportSLD(EnumerationType6 newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "SupportSLD", newValue.ToString());
			return null;
		}

		public void InsertSupportSLDAt(EnumerationType6 newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "SupportSLD", index, newValue.ToString());
		}

		public void ReplaceSupportSLDAt(EnumerationType6 newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "SupportSLD", index, newValue.ToString());
		}
		#endregion // SupportSLD accessor methods

		#region SupportSLD collection
        public SupportSLDCollection	MySupportSLDs = new SupportSLDCollection( );

        public class SupportSLDCollection: IEnumerable
        {
            UserDefinedSymbolizationType parent;
            public UserDefinedSymbolizationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public SupportSLDEnumerator GetEnumerator() 
			{
				return new SupportSLDEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class SupportSLDEnumerator: IEnumerator 
        {
			int nIndex;
			UserDefinedSymbolizationType parent;
			public SupportSLDEnumerator(UserDefinedSymbolizationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.SupportSLDCount );
			}
			public EnumerationType6  Current 
			{
				get 
				{
					return(parent.GetSupportSLDAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // SupportSLD collection

		#region UserLayer Documentation
		public static string GetUserLayerAnnoDocumentation()
		{
			return "";		
		}
		public static string GetUserLayerDefault()
		{
			return "0";		
		}
		#endregion

		#region UserLayer accessor methods
		public static int GetUserLayerMinCount()
		{
			return 0;
		}

		public static int UserLayerMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetUserLayerMaxCount()
		{
			return 1;
		}

		public static int UserLayerMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUserLayerCount()
		{
			return DomChildCount(NodeType.Attribute, "", "UserLayer");
		}

		public int UserLayerCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "UserLayer");
			}
		}

		public bool HasUserLayer()
		{
			return HasDomChild(NodeType.Attribute, "", "UserLayer");
		}

		public EnumerationType7 NewUserLayer()
		{
			return new EnumerationType7();
		}

		public EnumerationType7 GetUserLayerAt(int index)
		{
			return new EnumerationType7(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "UserLayer", index)));
		}

		public XmlNode GetStartingUserLayerCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "UserLayer" );
		}

		public XmlNode GetAdvancedUserLayerCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "UserLayer", curNode );
		}

		public EnumerationType7 GetUserLayerValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new EnumerationType7( curNode.Value );
		}


		public EnumerationType7 GetUserLayer()
		{
			return GetUserLayerAt(0);
		}

		public EnumerationType7 UserLayer
		{
			get
			{
				return GetUserLayerAt(0);
			}
		}

		public void RemoveUserLayerAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "UserLayer", index);
		}

		public void RemoveUserLayer()
		{
			RemoveUserLayerAt(0);
		}

		public XmlNode AddUserLayer(EnumerationType7 newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "UserLayer", newValue.ToString());
			return null;
		}

		public void InsertUserLayerAt(EnumerationType7 newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "UserLayer", index, newValue.ToString());
		}

		public void ReplaceUserLayerAt(EnumerationType7 newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "UserLayer", index, newValue.ToString());
		}
		#endregion // UserLayer accessor methods

		#region UserLayer collection
        public UserLayerCollection	MyUserLayers = new UserLayerCollection( );

        public class UserLayerCollection: IEnumerable
        {
            UserDefinedSymbolizationType parent;
            public UserDefinedSymbolizationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public UserLayerEnumerator GetEnumerator() 
			{
				return new UserLayerEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class UserLayerEnumerator: IEnumerator 
        {
			int nIndex;
			UserDefinedSymbolizationType parent;
			public UserLayerEnumerator(UserDefinedSymbolizationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.UserLayerCount );
			}
			public EnumerationType7  Current 
			{
				get 
				{
					return(parent.GetUserLayerAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // UserLayer collection

		#region UserStyle Documentation
		public static string GetUserStyleAnnoDocumentation()
		{
			return "";		
		}
		public static string GetUserStyleDefault()
		{
			return "0";		
		}
		#endregion

		#region UserStyle accessor methods
		public static int GetUserStyleMinCount()
		{
			return 0;
		}

		public static int UserStyleMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetUserStyleMaxCount()
		{
			return 1;
		}

		public static int UserStyleMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUserStyleCount()
		{
			return DomChildCount(NodeType.Attribute, "", "UserStyle");
		}

		public int UserStyleCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "UserStyle");
			}
		}

		public bool HasUserStyle()
		{
			return HasDomChild(NodeType.Attribute, "", "UserStyle");
		}

		public EnumerationType8 NewUserStyle()
		{
			return new EnumerationType8();
		}

		public EnumerationType8 GetUserStyleAt(int index)
		{
			return new EnumerationType8(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "UserStyle", index)));
		}

		public XmlNode GetStartingUserStyleCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "UserStyle" );
		}

		public XmlNode GetAdvancedUserStyleCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "UserStyle", curNode );
		}

		public EnumerationType8 GetUserStyleValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new EnumerationType8( curNode.Value );
		}


		public EnumerationType8 GetUserStyle()
		{
			return GetUserStyleAt(0);
		}

		public EnumerationType8 UserStyle
		{
			get
			{
				return GetUserStyleAt(0);
			}
		}

		public void RemoveUserStyleAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "UserStyle", index);
		}

		public void RemoveUserStyle()
		{
			RemoveUserStyleAt(0);
		}

		public XmlNode AddUserStyle(EnumerationType8 newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "UserStyle", newValue.ToString());
			return null;
		}

		public void InsertUserStyleAt(EnumerationType8 newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "UserStyle", index, newValue.ToString());
		}

		public void ReplaceUserStyleAt(EnumerationType8 newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "UserStyle", index, newValue.ToString());
		}
		#endregion // UserStyle accessor methods

		#region UserStyle collection
        public UserStyleCollection	MyUserStyles = new UserStyleCollection( );

        public class UserStyleCollection: IEnumerable
        {
            UserDefinedSymbolizationType parent;
            public UserDefinedSymbolizationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public UserStyleEnumerator GetEnumerator() 
			{
				return new UserStyleEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class UserStyleEnumerator: IEnumerator 
        {
			int nIndex;
			UserDefinedSymbolizationType parent;
			public UserStyleEnumerator(UserDefinedSymbolizationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.UserStyleCount );
			}
			public EnumerationType8  Current 
			{
				get 
				{
					return(parent.GetUserStyleAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // UserStyle collection

		#region RemoteWFS Documentation
		public static string GetRemoteWFSAnnoDocumentation()
		{
			return "";		
		}
		public static string GetRemoteWFSDefault()
		{
			return "0";		
		}
		#endregion

		#region RemoteWFS accessor methods
		public static int GetRemoteWFSMinCount()
		{
			return 0;
		}

		public static int RemoteWFSMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetRemoteWFSMaxCount()
		{
			return 1;
		}

		public static int RemoteWFSMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRemoteWFSCount()
		{
			return DomChildCount(NodeType.Attribute, "", "RemoteWFS");
		}

		public int RemoteWFSCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "RemoteWFS");
			}
		}

		public bool HasRemoteWFS()
		{
			return HasDomChild(NodeType.Attribute, "", "RemoteWFS");
		}

		public EnumerationType9 NewRemoteWFS()
		{
			return new EnumerationType9();
		}

		public EnumerationType9 GetRemoteWFSAt(int index)
		{
			return new EnumerationType9(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "RemoteWFS", index)));
		}

		public XmlNode GetStartingRemoteWFSCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "RemoteWFS" );
		}

		public XmlNode GetAdvancedRemoteWFSCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "RemoteWFS", curNode );
		}

		public EnumerationType9 GetRemoteWFSValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new EnumerationType9( curNode.Value );
		}


		public EnumerationType9 GetRemoteWFS()
		{
			return GetRemoteWFSAt(0);
		}

		public EnumerationType9 RemoteWFS
		{
			get
			{
				return GetRemoteWFSAt(0);
			}
		}

		public void RemoveRemoteWFSAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "RemoteWFS", index);
		}

		public void RemoveRemoteWFS()
		{
			RemoveRemoteWFSAt(0);
		}

		public XmlNode AddRemoteWFS(EnumerationType9 newValue)
		{
			if( newValue.IsNull() == false )
				return AppendDomChild(NodeType.Attribute, "", "RemoteWFS", newValue.ToString());
			return null;
		}

		public void InsertRemoteWFSAt(EnumerationType9 newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "RemoteWFS", index, newValue.ToString());
		}

		public void ReplaceRemoteWFSAt(EnumerationType9 newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "RemoteWFS", index, newValue.ToString());
		}
		#endregion // RemoteWFS accessor methods

		#region RemoteWFS collection
        public RemoteWFSCollection	MyRemoteWFSs = new RemoteWFSCollection( );

        public class RemoteWFSCollection: IEnumerable
        {
            UserDefinedSymbolizationType parent;
            public UserDefinedSymbolizationType Parent
			{
				set
				{
					parent = value;
				}
			}
			public RemoteWFSEnumerator GetEnumerator() 
			{
				return new RemoteWFSEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class RemoteWFSEnumerator: IEnumerator 
        {
			int nIndex;
			UserDefinedSymbolizationType parent;
			public RemoteWFSEnumerator(UserDefinedSymbolizationType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.RemoteWFSCount );
			}
			public EnumerationType9  Current 
			{
				get 
				{
					return(parent.GetRemoteWFSAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // RemoteWFS collection

        private void SetCollectionParents()
        {
            MySupportSLDs.Parent = this; 
            MyUserLayers.Parent = this; 
            MyUserStyles.Parent = this; 
            MyRemoteWFSs.Parent = this; 
	}
}
}
