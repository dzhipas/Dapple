//
// specialbuilderType.cs
//
// This file was generated by XMLSpy 2006r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace dappleview
{
	public class specialbuilderType : Altova.Xml.Node
	{
		#region Forward constructors

		public specialbuilderType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public specialbuilderType(XmlNode node) : base(node) { SetCollectionParents(); }
		public specialbuilderType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public specialbuilderType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Attribute, "", "type" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Attribute, "", "type", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, false);
			}
		}



		#region type2 accessor methods
		public static int Gettype2MinCount()
		{
			return 1;
		}

		public static int type2MinCount
		{
			get
			{
				return 1;
			}
		}

		public static int Gettype2MaxCount()
		{
			return 1;
		}

		public static int type2MaxCount
		{
			get
			{
				return 1;
			}
		}

		public int Gettype2Count()
		{
			return DomChildCount(NodeType.Attribute, "", "type");
		}

		public int type2Count
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "type");
			}
		}

		public bool Hastype2()
		{
			return HasDomChild(NodeType.Attribute, "", "type");
		}

		public SchemaString Newtype2()
		{
			return new SchemaString();
		}

		public SchemaString Gettype2At(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "type", index)));
		}

		public XmlNode GetStartingtype2Cursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "type" );
		}

		public XmlNode GetAdvancedtype2Cursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "type", curNode );
		}

		public SchemaString Gettype2ValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString Gettype2()
		{
			return Gettype2At(0);
		}

		public SchemaString type2
		{
			get
			{
				return Gettype2At(0);
			}
		}

		public void Removetype2At(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "type", index);
		}

		public void Removetype2()
		{
			while (Hastype2())
				Removetype2At(0);
		}

		public void Addtype2(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Attribute, "", "type", newValue.ToString());
		}

		public void Inserttype2At(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Attribute, "", "type", index, newValue.ToString());
		}

		public void Replacetype2At(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "type", index, newValue.ToString());
		}
		#endregion // type2 accessor methods

		#region type2 collection
        public type2Collection	Mytype2s = new type2Collection( );

        public class type2Collection: IEnumerable
        {
            specialbuilderType parent;
            public specialbuilderType Parent
			{
				set
				{
					parent = value;
				}
			}
			public type2Enumerator GetEnumerator() 
			{
				return new type2Enumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class type2Enumerator: IEnumerator 
        {
			int nIndex;
			specialbuilderType parent;
			public type2Enumerator(specialbuilderType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.type2Count );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.Gettype2At(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // type2 collection

        private void SetCollectionParents()
        {
            Mytype2s.Parent = this; 
	}
}
}
