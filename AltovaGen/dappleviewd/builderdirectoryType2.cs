//
// builderdirectoryType2.cs
//
// This file was generated by XMLSpy 2006r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace dappleview
{
	public class builderdirectoryType2 : builderdirectoryType
	{
		#region Forward constructors

		public builderdirectoryType2(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public builderdirectoryType2(XmlNode node) : base(node) { SetCollectionParents(); }
		public builderdirectoryType2(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public builderdirectoryType2(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "builderentries" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "builderentries", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new builderentriesType(DOMNode).AdjustPrefix();
			}

			base.AdjustPrefix();
		}



		#region builderentries accessor methods
		public static int GetbuilderentriesMinCount()
		{
			return 1;
		}

		public static int builderentriesMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetbuilderentriesMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int builderentriesMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetbuilderentriesCount()
		{
			return DomChildCount(NodeType.Element, "", "builderentries");
		}

		public int builderentriesCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "builderentries");
			}
		}

		public bool Hasbuilderentries()
		{
			return HasDomChild(NodeType.Element, "", "builderentries");
		}

		public builderentriesType Newbuilderentries()
		{
			return new builderentriesType(domNode.OwnerDocument.CreateElement("builderentries", ""));
		}

		public builderentriesType GetbuilderentriesAt(int index)
		{
			return new builderentriesType(GetDomChildAt(NodeType.Element, "", "builderentries", index));
		}

		public XmlNode GetStartingbuilderentriesCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "builderentries" );
		}

		public XmlNode GetAdvancedbuilderentriesCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "builderentries", curNode );
		}

		public builderentriesType GetbuilderentriesValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new builderentriesType( curNode );
		}


		public builderentriesType Getbuilderentries()
		{
			return GetbuilderentriesAt(0);
		}

		public builderentriesType builderentries
		{
			get
			{
				return GetbuilderentriesAt(0);
			}
		}

		public void RemovebuilderentriesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "builderentries", index);
		}

		public void Removebuilderentries()
		{
			while (Hasbuilderentries())
				RemovebuilderentriesAt(0);
		}

		public void Addbuilderentries(builderentriesType newValue)
		{
			AppendDomElement("", "builderentries", newValue);
		}

		public void InsertbuilderentriesAt(builderentriesType newValue, int index)
		{
			InsertDomElementAt("", "builderentries", index, newValue);
		}

		public void ReplacebuilderentriesAt(builderentriesType newValue, int index)
		{
			ReplaceDomElementAt("", "builderentries", index, newValue);
		}
		#endregion // builderentries accessor methods

		#region builderentries collection
        public builderentriesCollection	Mybuilderentriess = new builderentriesCollection( );

        public class builderentriesCollection: IEnumerable
        {
            builderdirectoryType2 parent;
            public builderdirectoryType2 Parent
			{
				set
				{
					parent = value;
				}
			}
			public builderentriesEnumerator GetEnumerator() 
			{
				return new builderentriesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class builderentriesEnumerator: IEnumerator 
        {
			int nIndex;
			builderdirectoryType2 parent;
			public builderentriesEnumerator(builderdirectoryType2 par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.builderentriesCount );
			}
			public builderentriesType  Current 
			{
				get 
				{
					return(parent.GetbuilderentriesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // builderentries collection

        private void SetCollectionParents()
        {
            Mybuilderentriess.Parent = this; 
	}
}
}
