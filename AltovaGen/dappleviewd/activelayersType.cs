//
// activelayersType.cs
//
// This file was generated by XMLSpy 2006r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace dappleview
{
	public class activelayersType : Altova.Xml.Node
	{
		#region Forward constructors

		public activelayersType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public activelayersType(XmlNode node) : base(node) { SetCollectionParents(); }
		public activelayersType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public activelayersType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "dataset" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "dataset", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new datasetType(DOMNode).AdjustPrefix();
			}
		}



		#region dataset accessor methods
		public static int GetdatasetMinCount()
		{
			return 1;
		}

		public static int datasetMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetdatasetMaxCount()
		{
			return Int32.MaxValue;
		}

		public static int datasetMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetdatasetCount()
		{
			return DomChildCount(NodeType.Element, "", "dataset");
		}

		public int datasetCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "dataset");
			}
		}

		public bool Hasdataset()
		{
			return HasDomChild(NodeType.Element, "", "dataset");
		}

		public datasetType Newdataset()
		{
			return new datasetType(domNode.OwnerDocument.CreateElement("dataset", ""));
		}

		public datasetType GetdatasetAt(int index)
		{
			return new datasetType(GetDomChildAt(NodeType.Element, "", "dataset", index));
		}

		public XmlNode GetStartingdatasetCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "dataset" );
		}

		public XmlNode GetAdvanceddatasetCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "dataset", curNode );
		}

		public datasetType GetdatasetValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new datasetType( curNode );
		}


		public datasetType Getdataset()
		{
			return GetdatasetAt(0);
		}

		public datasetType dataset
		{
			get
			{
				return GetdatasetAt(0);
			}
		}

		public void RemovedatasetAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "dataset", index);
		}

		public void Removedataset()
		{
			while (Hasdataset())
				RemovedatasetAt(0);
		}

		public void Adddataset(datasetType newValue)
		{
			AppendDomElement("", "dataset", newValue);
		}

		public void InsertdatasetAt(datasetType newValue, int index)
		{
			InsertDomElementAt("", "dataset", index, newValue);
		}

		public void ReplacedatasetAt(datasetType newValue, int index)
		{
			ReplaceDomElementAt("", "dataset", index, newValue);
		}
		#endregion // dataset accessor methods

		#region dataset collection
        public datasetCollection	Mydatasets = new datasetCollection( );

        public class datasetCollection: IEnumerable
        {
            activelayersType parent;
            public activelayersType Parent
			{
				set
				{
					parent = value;
				}
			}
			public datasetEnumerator GetEnumerator() 
			{
				return new datasetEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class datasetEnumerator: IEnumerator 
        {
			int nIndex;
			activelayersType parent;
			public datasetEnumerator(activelayersType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.datasetCount );
			}
			public datasetType  Current 
			{
				get 
				{
					return(parent.GetdatasetAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // dataset collection

        private void SetCollectionParents()
        {
            Mydatasets.Parent = this; 
	}
}
}
