//
// dappleviewType.cs
//
// This file was generated by XMLSpy 2006r3 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace dappleview
{
	public class dappleviewType : Altova.Xml.Node
	{
		#region Forward constructors

		public dappleviewType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public dappleviewType(XmlNode node) : base(node) { SetCollectionParents(); }
		public dappleviewType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		public dappleviewType(Altova.Xml.Document doc, string namespaceURI, string prefix, string name) : base(doc, namespaceURI, prefix, name) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "builderdirectories" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "builderdirectories", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new builderdirectoriesType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "cameraorientation" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "cameraorientation", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
				new cameraorientationType(DOMNode).AdjustPrefix();
			}

		    for (	XmlNode DOMNode = GetDomFirstChild( NodeType.Element, "", "notes" );
					DOMNode != null; 
					DOMNode = GetDomNextChild( NodeType.Element, "", "notes", DOMNode )
				)
			{
				InternalAdjustPrefix(DOMNode, true);
			}
		}



		#region builderdirectories accessor methods
		public static int GetbuilderdirectoriesMinCount()
		{
			return 1;
		}

		public static int builderdirectoriesMinCount
		{
			get
			{
				return 1;
			}
		}

		public static int GetbuilderdirectoriesMaxCount()
		{
			return 1;
		}

		public static int builderdirectoriesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetbuilderdirectoriesCount()
		{
			return DomChildCount(NodeType.Element, "", "builderdirectories");
		}

		public int builderdirectoriesCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "builderdirectories");
			}
		}

		public bool Hasbuilderdirectories()
		{
			return HasDomChild(NodeType.Element, "", "builderdirectories");
		}

		public builderdirectoriesType Newbuilderdirectories()
		{
			return new builderdirectoriesType(domNode.OwnerDocument.CreateElement("builderdirectories", ""));
		}

		public builderdirectoriesType GetbuilderdirectoriesAt(int index)
		{
			return new builderdirectoriesType(GetDomChildAt(NodeType.Element, "", "builderdirectories", index));
		}

		public XmlNode GetStartingbuilderdirectoriesCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "builderdirectories" );
		}

		public XmlNode GetAdvancedbuilderdirectoriesCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "builderdirectories", curNode );
		}

		public builderdirectoriesType GetbuilderdirectoriesValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new builderdirectoriesType( curNode );
		}


		public builderdirectoriesType Getbuilderdirectories()
		{
			return GetbuilderdirectoriesAt(0);
		}

		public builderdirectoriesType builderdirectories
		{
			get
			{
				return GetbuilderdirectoriesAt(0);
			}
		}

		public void RemovebuilderdirectoriesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "builderdirectories", index);
		}

		public void Removebuilderdirectories()
		{
			while (Hasbuilderdirectories())
				RemovebuilderdirectoriesAt(0);
		}

		public void Addbuilderdirectories(builderdirectoriesType newValue)
		{
			AppendDomElement("", "builderdirectories", newValue);
		}

		public void InsertbuilderdirectoriesAt(builderdirectoriesType newValue, int index)
		{
			InsertDomElementAt("", "builderdirectories", index, newValue);
		}

		public void ReplacebuilderdirectoriesAt(builderdirectoriesType newValue, int index)
		{
			ReplaceDomElementAt("", "builderdirectories", index, newValue);
		}
		#endregion // builderdirectories accessor methods

		#region builderdirectories collection
        public builderdirectoriesCollection	Mybuilderdirectoriess = new builderdirectoriesCollection( );

        public class builderdirectoriesCollection: IEnumerable
        {
            dappleviewType parent;
            public dappleviewType Parent
			{
				set
				{
					parent = value;
				}
			}
			public builderdirectoriesEnumerator GetEnumerator() 
			{
				return new builderdirectoriesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class builderdirectoriesEnumerator: IEnumerator 
        {
			int nIndex;
			dappleviewType parent;
			public builderdirectoriesEnumerator(dappleviewType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.builderdirectoriesCount );
			}
			public builderdirectoriesType  Current 
			{
				get 
				{
					return(parent.GetbuilderdirectoriesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // builderdirectories collection

		#region cameraorientation accessor methods
		public static int GetcameraorientationMinCount()
		{
			return 0;
		}

		public static int cameraorientationMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetcameraorientationMaxCount()
		{
			return 1;
		}

		public static int cameraorientationMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetcameraorientationCount()
		{
			return DomChildCount(NodeType.Element, "", "cameraorientation");
		}

		public int cameraorientationCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "cameraorientation");
			}
		}

		public bool Hascameraorientation()
		{
			return HasDomChild(NodeType.Element, "", "cameraorientation");
		}

		public cameraorientationType Newcameraorientation()
		{
			return new cameraorientationType(domNode.OwnerDocument.CreateElement("cameraorientation", ""));
		}

		public cameraorientationType GetcameraorientationAt(int index)
		{
			return new cameraorientationType(GetDomChildAt(NodeType.Element, "", "cameraorientation", index));
		}

		public XmlNode GetStartingcameraorientationCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "cameraorientation" );
		}

		public XmlNode GetAdvancedcameraorientationCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "cameraorientation", curNode );
		}

		public cameraorientationType GetcameraorientationValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new cameraorientationType( curNode );
		}


		public cameraorientationType Getcameraorientation()
		{
			return GetcameraorientationAt(0);
		}

		public cameraorientationType cameraorientation
		{
			get
			{
				return GetcameraorientationAt(0);
			}
		}

		public void RemovecameraorientationAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "cameraorientation", index);
		}

		public void Removecameraorientation()
		{
			while (Hascameraorientation())
				RemovecameraorientationAt(0);
		}

		public void Addcameraorientation(cameraorientationType newValue)
		{
			AppendDomElement("", "cameraorientation", newValue);
		}

		public void InsertcameraorientationAt(cameraorientationType newValue, int index)
		{
			InsertDomElementAt("", "cameraorientation", index, newValue);
		}

		public void ReplacecameraorientationAt(cameraorientationType newValue, int index)
		{
			ReplaceDomElementAt("", "cameraorientation", index, newValue);
		}
		#endregion // cameraorientation accessor methods

		#region cameraorientation collection
        public cameraorientationCollection	Mycameraorientations = new cameraorientationCollection( );

        public class cameraorientationCollection: IEnumerable
        {
            dappleviewType parent;
            public dappleviewType Parent
			{
				set
				{
					parent = value;
				}
			}
			public cameraorientationEnumerator GetEnumerator() 
			{
				return new cameraorientationEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class cameraorientationEnumerator: IEnumerator 
        {
			int nIndex;
			dappleviewType parent;
			public cameraorientationEnumerator(dappleviewType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.cameraorientationCount );
			}
			public cameraorientationType  Current 
			{
				get 
				{
					return(parent.GetcameraorientationAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // cameraorientation collection

		#region notes accessor methods
		public static int GetnotesMinCount()
		{
			return 0;
		}

		public static int notesMinCount
		{
			get
			{
				return 0;
			}
		}

		public static int GetnotesMaxCount()
		{
			return 1;
		}

		public static int notesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetnotesCount()
		{
			return DomChildCount(NodeType.Element, "", "notes");
		}

		public int notesCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "notes");
			}
		}

		public bool Hasnotes()
		{
			return HasDomChild(NodeType.Element, "", "notes");
		}

		public SchemaString Newnotes()
		{
			return new SchemaString();
		}

		public SchemaString GetnotesAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "notes", index)));
		}

		public XmlNode GetStartingnotesCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "notes" );
		}

		public XmlNode GetAdvancednotesCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "notes", curNode );
		}

		public SchemaString GetnotesValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString Getnotes()
		{
			return GetnotesAt(0);
		}

		public SchemaString notes
		{
			get
			{
				return GetnotesAt(0);
			}
		}

		public void RemovenotesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "notes", index);
		}

		public void Removenotes()
		{
			while (Hasnotes())
				RemovenotesAt(0);
		}

		public void Addnotes(SchemaString newValue)
		{
			if( newValue.IsNull() == false )
				AppendDomChild(NodeType.Element, "", "notes", newValue.ToString());
		}

		public void InsertnotesAt(SchemaString newValue, int index)
		{
			if( newValue.IsNull() == false )
				InsertDomChildAt(NodeType.Element, "", "notes", index, newValue.ToString());
		}

		public void ReplacenotesAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "notes", index, newValue.ToString());
		}
		#endregion // notes accessor methods

		#region notes collection
        public notesCollection	Mynotess = new notesCollection( );

        public class notesCollection: IEnumerable
        {
            dappleviewType parent;
            public dappleviewType Parent
			{
				set
				{
					parent = value;
				}
			}
			public notesEnumerator GetEnumerator() 
			{
				return new notesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class notesEnumerator: IEnumerator 
        {
			int nIndex;
			dappleviewType parent;
			public notesEnumerator(dappleviewType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.notesCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetnotesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // notes collection

        private void SetCollectionParents()
        {
            Mybuilderdirectoriess.Parent = this; 
            Mycameraorientations.Parent = this; 
            Mynotess.Parent = this; 
	}
}
}
