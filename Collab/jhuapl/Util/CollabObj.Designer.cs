//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Collab.jhuapl.Util {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("CollabObj")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class CollabObj : System.Data.DataSet {
        
        private InfoDataTable tableInfo;
        
        private PointsDataTable tablePoints;
        
        private CameraDataTable tableCamera;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CollabObj() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected CollabObj(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Info"] != null)) {
                    base.Tables.Add(new InfoDataTable(ds.Tables["Info"]));
                }
                if ((ds.Tables["Points"] != null)) {
                    base.Tables.Add(new PointsDataTable(ds.Tables["Points"]));
                }
                if ((ds.Tables["Camera"] != null)) {
                    base.Tables.Add(new CameraDataTable(ds.Tables["Camera"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InfoDataTable Info {
            get {
                return this.tableInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PointsDataTable Points {
            get {
                return this.tablePoints;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CameraDataTable Camera {
            get {
                return this.tableCamera;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            CollabObj cln = ((CollabObj)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Info"] != null)) {
                    base.Tables.Add(new InfoDataTable(ds.Tables["Info"]));
                }
                if ((ds.Tables["Points"] != null)) {
                    base.Tables.Add(new PointsDataTable(ds.Tables["Points"]));
                }
                if ((ds.Tables["Camera"] != null)) {
                    base.Tables.Add(new CameraDataTable(ds.Tables["Camera"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableInfo = ((InfoDataTable)(base.Tables["Info"]));
            if ((initTable == true)) {
                if ((this.tableInfo != null)) {
                    this.tableInfo.InitVars();
                }
            }
            this.tablePoints = ((PointsDataTable)(base.Tables["Points"]));
            if ((initTable == true)) {
                if ((this.tablePoints != null)) {
                    this.tablePoints.InitVars();
                }
            }
            this.tableCamera = ((CameraDataTable)(base.Tables["Camera"]));
            if ((initTable == true)) {
                if ((this.tableCamera != null)) {
                    this.tableCamera.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "CollabObj";
            this.Prefix = "";
            this.Namespace = "http://jhuapl.edu/Collab/CollabObj.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableInfo = new InfoDataTable();
            base.Tables.Add(this.tableInfo);
            this.tablePoints = new PointsDataTable();
            base.Tables.Add(this.tablePoints);
            this.tableCamera = new CameraDataTable();
            base.Tables.Add(this.tableCamera);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePoints() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCamera() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            CollabObj ds = new CollabObj();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void InfoRowChangeEventHandler(object sender, InfoRowChangeEvent e);
        
        public delegate void PointsRowChangeEventHandler(object sender, PointsRowChangeEvent e);
        
        public delegate void CameraRowChangeEventHandler(object sender, CameraRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnType;
            
            private System.Data.DataColumn columnIcon;
            
            private System.Data.DataColumn columnDesc;
            
            private System.Data.DataColumn columnAffiliation;
            
            private System.Data.DataColumn columnDimension;
            
            private System.Data.DataColumn columnColor;
            
            private System.Data.DataColumn columnLineWidth;
            
            private System.Data.DataColumn columnMinAlt;
            
            private System.Data.DataColumn columnMaxAlt;
            
            private System.Data.DataColumn columnNumPoints;
            
            private System.Data.DataColumn columnURL;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InfoDataTable() {
                this.TableName = "Info";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IconColumn {
                get {
                    return this.columnIcon;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescColumn {
                get {
                    return this.columnDesc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AffiliationColumn {
                get {
                    return this.columnAffiliation;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DimensionColumn {
                get {
                    return this.columnDimension;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ColorColumn {
                get {
                    return this.columnColor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LineWidthColumn {
                get {
                    return this.columnLineWidth;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MinAltColumn {
                get {
                    return this.columnMinAlt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MaxAltColumn {
                get {
                    return this.columnMaxAlt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumPointsColumn {
                get {
                    return this.columnNumPoints;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn URLColumn {
                get {
                    return this.columnURL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InfoRow this[int index] {
                get {
                    return ((InfoRow)(this.Rows[index]));
                }
            }
            
            public event InfoRowChangeEventHandler InfoRowChanging;
            
            public event InfoRowChangeEventHandler InfoRowChanged;
            
            public event InfoRowChangeEventHandler InfoRowDeleting;
            
            public event InfoRowChangeEventHandler InfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInfoRow(InfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InfoRow AddInfoRow(string Name, string Type, string Icon, string Desc, string Affiliation, string Dimension, string Color, double LineWidth, double MinAlt, double MaxAlt, int NumPoints, string URL) {
                InfoRow rowInfoRow = ((InfoRow)(this.NewRow()));
                rowInfoRow.ItemArray = new object[] {
                        Name,
                        Type,
                        Icon,
                        Desc,
                        Affiliation,
                        Dimension,
                        Color,
                        LineWidth,
                        MinAlt,
                        MaxAlt,
                        NumPoints,
                        URL};
                this.Rows.Add(rowInfoRow);
                return rowInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                InfoDataTable cln = ((InfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new InfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnType = base.Columns["Type"];
                this.columnIcon = base.Columns["Icon"];
                this.columnDesc = base.Columns["Desc"];
                this.columnAffiliation = base.Columns["Affiliation"];
                this.columnDimension = base.Columns["Dimension"];
                this.columnColor = base.Columns["Color"];
                this.columnLineWidth = base.Columns["LineWidth"];
                this.columnMinAlt = base.Columns["MinAlt"];
                this.columnMaxAlt = base.Columns["MaxAlt"];
                this.columnNumPoints = base.Columns["NumPoints"];
                this.columnURL = base.Columns["URL"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnType = new System.Data.DataColumn("Type", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnIcon = new System.Data.DataColumn("Icon", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIcon);
                this.columnDesc = new System.Data.DataColumn("Desc", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesc);
                this.columnAffiliation = new System.Data.DataColumn("Affiliation", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAffiliation);
                this.columnDimension = new System.Data.DataColumn("Dimension", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDimension);
                this.columnColor = new System.Data.DataColumn("Color", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnColor);
                this.columnLineWidth = new System.Data.DataColumn("LineWidth", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineWidth);
                this.columnMinAlt = new System.Data.DataColumn("MinAlt", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinAlt);
                this.columnMaxAlt = new System.Data.DataColumn("MaxAlt", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxAlt);
                this.columnNumPoints = new System.Data.DataColumn("NumPoints", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumPoints);
                this.columnURL = new System.Data.DataColumn("URL", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnURL);
                this.columnMinAlt.AllowDBNull = false;
                this.columnMaxAlt.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InfoRow NewInfoRow() {
                return ((InfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new InfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(InfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InfoRowChanged != null)) {
                    this.InfoRowChanged(this, new InfoRowChangeEvent(((InfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InfoRowChanging != null)) {
                    this.InfoRowChanging(this, new InfoRowChangeEvent(((InfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InfoRowDeleted != null)) {
                    this.InfoRowDeleted(this, new InfoRowChangeEvent(((InfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InfoRowDeleting != null)) {
                    this.InfoRowDeleting(this, new InfoRowChangeEvent(((InfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInfoRow(InfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CollabObj ds = new CollabObj();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PointsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLat;
            
            private System.Data.DataColumn columnLon;
            
            private System.Data.DataColumn columnAlt;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PointsDataTable() {
                this.TableName = "Points";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PointsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PointsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LatColumn {
                get {
                    return this.columnLat;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LonColumn {
                get {
                    return this.columnLon;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AltColumn {
                get {
                    return this.columnAlt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PointsRow this[int index] {
                get {
                    return ((PointsRow)(this.Rows[index]));
                }
            }
            
            public event PointsRowChangeEventHandler PointsRowChanging;
            
            public event PointsRowChangeEventHandler PointsRowChanged;
            
            public event PointsRowChangeEventHandler PointsRowDeleting;
            
            public event PointsRowChangeEventHandler PointsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPointsRow(PointsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PointsRow AddPointsRow(double Lat, double Lon, double Alt) {
                PointsRow rowPointsRow = ((PointsRow)(this.NewRow()));
                rowPointsRow.ItemArray = new object[] {
                        Lat,
                        Lon,
                        Alt};
                this.Rows.Add(rowPointsRow);
                return rowPointsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PointsDataTable cln = ((PointsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PointsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLat = base.Columns["Lat"];
                this.columnLon = base.Columns["Lon"];
                this.columnAlt = base.Columns["Alt"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLat = new System.Data.DataColumn("Lat", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLat);
                this.columnLon = new System.Data.DataColumn("Lon", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLon);
                this.columnAlt = new System.Data.DataColumn("Alt", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAlt);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PointsRow NewPointsRow() {
                return ((PointsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PointsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PointsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PointsRowChanged != null)) {
                    this.PointsRowChanged(this, new PointsRowChangeEvent(((PointsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PointsRowChanging != null)) {
                    this.PointsRowChanging(this, new PointsRowChangeEvent(((PointsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PointsRowDeleted != null)) {
                    this.PointsRowDeleted(this, new PointsRowChangeEvent(((PointsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PointsRowDeleting != null)) {
                    this.PointsRowDeleting(this, new PointsRowChangeEvent(((PointsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePointsRow(PointsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CollabObj ds = new CollabObj();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PointsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CameraDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAltitude;
            
            private System.Data.DataColumn columnHeading;
            
            private System.Data.DataColumn columnTilt;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CameraDataTable() {
                this.TableName = "Camera";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CameraDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CameraDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AltitudeColumn {
                get {
                    return this.columnAltitude;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HeadingColumn {
                get {
                    return this.columnHeading;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TiltColumn {
                get {
                    return this.columnTilt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CameraRow this[int index] {
                get {
                    return ((CameraRow)(this.Rows[index]));
                }
            }
            
            public event CameraRowChangeEventHandler CameraRowChanging;
            
            public event CameraRowChangeEventHandler CameraRowChanged;
            
            public event CameraRowChangeEventHandler CameraRowDeleting;
            
            public event CameraRowChangeEventHandler CameraRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCameraRow(CameraRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CameraRow AddCameraRow(double Altitude, double Heading, double Tilt) {
                CameraRow rowCameraRow = ((CameraRow)(this.NewRow()));
                rowCameraRow.ItemArray = new object[] {
                        Altitude,
                        Heading,
                        Tilt};
                this.Rows.Add(rowCameraRow);
                return rowCameraRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CameraDataTable cln = ((CameraDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CameraDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAltitude = base.Columns["Altitude"];
                this.columnHeading = base.Columns["Heading"];
                this.columnTilt = base.Columns["Tilt"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAltitude = new System.Data.DataColumn("Altitude", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAltitude);
                this.columnHeading = new System.Data.DataColumn("Heading", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeading);
                this.columnTilt = new System.Data.DataColumn("Tilt", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTilt);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CameraRow NewCameraRow() {
                return ((CameraRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CameraRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CameraRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CameraRowChanged != null)) {
                    this.CameraRowChanged(this, new CameraRowChangeEvent(((CameraRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CameraRowChanging != null)) {
                    this.CameraRowChanging(this, new CameraRowChangeEvent(((CameraRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CameraRowDeleted != null)) {
                    this.CameraRowDeleted(this, new CameraRowChangeEvent(((CameraRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CameraRowDeleting != null)) {
                    this.CameraRowDeleting(this, new CameraRowChangeEvent(((CameraRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCameraRow(CameraRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CollabObj ds = new CollabObj();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CameraDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InfoRow : System.Data.DataRow {
            
            private InfoDataTable tableInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInfo = ((InfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    if (this.IsNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableInfo.NameColumn]));
                    }
                }
                set {
                    this[this.tableInfo.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    if (this.IsTypeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableInfo.TypeColumn]));
                    }
                }
                set {
                    this[this.tableInfo.TypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Icon {
                get {
                    if (this.IsIconNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableInfo.IconColumn]));
                    }
                }
                set {
                    this[this.tableInfo.IconColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Desc {
                get {
                    if (this.IsDescNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableInfo.DescColumn]));
                    }
                }
                set {
                    this[this.tableInfo.DescColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Affiliation {
                get {
                    if (this.IsAffiliationNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableInfo.AffiliationColumn]));
                    }
                }
                set {
                    this[this.tableInfo.AffiliationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Dimension {
                get {
                    if (this.IsDimensionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableInfo.DimensionColumn]));
                    }
                }
                set {
                    this[this.tableInfo.DimensionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Color {
                get {
                    if (this.IsColorNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableInfo.ColorColumn]));
                    }
                }
                set {
                    this[this.tableInfo.ColorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LineWidth {
                get {
                    try {
                        return ((double)(this[this.tableInfo.LineWidthColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LineWidth\' in table \'Info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfo.LineWidthColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MinAlt {
                get {
                    return ((double)(this[this.tableInfo.MinAltColumn]));
                }
                set {
                    this[this.tableInfo.MinAltColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MaxAlt {
                get {
                    return ((double)(this[this.tableInfo.MaxAltColumn]));
                }
                set {
                    this[this.tableInfo.MaxAltColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumPoints {
                get {
                    try {
                        return ((int)(this[this.tableInfo.NumPointsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NumPoints\' in table \'Info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfo.NumPointsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string URL {
                get {
                    try {
                        return ((string)(this[this.tableInfo.URLColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'URL\' in table \'Info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfo.URLColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableInfo.NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableInfo.NameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableInfo.TypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableInfo.TypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIconNull() {
                return this.IsNull(this.tableInfo.IconColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIconNull() {
                this[this.tableInfo.IconColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescNull() {
                return this.IsNull(this.tableInfo.DescColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescNull() {
                this[this.tableInfo.DescColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAffiliationNull() {
                return this.IsNull(this.tableInfo.AffiliationColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAffiliationNull() {
                this[this.tableInfo.AffiliationColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDimensionNull() {
                return this.IsNull(this.tableInfo.DimensionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDimensionNull() {
                this[this.tableInfo.DimensionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColorNull() {
                return this.IsNull(this.tableInfo.ColorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColorNull() {
                this[this.tableInfo.ColorColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineWidthNull() {
                return this.IsNull(this.tableInfo.LineWidthColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineWidthNull() {
                this[this.tableInfo.LineWidthColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumPointsNull() {
                return this.IsNull(this.tableInfo.NumPointsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumPointsNull() {
                this[this.tableInfo.NumPointsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsURLNull() {
                return this.IsNull(this.tableInfo.URLColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetURLNull() {
                this[this.tableInfo.URLColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PointsRow : System.Data.DataRow {
            
            private PointsDataTable tablePoints;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PointsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePoints = ((PointsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Lat {
                get {
                    try {
                        return ((double)(this[this.tablePoints.LatColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Lat\' in table \'Points\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoints.LatColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Lon {
                get {
                    try {
                        return ((double)(this[this.tablePoints.LonColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Lon\' in table \'Points\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoints.LonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Alt {
                get {
                    try {
                        return ((double)(this[this.tablePoints.AltColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Alt\' in table \'Points\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoints.AltColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLatNull() {
                return this.IsNull(this.tablePoints.LatColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLatNull() {
                this[this.tablePoints.LatColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLonNull() {
                return this.IsNull(this.tablePoints.LonColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLonNull() {
                this[this.tablePoints.LonColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAltNull() {
                return this.IsNull(this.tablePoints.AltColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAltNull() {
                this[this.tablePoints.AltColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CameraRow : System.Data.DataRow {
            
            private CameraDataTable tableCamera;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CameraRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCamera = ((CameraDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Altitude {
                get {
                    try {
                        return ((double)(this[this.tableCamera.AltitudeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Altitude\' in table \'Camera\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCamera.AltitudeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Heading {
                get {
                    try {
                        return ((double)(this[this.tableCamera.HeadingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Heading\' in table \'Camera\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCamera.HeadingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Tilt {
                get {
                    try {
                        return ((double)(this[this.tableCamera.TiltColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Tilt\' in table \'Camera\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCamera.TiltColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAltitudeNull() {
                return this.IsNull(this.tableCamera.AltitudeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAltitudeNull() {
                this[this.tableCamera.AltitudeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeadingNull() {
                return this.IsNull(this.tableCamera.HeadingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeadingNull() {
                this[this.tableCamera.HeadingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTiltNull() {
                return this.IsNull(this.tableCamera.TiltColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTiltNull() {
                this[this.tableCamera.TiltColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InfoRowChangeEvent : System.EventArgs {
            
            private InfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InfoRowChangeEvent(InfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PointsRowChangeEvent : System.EventArgs {
            
            private PointsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PointsRowChangeEvent(PointsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PointsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CameraRowChangeEvent : System.EventArgs {
            
            private CameraRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CameraRowChangeEvent(CameraRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CameraRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591